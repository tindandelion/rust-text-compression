<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422"
    xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame
    graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version,
    and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: -->
    <defs>
        <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
            <stop stop-color="#eeeeee" offset="5%" />
            <stop stop-color="#eeeeb0" offset="95%" />
        </linearGradient>
    </defs>
    <style type="text/css">
        text { font-family:monospace; font-size:12px }
        #title { text-anchor:middle; font-size:17px; }
        #matched { text-anchor:end; }
        #search { text-anchor:end; opacity:0.1; cursor:pointer; }
        #search:hover, #search.show { opacity:1; }
        #subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
        #unzoom { cursor:pointer; }
        #frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
        .hide { display:none; }
        .parent { opacity:0.5; }
</style>
    <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
    <rect x="0" y="0" width="100%" height="422" fill="url(#background)" />
    <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text>
    <text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text>
    <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text>
    <text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text>
    <text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text>
    <svg id="frames" x="10" width="1180" total_samples="33300">
        <g>
            <title>performance-test`text_compression::decoder::decode_string (5 samples, 0.02%)</title>
            <rect x="0.0060%" y="229" width="0.0150%" height="15" fill="rgb(227,0,7)" fg:x="2"
                fg:w="5" />
            <text x="0.2560%" y="239.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.44%)</title>
            <rect x="0.0270%" y="165" width="0.4444%" height="15" fill="rgb(217,0,24)" fg:x="9"
                fg:w="148" />
            <text x="0.2770%" y="175.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as
                core::ops::try_trait::Try&gt;::branch (742 samples, 2.23%)</title>
            <rect x="0.4715%" y="165" width="2.2282%" height="15" fill="rgb(221,193,54)" fg:x="157"
                fg:w="742" />
            <text x="0.7215%" y="175.50">p..</text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::find::check::_{{closure}}
                (15 samples, 0.05%)</title>
            <rect x="2.6997%" y="165" width="0.0450%" height="15" fill="rgb(248,212,6)" fg:x="899"
                fg:w="15" />
            <text x="2.9497%" y="175.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (160 samples, 0.48%)</title>
            <rect x="4.3694%" y="149" width="0.4805%" height="15" fill="rgb(208,68,35)" fg:x="1455"
                fg:w="160" />
            <text x="4.6194%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::navigate::_&lt;impl
                alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv
                (809 samples, 2.43%)</title>
            <rect x="13.9369%" y="101" width="2.4294%" height="15" fill="rgb(232,128,0)" fg:x="4641"
                fg:w="809" />
            <text x="14.1869%" y="111.50">pe..</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::navigate::_&lt;impl
                alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge
                (1,094 samples, 3.29%)</title>
            <rect x="16.3664%" y="101" width="3.2853%" height="15" fill="rgb(207,160,47)"
                fg:x="5450" fg:w="1094" />
            <text x="16.6164%" y="111.50">per..</text>
        </g>
        <g>
            <title>performance-test`&lt;usize as
                core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check
                (146 samples, 0.44%)</title>
            <rect x="23.9339%" y="85" width="0.4384%" height="15" fill="rgb(228,23,34)" fg:x="7970"
                fg:w="146" />
            <text x="24.1839%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::navigate::_&lt;impl
                alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv
                (3,552 samples, 10.67%)</title>
            <rect x="24.3724%" y="85" width="10.6667%" height="15" fill="rgb(218,30,26)" fg:x="8116"
                fg:w="3552" />
            <text x="24.6224%" y="95.50">performance-test..</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::navigate::_&lt;impl
                alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge
                (5,823 samples, 17.49%)</title>
            <rect x="35.0390%" y="85" width="17.4865%" height="15" fill="rgb(220,122,19)"
                fg:x="11668" fg:w="5823" />
            <text x="35.2890%" y="95.50">performance-test`alloc::col..</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend
                (499 samples, 1.50%)</title>
            <rect x="51.0270%" y="69" width="1.4985%" height="15" fill="rgb(250,228,42)"
                fg:x="16992" fg:w="499" />
            <text x="51.2770%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;usize as
                core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (97
                samples, 0.29%)</title>
            <rect x="52.2342%" y="53" width="0.2913%" height="15" fill="rgb(240,193,28)"
                fg:x="17394" fg:w="97" />
            <text x="52.4842%" y="63.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend
                (93 samples, 0.28%)</title>
            <rect x="52.5255%" y="85" width="0.2793%" height="15" fill="rgb(216,20,37)" fg:x="17491"
                fg:w="93" />
            <text x="52.7755%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv
                (5,111 samples, 15.35%)</title>
            <rect x="52.8048%" y="85" width="15.3483%" height="15" fill="rgb(206,188,39)"
                fg:x="17584" fg:w="5111" />
            <text x="53.0548%" y="95.50">performance-test`alloc::..</text>
        </g>
        <g>
            <title>performance-test`&lt;usize as
                core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check
                (1,823 samples, 5.47%)</title>
            <rect x="62.6787%" y="69" width="5.4745%" height="15" fill="rgb(217,207,13)"
                fg:x="20872" fg:w="1823" />
            <text x="62.9287%" y="79.50">perform..</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::mem::replace (19,995 samples, 60.05%)</title>
            <rect x="9.2583%" y="117" width="60.0450%" height="15" fill="rgb(231,73,38)" fg:x="3083"
                fg:w="19995" />
            <text x="9.5083%" y="127.50">performance-test`alloc::collections::btree::mem::replace</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::navigate::_&lt;impl
                alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}}
                (16,534 samples, 49.65%)</title>
            <rect x="19.6517%" y="101" width="49.6517%" height="15" fill="rgb(225,20,46)"
                fg:x="6544" fg:w="16534" />
            <text x="19.9017%" y="111.50">performance-test`alloc::collections::btree::navigate::_&lt;impl
                alloc::collections::b..</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend
                (383 samples, 1.15%)</title>
            <rect x="68.1532%" y="85" width="1.1502%" height="15" fill="rgb(210,31,41)" fg:x="22695"
                fg:w="383" />
            <text x="68.4032%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front
                (837 samples, 2.51%)</title>
            <rect x="69.3033%" y="117" width="2.5135%" height="15" fill="rgb(221,200,47)"
                fg:x="23078" fg:w="837" />
            <text x="69.5533%" y="127.50">pe..</text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (21,703 samples, 65.17%)</title>
            <rect x="6.6456%" y="133" width="65.1742%" height="15" fill="rgb(226,26,5)" fg:x="2213"
                fg:w="21703" />
            <text x="6.8956%" y="143.50">performance-test`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt;
                as core::iter::traits::iterator::Iterator&gt;::next</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::mem::replace (42 samples, 0.13%)</title>
            <rect x="71.8198%" y="133" width="0.1261%" height="15" fill="rgb(249,33,26)"
                fg:x="23916" fg:w="42" />
            <text x="72.0698%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (22,681 samples, 68.11%)</title>
            <rect x="4.8498%" y="149" width="68.1111%" height="15" fill="rgb(235,183,28)"
                fg:x="1615" fg:w="22681" />
            <text x="5.0998%" y="159.50">performance-test`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt;
                as core::iter::traits::iterator::Iterator&gt;::next</text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front
                (338 samples, 1.02%)</title>
            <rect x="71.9459%" y="133" width="1.0150%" height="15" fill="rgb(221,5,38)" fg:x="23958"
                fg:w="338" />
            <text x="72.1959%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring::Substring::matches_start
                (324 samples, 0.97%)</title>
            <rect x="73.9700%" y="133" width="0.9730%" height="15" fill="rgb(247,18,42)"
                fg:x="24632" fg:w="324" />
            <text x="74.2200%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;&amp;alloc::string::String as
                core::str::pattern::Pattern&gt;::is_prefix_of (311 samples, 0.93%)</title>
            <rect x="77.2102%" y="101" width="0.9339%" height="15" fill="rgb(241,131,45)"
                fg:x="25711" fg:w="311" />
            <text x="77.4602%" y="111.50"></text>
        </g>
        <g>
            <title>libsystem_platform.dylib`_platform_memcmp (481 samples, 1.44%)</title>
            <rect x="81.5375%" y="69" width="1.4444%" height="15" fill="rgb(249,31,29)" fg:x="27152"
                fg:w="481" />
            <text x="81.7875%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal
                (147 samples, 0.44%)</title>
            <rect x="82.9820%" y="69" width="0.4414%" height="15" fill="rgb(225,111,53)"
                fg:x="27633" fg:w="147" />
            <text x="83.2320%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::string::String as
                core::ops::index::Index&lt;I&gt;&gt;::index (3,530 samples, 10.60%)</title>
            <rect x="83.4234%" y="69" width="10.6006%" height="15" fill="rgb(238,160,17)"
                fg:x="27780" fg:w="3530" />
            <text x="83.6734%" y="79.50">performance-tes..</text>
        </g>
        <g>
            <title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2,246
                samples, 6.74%)</title>
            <rect x="87.2793%" y="53" width="6.7447%" height="15" fill="rgb(214,148,48)"
                fg:x="29064" fg:w="2246" />
            <text x="87.5293%" y="63.50">performan..</text>
        </g>
        <g>
            <title>performance-test`DYLD-STUB$$memcmp (152 samples, 0.46%)</title>
            <rect x="94.0240%" y="69" width="0.4565%" height="15" fill="rgb(232,36,49)" fg:x="31310"
                fg:w="152" />
            <text x="94.2740%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;&amp;alloc::string::String as
                core::str::pattern::Pattern&gt;::is_prefix_of (5,314 samples, 15.96%)</title>
            <rect x="79.6817%" y="85" width="15.9580%" height="15" fill="rgb(209,103,24)"
                fg:x="26534" fg:w="5314" />
            <text x="79.9317%" y="95.50">performance-test`&lt;&amp;alloc:..</text>
        </g>
        <g>
            <title>performance-test`core::str::traits::_&lt;impl
                core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index
                (385 samples, 1.16%)</title>
            <rect x="94.4835%" y="69" width="1.1562%" height="15" fill="rgb(229,88,8)" fg:x="31463"
                fg:w="385" />
            <text x="94.7335%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal
                (171 samples, 0.51%)</title>
            <rect x="95.6396%" y="85" width="0.5135%" height="15" fill="rgb(213,181,19)"
                fg:x="31848" fg:w="171" />
            <text x="95.8896%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::find::check::_{{closure}}
                (8,083 samples, 24.27%)</title>
            <rect x="72.9610%" y="149" width="24.2733%" height="15" fill="rgb(254,191,54)"
                fg:x="24296" fg:w="8083" />
            <text x="73.2110%" y="159.50">performance-test`core::iter::traits::it..</text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::find_longest_match::_{{closure}}
                (7,423 samples, 22.29%)</title>
            <rect x="74.9429%" y="133" width="22.2913%" height="15" fill="rgb(241,83,37)"
                fg:x="24956" fg:w="7423" />
            <text x="75.1929%" y="143.50">performance-test`text_compression::..</text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring::Substring::matches_start
                (7,153 samples, 21.48%)</title>
            <rect x="75.7538%" y="117" width="21.4805%" height="15" fill="rgb(233,36,39)"
                fg:x="25226" fg:w="7153" />
            <text x="76.0038%" y="127.50">performance-test`text_compression:..</text>
        </g>
        <g>
            <title>performance-test`core::str::_&lt;impl str&gt;::starts_with (6,357 samples,
                19.09%)</title>
            <rect x="78.1441%" y="101" width="19.0901%" height="15" fill="rgb(226,3,54)"
                fg:x="26022" fg:w="6357" />
            <text x="78.3941%" y="111.50">performance-test`core::str::_&lt;..</text>
        </g>
        <g>
            <title>performance-test`core::slice::_&lt;impl [T]&gt;::starts_with (359 samples, 1.08%)</title>
            <rect x="96.1562%" y="85" width="1.0781%" height="15" fill="rgb(245,192,40)"
                fg:x="32020" fg:w="359" />
            <text x="96.4062%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::find (32,513 samples,
                97.64%)</title>
            <rect x="0.0270%" y="181" width="97.6366%" height="15" fill="rgb(238,167,29)" fg:x="9"
                fg:w="32513" />
            <text x="0.2770%" y="191.50">
                performance-test`core::iter::traits::iterator::Iterator::find</text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::try_fold (31,608
                samples, 94.92%)</title>
            <rect x="2.7447%" y="165" width="94.9189%" height="15" fill="rgb(232,182,51)" fg:x="914"
                fg:w="31608" />
            <text x="2.9947%" y="175.50">
                performance-test`core::iter::traits::iterator::Iterator::try_fold</text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::find_longest_match::_{{closure}}
                (143 samples, 0.43%)</title>
            <rect x="97.2342%" y="149" width="0.4294%" height="15" fill="rgb(231,60,39)"
                fg:x="32379" fg:w="143" />
            <text x="97.4842%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::find_longest_match
                (32,515 samples, 97.64%)</title>
            <rect x="0.0240%" y="197" width="97.6426%" height="15" fill="rgb(208,69,12)" fg:x="8"
                fg:w="32515" />
            <text x="0.2740%" y="207.50">
                performance-test`text_compression::encoder::substring_ledger::SubstringLedger::find_longest_match</text>
        </g>
        <g>
            <title>performance-test`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title>
            <rect x="97.7087%" y="133" width="0.0150%" height="15" fill="rgb(235,93,37)"
                fg:x="32537" fg:w="5" />
            <text x="97.9587%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;core::slice::iter::Iter&lt;T&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title>
            <rect x="97.7267%" y="133" width="0.0120%" height="15" fill="rgb(213,116,39)"
                fg:x="32543" fg:w="4" />
            <text x="97.9767%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;text_compression::encoder::substring::Substring as
                core::cmp::Ord&gt;::cmp (14 samples, 0.04%)</title>
            <rect x="97.7387%" y="133" width="0.0420%" height="15" fill="rgb(222,207,29)"
                fg:x="32547" fg:w="14" />
            <text x="97.9887%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (12
                samples, 0.04%)</title>
            <rect x="97.7447%" y="117" width="0.0360%" height="15" fill="rgb(206,96,30)"
                fg:x="32549" fg:w="12" />
            <text x="97.9947%" y="127.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (12
                samples, 0.04%)</title>
            <rect x="97.7447%" y="101" width="0.0360%" height="15" fill="rgb(218,138,4)"
                fg:x="32549" fg:w="12" />
            <text x="97.9947%" y="111.50"></text>
        </g>
        <g>
            <title>performance-test`core::slice::raw::from_raw_parts::precondition_check (5 samples,
                0.02%)</title>
            <rect x="97.7658%" y="85" width="0.0150%" height="15" fill="rgb(250,191,14)"
                fg:x="32556" fg:w="5" />
            <text x="98.0158%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut
                (40 samples, 0.12%)</title>
            <rect x="97.6697%" y="181" width="0.1201%" height="15" fill="rgb(239,60,40)"
                fg:x="32524" fg:w="40" />
            <text x="97.9197%" y="191.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::search::_&lt;impl
                alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree
                (39 samples, 0.12%)</title>
            <rect x="97.6727%" y="165" width="0.1171%" height="15" fill="rgb(206,27,48)"
                fg:x="32525" fg:w="39" />
            <text x="97.9227%" y="175.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::search::_&lt;impl
                alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index
                (34 samples, 0.10%)</title>
            <rect x="97.6877%" y="149" width="0.1021%" height="15" fill="rgb(225,35,8)" fg:x="32530"
                fg:w="34" />
            <text x="97.9377%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::increment_count
                (46 samples, 0.14%)</title>
            <rect x="97.6667%" y="197" width="0.1381%" height="15" fill="rgb(250,213,24)"
                fg:x="32523" fg:w="46" />
            <text x="97.9167%" y="207.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title>
            <rect x="97.8168%" y="117" width="0.0150%" height="15" fill="rgb(247,123,22)"
                fg:x="32573" fg:w="5" />
            <text x="98.0668%" y="127.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;core::slice::iter::Iter&lt;T&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title>
            <rect x="97.8318%" y="117" width="0.0120%" height="15" fill="rgb(231,138,38)"
                fg:x="32578" fg:w="4" />
            <text x="98.0818%" y="127.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (8
                samples, 0.02%)</title>
            <rect x="97.8529%" y="85" width="0.0240%" height="15" fill="rgb(231,145,46)"
                fg:x="32585" fg:w="8" />
            <text x="98.1029%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`core::slice::raw::from_raw_parts::precondition_check (5 samples,
                0.02%)</title>
            <rect x="97.8619%" y="69" width="0.0150%" height="15" fill="rgb(251,118,11)"
                fg:x="32588" fg:w="5" />
            <text x="98.1119%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;text_compression::encoder::substring::Substring as
                core::cmp::Ord&gt;::cmp (12 samples, 0.04%)</title>
            <rect x="97.8438%" y="117" width="0.0360%" height="15" fill="rgb(217,147,25)"
                fg:x="32582" fg:w="12" />
            <text x="98.0938%" y="127.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (9 samples,
                0.03%)</title>
            <rect x="97.8529%" y="101" width="0.0270%" height="15" fill="rgb(247,81,37)"
                fg:x="32585" fg:w="9" />
            <text x="98.1029%" y="111.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (31
                samples, 0.09%)</title>
            <rect x="97.8048%" y="165" width="0.0931%" height="15" fill="rgb(209,12,38)"
                fg:x="32569" fg:w="31" />
            <text x="98.0548%" y="175.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::search::_&lt;impl
                alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree
                (31 samples, 0.09%)</title>
            <rect x="97.8048%" y="149" width="0.0931%" height="15" fill="rgb(227,1,9)" fg:x="32569"
                fg:w="31" />
            <text x="98.0548%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::search::_&lt;impl
                alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index
                (30 samples, 0.09%)</title>
            <rect x="97.8078%" y="133" width="0.0901%" height="15" fill="rgb(248,47,43)"
                fg:x="32570" fg:w="30" />
            <text x="98.0578%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert
                (35 samples, 0.11%)</title>
            <rect x="97.8048%" y="181" width="0.1051%" height="15" fill="rgb(221,10,30)"
                fg:x="32569" fg:w="35" />
            <text x="98.0548%" y="191.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert
                (4 samples, 0.01%)</title>
            <rect x="97.8979%" y="165" width="0.0120%" height="15" fill="rgb(210,229,1)"
                fg:x="32600" fg:w="4" />
            <text x="98.1479%" y="175.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing
                (4 samples, 0.01%)</title>
            <rect x="97.8979%" y="149" width="0.0120%" height="15" fill="rgb(222,148,37)"
                fg:x="32600" fg:w="4" />
            <text x="98.1479%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::build_ledger::build_ledger (32,598
                samples, 97.89%)</title>
            <rect x="0.0210%" y="213" width="97.8919%" height="15" fill="rgb(234,67,33)" fg:x="7"
                fg:w="32598" />
            <text x="0.2710%" y="223.50">
                performance-test`text_compression::encoder::build_ledger::build_ledger</text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::insert_new
                (36 samples, 0.11%)</title>
            <rect x="97.8048%" y="197" width="0.1081%" height="15" fill="rgb(247,98,35)"
                fg:x="32569" fg:w="36" />
            <text x="98.0548%" y="207.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as
                core::ops::try_trait::Try&gt;::branch (54 samples, 0.16%)</title>
            <rect x="97.9309%" y="149" width="0.1622%" height="15" fill="rgb(247,138,52)"
                fg:x="32611" fg:w="54" />
            <text x="98.1809%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;core::slice::iter::Iter&lt;T&gt; as
                core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.27%)</title>
            <rect x="98.0961%" y="149" width="0.2733%" height="15" fill="rgb(213,79,30)"
                fg:x="32666" fg:w="91" />
            <text x="98.3461%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;&amp;alloc::string::String as
                core::str::pattern::Pattern&gt;::is_prefix_of (13 samples, 0.04%)</title>
            <rect x="98.9009%" y="85" width="0.0390%" height="15" fill="rgb(246,177,23)"
                fg:x="32934" fg:w="13" />
            <text x="99.1509%" y="95.50"></text>
        </g>
        <g>
            <title>libsystem_platform.dylib`_platform_memcmp (54 samples, 0.16%)</title>
            <rect x="99.0601%" y="53" width="0.1622%" height="15" fill="rgb(230,62,27)" fg:x="32987"
                fg:w="54" />
            <text x="99.3101%" y="63.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal
                (10 samples, 0.03%)</title>
            <rect x="99.2222%" y="53" width="0.0300%" height="15" fill="rgb(216,154,8)" fg:x="33041"
                fg:w="10" />
            <text x="99.4722%" y="63.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::string::String as
                core::ops::index::Index&lt;I&gt;&gt;::index (145 samples, 0.44%)</title>
            <rect x="99.2523%" y="53" width="0.4354%" height="15" fill="rgb(244,35,45)" fg:x="33051"
                fg:w="145" />
            <text x="99.5023%" y="63.50"></text>
        </g>
        <g>
            <title>performance-test`core::slice::raw::from_raw_parts::precondition_check (98
                samples, 0.29%)</title>
            <rect x="99.3934%" y="37" width="0.2943%" height="15" fill="rgb(251,115,12)"
                fg:x="33098" fg:w="98" />
            <text x="99.6434%" y="47.50"></text>
        </g>
        <g>
            <title>performance-test`DYLD-STUB$$memcmp (18 samples, 0.05%)</title>
            <rect x="99.6877%" y="53" width="0.0541%" height="15" fill="rgb(240,54,50)" fg:x="33196"
                fg:w="18" />
            <text x="99.9377%" y="63.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;&amp;alloc::string::String as
                core::str::pattern::Pattern&gt;::is_prefix_of (267 samples, 0.80%)</title>
            <rect x="99.0090%" y="69" width="0.8018%" height="15" fill="rgb(233,84,52)" fg:x="32970"
                fg:w="267" />
            <text x="99.2590%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`core::str::traits::_&lt;impl
                core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index
                (20 samples, 0.06%)</title>
            <rect x="99.7508%" y="53" width="0.0601%" height="15" fill="rgb(207,117,47)"
                fg:x="33217" fg:w="20" />
            <text x="100.0008%" y="63.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal
                (22 samples, 0.07%)</title>
            <rect x="99.8108%" y="69" width="0.0661%" height="15" fill="rgb(249,43,39)" fg:x="33237"
                fg:w="22" />
            <text x="100.0608%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::find::check::_{{closure}}
                (422 samples, 1.27%)</title>
            <rect x="98.6787%" y="117" width="1.2673%" height="15" fill="rgb(209,38,44)"
                fg:x="32860" fg:w="422" />
            <text x="98.9287%" y="127.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::substring_dictionary::SubstringDictionary::find_match::_{{closure}}
                (372 samples, 1.12%)</title>
            <rect x="98.8288%" y="101" width="1.1171%" height="15" fill="rgb(236,212,23)"
                fg:x="32910" fg:w="372" />
            <text x="99.0788%" y="111.50"></text>
        </g>
        <g>
            <title>performance-test`core::str::_&lt;impl str&gt;::starts_with (335 samples, 1.01%)</title>
            <rect x="98.9399%" y="85" width="1.0060%" height="15" fill="rgb(242,79,21)" fg:x="32947"
                fg:w="335" />
            <text x="99.1899%" y="95.50"></text>
        </g>
        <g>
            <title>performance-test`core::slice::_&lt;impl [T]&gt;::starts_with (21 samples, 0.06%)</title>
            <rect x="99.8829%" y="69" width="0.0631%" height="15" fill="rgb(211,96,35)" fg:x="33261"
                fg:w="21" />
            <text x="100.1329%" y="79.50"></text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::find (681 samples,
                2.05%)</title>
            <rect x="97.9279%" y="181" width="2.0450%" height="15" fill="rgb(253,215,40)"
                fg:x="32610" fg:w="681" />
            <text x="98.1779%" y="191.50">p..</text>
        </g>
        <g>
            <title>performance-test`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as
                core::iter::traits::iterator::Iterator&gt;::try_fold (681 samples, 2.05%)</title>
            <rect x="97.9279%" y="165" width="2.0450%" height="15" fill="rgb(211,81,21)"
                fg:x="32610" fg:w="681" />
            <text x="98.1779%" y="175.50">p..</text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::try_fold (534 samples,
                1.60%)</title>
            <rect x="98.3694%" y="149" width="1.6036%" height="15" fill="rgb(208,190,38)"
                fg:x="32757" fg:w="534" />
            <text x="98.6194%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as
                core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (490
                samples, 1.47%)</title>
            <rect x="98.5015%" y="133" width="1.4715%" height="15" fill="rgb(235,213,38)"
                fg:x="32801" fg:w="490" />
            <text x="98.7515%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::substring_dictionary::SubstringDictionary::find_match::_{{closure}}
                (9 samples, 0.03%)</title>
            <rect x="99.9459%" y="117" width="0.0270%" height="15" fill="rgb(237,122,38)"
                fg:x="33282" fg:w="9" />
            <text x="100.1959%" y="127.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::encode_string::encode_string (687
                samples, 2.06%)</title>
            <rect x="97.9129%" y="213" width="2.0631%" height="15" fill="rgb(244,218,35)"
                fg:x="32605" fg:w="687" />
            <text x="98.1629%" y="223.50">p..</text>
        </g>
        <g>
            <title>performance-test`text_compression::substring_dictionary::SubstringDictionary::find_match
                (684 samples, 2.05%)</title>
            <rect x="97.9219%" y="197" width="2.0541%" height="15" fill="rgb(240,68,47)"
                fg:x="32608" fg:w="684" />
            <text x="98.1719%" y="207.50">p..</text>
        </g>
        <g>
            <title>all (33,300 samples, 100%)</title>
            <rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0"
                fg:w="33300" />
            <text x="0.2500%" y="383.50"></text>
        </g>
        <g>
            <title>dyld`start (33,300 samples, 100.00%)</title>
            <rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,124,12)" fg:x="0"
                fg:w="33300" />
            <text x="0.2500%" y="367.50">dyld`start</text>
        </g>
        <g>
            <title>performance-test`main (33,299 samples, 100.00%)</title>
            <rect x="0.0030%" y="341" width="99.9970%" height="15" fill="rgb(224,169,11)" fg:x="1"
                fg:w="33299" />
            <text x="0.2530%" y="351.50">performance-test`main</text>
        </g>
        <g>
            <title>performance-test`std::rt::lang_start (33,299 samples, 100.00%)</title>
            <rect x="0.0030%" y="325" width="99.9970%" height="15" fill="rgb(250,166,2)" fg:x="1"
                fg:w="33299" />
            <text x="0.2530%" y="335.50">performance-test`std::rt::lang_start</text>
        </g>
        <g>
            <title>performance-test`std::rt::lang_start_internal (33,299 samples, 100.00%)</title>
            <rect x="0.0030%" y="309" width="99.9970%" height="15" fill="rgb(242,216,29)" fg:x="1"
                fg:w="33299" />
            <text x="0.2530%" y="319.50">performance-test`std::rt::lang_start_internal</text>
        </g>
        <g>
            <title>performance-test`std::rt::lang_start::_{{closure}} (33,299 samples, 100.00%)</title>
            <rect x="0.0030%" y="293" width="99.9970%" height="15" fill="rgb(230,116,27)" fg:x="1"
                fg:w="33299" />
            <text x="0.2530%" y="303.50">performance-test`std::rt::lang_start::_{{closure}}</text>
        </g>
        <g>
            <title>performance-test`std::sys::backtrace::__rust_begin_short_backtrace (33,299
                samples, 100.00%)</title>
            <rect x="0.0030%" y="277" width="99.9970%" height="15" fill="rgb(228,99,48)" fg:x="1"
                fg:w="33299" />
            <text x="0.2530%" y="287.50">
                performance-test`std::sys::backtrace::__rust_begin_short_backtrace</text>
        </g>
        <g>
            <title>performance-test`core::ops::function::FnOnce::call_once (33,299 samples, 100.00%)</title>
            <rect x="0.0030%" y="261" width="99.9970%" height="15" fill="rgb(253,11,6)" fg:x="1"
                fg:w="33299" />
            <text x="0.2530%" y="271.50">performance-test`core::ops::function::FnOnce::call_once</text>
        </g>
        <g>
            <title>performance-test`performance_test::main (33,299 samples, 100.00%)</title>
            <rect x="0.0030%" y="245" width="99.9970%" height="15" fill="rgb(247,143,39)" fg:x="1"
                fg:w="33299" />
            <text x="0.2530%" y="255.50">performance-test`performance_test::main</text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::encode (33,293 samples, 99.98%)</title>
            <rect x="0.0210%" y="229" width="99.9790%" height="15" fill="rgb(236,97,10)" fg:x="7"
                fg:w="33293" />
            <text x="0.2710%" y="239.50">performance-test`text_compression::encoder::encode</text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::get_most_impactful_strings
                (8 samples, 0.02%)</title>
            <rect x="99.9760%" y="213" width="0.0240%" height="15" fill="rgb(233,208,19)"
                fg:x="33292" fg:w="8" />
            <text x="100.2260%" y="223.50"></text>
        </g>
        <g>
            <title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::calculate_impacts
                (7 samples, 0.02%)</title>
            <rect x="99.9790%" y="197" width="0.0210%" height="15" fill="rgb(216,164,2)"
                fg:x="33293" fg:w="7" />
            <text x="100.2290%" y="207.50"></text>
        </g>
        <g>
            <title>performance-test`core::iter::traits::iterator::Iterator::collect (4 samples,
                0.01%)</title>
            <rect x="99.9880%" y="181" width="0.0120%" height="15" fill="rgb(220,129,5)"
                fg:x="33296" fg:w="4" />
            <text x="100.2380%" y="191.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::vec::Vec&lt;T&gt; as
                core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.01%)</title>
            <rect x="99.9880%" y="165" width="0.0120%" height="15" fill="rgb(242,17,10)"
                fg:x="33296" fg:w="4" />
            <text x="100.2380%" y="175.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::vec::Vec&lt;T&gt; as
                alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples,
                0.01%)</title>
            <rect x="99.9880%" y="149" width="0.0120%" height="15" fill="rgb(242,107,0)"
                fg:x="33296" fg:w="4" />
            <text x="100.2380%" y="159.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::vec::Vec&lt;T&gt; as
                alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4
                samples, 0.01%)</title>
            <rect x="99.9880%" y="133" width="0.0120%" height="15" fill="rgb(251,28,31)"
                fg:x="33296" fg:w="4" />
            <text x="100.2380%" y="143.50"></text>
        </g>
        <g>
            <title>performance-test`&lt;alloc::vec::Vec&lt;T,A&gt; as
                alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.01%)</title>
            <rect x="99.9880%" y="117" width="0.0120%" height="15" fill="rgb(233,223,10)"
                fg:x="33296" fg:w="4" />
            <text x="100.2380%" y="127.50"></text>
        </g>
        <g>
            <title>performance-test`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.01%)</title>
            <rect x="99.9880%" y="101" width="0.0120%" height="15" fill="rgb(215,21,27)"
                fg:x="33296" fg:w="4" />
            <text x="100.2380%" y="111.50"></text>
        </g>
    </svg>
</svg>