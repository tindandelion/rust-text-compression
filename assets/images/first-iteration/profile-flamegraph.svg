<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="613.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="613.00"> </text><svg id="frames" x="10" width="1180" total_samples="16911"><g><title>libsystem_platform.dylib`_platform_memcmp (30 samples, 0.18%)</title><rect x="0.4435%" y="325" width="0.1774%" height="15" fill="rgb(227,0,7)" fg:x="75" fg:w="30"/><text x="0.6935%" y="335.50"></text></g><g><title>performance-test`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.04%)</title><rect x="0.6209%" y="325" width="0.0414%" height="15" fill="rgb(217,0,24)" fg:x="105" fg:w="7"/><text x="0.8709%" y="335.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (101 samples, 0.60%)</title><rect x="0.6623%" y="325" width="0.5972%" height="15" fill="rgb(221,193,54)" fg:x="112" fg:w="101"/><text x="0.9123%" y="335.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (62 samples, 0.37%)</title><rect x="0.8929%" y="309" width="0.3666%" height="15" fill="rgb(248,212,6)" fg:x="151" fg:w="62"/><text x="1.1429%" y="319.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (7 samples, 0.04%)</title><rect x="1.2595%" y="325" width="0.0414%" height="15" fill="rgb(208,68,35)" fg:x="213" fg:w="7"/><text x="1.5095%" y="335.50"></text></g><g><title>performance-test`&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_prefix_of (171 samples, 1.01%)</title><rect x="0.3489%" y="341" width="1.0112%" height="15" fill="rgb(232,128,0)" fg:x="59" fg:w="171"/><text x="0.5989%" y="351.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index (10 samples, 0.06%)</title><rect x="1.3009%" y="325" width="0.0591%" height="15" fill="rgb(207,160,47)" fg:x="220" fg:w="10"/><text x="1.5509%" y="335.50"></text></g><g><title>performance-test`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (16 samples, 0.09%)</title><rect x="1.3601%" y="341" width="0.0946%" height="15" fill="rgb(228,23,34)" fg:x="230" fg:w="16"/><text x="1.6101%" y="351.50"></text></g><g><title>performance-test`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (257 samples, 1.52%)</title><rect x="0.0118%" y="389" width="1.5197%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="257"/><text x="0.2618%" y="399.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::find_longest_match::_{{closure}} (231 samples, 1.37%)</title><rect x="0.1656%" y="373" width="1.3660%" height="15" fill="rgb(220,122,19)" fg:x="28" fg:w="231"/><text x="0.4156%" y="383.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::starts_with (222 samples, 1.31%)</title><rect x="0.2188%" y="357" width="1.3128%" height="15" fill="rgb(250,228,42)" fg:x="37" fg:w="222"/><text x="0.4688%" y="367.50"></text></g><g><title>performance-test`core::slice::_&lt;impl [T]&gt;::starts_with (13 samples, 0.08%)</title><rect x="1.4547%" y="341" width="0.0769%" height="15" fill="rgb(240,193,28)" fg:x="246" fg:w="13"/><text x="1.7047%" y="351.50"></text></g><g><title>performance-test`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.36%)</title><rect x="1.5315%" y="389" width="0.3607%" height="15" fill="rgb(216,20,37)" fg:x="259" fg:w="61"/><text x="1.7815%" y="399.50"></text></g><g><title>performance-test`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (2 samples, 0.01%)</title><rect x="2.0519%" y="293" width="0.0118%" height="15" fill="rgb(206,188,39)" fg:x="347" fg:w="2"/><text x="2.3019%" y="303.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.08%)</title><rect x="2.0697%" y="261" width="0.0769%" height="15" fill="rgb(217,207,13)" fg:x="350" fg:w="13"/><text x="2.3197%" y="271.50"></text></g><g><title>performance-test`alloc::string::String::as_str (12 samples, 0.07%)</title><rect x="2.0756%" y="245" width="0.0710%" height="15" fill="rgb(231,73,38)" fg:x="351" fg:w="12"/><text x="2.3256%" y="255.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (7 samples, 0.04%)</title><rect x="2.1051%" y="229" width="0.0414%" height="15" fill="rgb(225,20,46)" fg:x="356" fg:w="7"/><text x="2.3551%" y="239.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="2.1524%" y="261" width="0.0118%" height="15" fill="rgb(210,31,41)" fg:x="364" fg:w="2"/><text x="2.4024%" y="271.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (5 samples, 0.03%)</title><rect x="2.1643%" y="261" width="0.0296%" height="15" fill="rgb(221,200,47)" fg:x="366" fg:w="5"/><text x="2.4143%" y="271.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (24 samples, 0.14%)</title><rect x="2.0637%" y="293" width="0.1419%" height="15" fill="rgb(226,26,5)" fg:x="349" fg:w="24"/><text x="2.3137%" y="303.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (23 samples, 0.14%)</title><rect x="2.0697%" y="277" width="0.1360%" height="15" fill="rgb(249,33,26)" fg:x="350" fg:w="23"/><text x="2.3197%" y="287.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (2 samples, 0.01%)</title><rect x="2.1938%" y="261" width="0.0118%" height="15" fill="rgb(235,183,28)" fg:x="371" fg:w="2"/><text x="2.4438%" y="271.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="2.2116%" y="277" width="0.0118%" height="15" fill="rgb(221,5,38)" fg:x="374" fg:w="2"/><text x="2.4616%" y="287.50"></text></g><g><title>performance-test`core::cmp::min_by (4 samples, 0.02%)</title><rect x="2.2057%" y="293" width="0.0237%" height="15" fill="rgb(247,18,42)" fg:x="373" fg:w="4"/><text x="2.4557%" y="303.50"></text></g><g><title>performance-test`core::slice::sort::stable::drift::create_run (45 samples, 0.27%)</title><rect x="1.9691%" y="309" width="0.2661%" height="15" fill="rgb(241,131,45)" fg:x="333" fg:w="45"/><text x="2.2191%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.03%)</title><rect x="2.2352%" y="277" width="0.0296%" height="15" fill="rgb(249,31,29)" fg:x="378" fg:w="5"/><text x="2.4852%" y="287.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (19 samples, 0.11%)</title><rect x="2.2648%" y="277" width="0.1124%" height="15" fill="rgb(225,111,53)" fg:x="383" fg:w="19"/><text x="2.5148%" y="287.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (11 samples, 0.07%)</title><rect x="2.3772%" y="277" width="0.0650%" height="15" fill="rgb(238,160,17)" fg:x="402" fg:w="11"/><text x="2.6272%" y="287.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="2.4599%" y="245" width="0.0118%" height="15" fill="rgb(214,148,48)" fg:x="416" fg:w="2"/><text x="2.7099%" y="255.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="2.4599%" y="229" width="0.0118%" height="15" fill="rgb(232,36,49)" fg:x="416" fg:w="2"/><text x="2.7099%" y="239.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="2.4777%" y="197" width="0.0296%" height="15" fill="rgb(209,103,24)" fg:x="419" fg:w="5"/><text x="2.7277%" y="207.50"></text></g><g><title>performance-test`alloc::string::String::as_str (5 samples, 0.03%)</title><rect x="2.4777%" y="181" width="0.0296%" height="15" fill="rgb(229,88,8)" fg:x="419" fg:w="5"/><text x="2.7277%" y="191.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="2.4895%" y="165" width="0.0177%" height="15" fill="rgb(213,181,19)" fg:x="421" fg:w="3"/><text x="2.7395%" y="175.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="2.5072%" y="197" width="0.0118%" height="15" fill="rgb(254,191,54)" fg:x="424" fg:w="2"/><text x="2.7572%" y="207.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (11 samples, 0.07%)</title><rect x="2.4777%" y="229" width="0.0650%" height="15" fill="rgb(241,83,37)" fg:x="419" fg:w="11"/><text x="2.7277%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (11 samples, 0.07%)</title><rect x="2.4777%" y="213" width="0.0650%" height="15" fill="rgb(233,36,39)" fg:x="419" fg:w="11"/><text x="2.7277%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (3 samples, 0.02%)</title><rect x="2.5250%" y="197" width="0.0177%" height="15" fill="rgb(226,3,54)" fg:x="427" fg:w="3"/><text x="2.7750%" y="207.50"></text></g><g><title>performance-test`alloc::string::String::as_str (7 samples, 0.04%)</title><rect x="2.5486%" y="165" width="0.0414%" height="15" fill="rgb(245,192,40)" fg:x="431" fg:w="7"/><text x="2.7986%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (6 samples, 0.04%)</title><rect x="2.5546%" y="149" width="0.0355%" height="15" fill="rgb(238,167,29)" fg:x="432" fg:w="6"/><text x="2.8046%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (8 samples, 0.05%)</title><rect x="2.5486%" y="181" width="0.0473%" height="15" fill="rgb(232,182,51)" fg:x="431" fg:w="8"/><text x="2.7986%" y="191.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="2.5959%" y="181" width="0.0118%" height="15" fill="rgb(231,60,39)" fg:x="439" fg:w="2"/><text x="2.8459%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (18 samples, 0.11%)</title><rect x="2.5427%" y="213" width="0.1064%" height="15" fill="rgb(208,69,12)" fg:x="430" fg:w="18"/><text x="2.7927%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (17 samples, 0.10%)</title><rect x="2.5486%" y="197" width="0.1005%" height="15" fill="rgb(235,93,37)" fg:x="431" fg:w="17"/><text x="2.7986%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (7 samples, 0.04%)</title><rect x="2.6078%" y="181" width="0.0414%" height="15" fill="rgb(213,116,39)" fg:x="441" fg:w="7"/><text x="2.8578%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::choose_pivot (40 samples, 0.24%)</title><rect x="2.4481%" y="277" width="0.2365%" height="15" fill="rgb(222,207,29)" fg:x="414" fg:w="40"/><text x="2.6981%" y="287.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (39 samples, 0.23%)</title><rect x="2.4540%" y="261" width="0.2306%" height="15" fill="rgb(206,96,30)" fg:x="415" fg:w="39"/><text x="2.7040%" y="271.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (36 samples, 0.21%)</title><rect x="2.4718%" y="245" width="0.2129%" height="15" fill="rgb(218,138,4)" fg:x="418" fg:w="36"/><text x="2.7218%" y="255.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (24 samples, 0.14%)</title><rect x="2.5427%" y="229" width="0.1419%" height="15" fill="rgb(250,191,14)" fg:x="430" fg:w="24"/><text x="2.7927%" y="239.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (6 samples, 0.04%)</title><rect x="2.6492%" y="213" width="0.0355%" height="15" fill="rgb(239,60,40)" fg:x="448" fg:w="6"/><text x="2.8992%" y="223.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (5 samples, 0.03%)</title><rect x="2.6551%" y="197" width="0.0296%" height="15" fill="rgb(206,27,48)" fg:x="449" fg:w="5"/><text x="2.9051%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (4 samples, 0.02%)</title><rect x="2.6610%" y="181" width="0.0237%" height="15" fill="rgb(225,35,8)" fg:x="450" fg:w="4"/><text x="2.9110%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="2.6610%" y="165" width="0.0237%" height="15" fill="rgb(250,213,24)" fg:x="450" fg:w="4"/><text x="2.9110%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (4 samples, 0.02%)</title><rect x="2.6610%" y="149" width="0.0237%" height="15" fill="rgb(247,123,22)" fg:x="450" fg:w="4"/><text x="2.9110%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="2.6728%" y="133" width="0.0118%" height="15" fill="rgb(231,138,38)" fg:x="452" fg:w="2"/><text x="2.9228%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="2.7024%" y="213" width="0.0177%" height="15" fill="rgb(231,145,46)" fg:x="457" fg:w="3"/><text x="2.9524%" y="223.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="2.7024%" y="197" width="0.0177%" height="15" fill="rgb(251,118,11)" fg:x="457" fg:w="3"/><text x="2.9524%" y="207.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="2.7083%" y="181" width="0.0118%" height="15" fill="rgb(217,147,25)" fg:x="458" fg:w="2"/><text x="2.9583%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (8 samples, 0.05%)</title><rect x="2.7024%" y="245" width="0.0473%" height="15" fill="rgb(247,81,37)" fg:x="457" fg:w="8"/><text x="2.9524%" y="255.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (8 samples, 0.05%)</title><rect x="2.7024%" y="229" width="0.0473%" height="15" fill="rgb(209,12,38)" fg:x="457" fg:w="8"/><text x="2.9524%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (5 samples, 0.03%)</title><rect x="2.7201%" y="213" width="0.0296%" height="15" fill="rgb(227,1,9)" fg:x="460" fg:w="5"/><text x="2.9701%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="2.7319%" y="197" width="0.0177%" height="15" fill="rgb(248,47,43)" fg:x="462" fg:w="3"/><text x="2.9819%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (13 samples, 0.08%)</title><rect x="2.6906%" y="261" width="0.0769%" height="15" fill="rgb(221,10,30)" fg:x="455" fg:w="13"/><text x="2.9406%" y="271.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.02%)</title><rect x="2.7497%" y="245" width="0.0177%" height="15" fill="rgb(210,229,1)" fg:x="465" fg:w="3"/><text x="2.9997%" y="255.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (2 samples, 0.01%)</title><rect x="2.7556%" y="229" width="0.0118%" height="15" fill="rgb(222,148,37)" fg:x="466" fg:w="2"/><text x="3.0056%" y="239.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="2.7911%" y="213" width="0.0118%" height="15" fill="rgb(234,67,33)" fg:x="472" fg:w="2"/><text x="3.0411%" y="223.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="2.7911%" y="197" width="0.0118%" height="15" fill="rgb(247,98,35)" fg:x="472" fg:w="2"/><text x="3.0411%" y="207.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="2.7911%" y="181" width="0.0118%" height="15" fill="rgb(247,138,52)" fg:x="472" fg:w="2"/><text x="3.0411%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (6 samples, 0.04%)</title><rect x="2.7793%" y="245" width="0.0355%" height="15" fill="rgb(213,79,30)" fg:x="470" fg:w="6"/><text x="3.0293%" y="255.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (6 samples, 0.04%)</title><rect x="2.7793%" y="229" width="0.0355%" height="15" fill="rgb(246,177,23)" fg:x="470" fg:w="6"/><text x="3.0293%" y="239.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="2.8147%" y="245" width="0.0118%" height="15" fill="rgb(230,62,27)" fg:x="476" fg:w="2"/><text x="3.0647%" y="255.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (12 samples, 0.07%)</title><rect x="2.7674%" y="261" width="0.0710%" height="15" fill="rgb(216,154,8)" fg:x="468" fg:w="12"/><text x="3.0174%" y="271.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3 samples, 0.02%)</title><rect x="2.8620%" y="229" width="0.0177%" height="15" fill="rgb(244,35,45)" fg:x="484" fg:w="3"/><text x="3.1120%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (3 samples, 0.02%)</title><rect x="2.8620%" y="213" width="0.0177%" height="15" fill="rgb(251,115,12)" fg:x="484" fg:w="3"/><text x="3.1120%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (2 samples, 0.01%)</title><rect x="2.8680%" y="197" width="0.0118%" height="15" fill="rgb(240,54,50)" fg:x="485" fg:w="2"/><text x="3.1180%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (7 samples, 0.04%)</title><rect x="2.8502%" y="245" width="0.0414%" height="15" fill="rgb(233,84,52)" fg:x="482" fg:w="7"/><text x="3.1002%" y="255.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="2.8798%" y="229" width="0.0118%" height="15" fill="rgb(207,117,47)" fg:x="487" fg:w="2"/><text x="3.1298%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="2.9212%" y="181" width="0.0118%" height="15" fill="rgb(249,43,39)" fg:x="494" fg:w="2"/><text x="3.1712%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (7 samples, 0.04%)</title><rect x="2.8975%" y="229" width="0.0414%" height="15" fill="rgb(209,38,44)" fg:x="490" fg:w="7"/><text x="3.1475%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (7 samples, 0.04%)</title><rect x="2.8975%" y="213" width="0.0414%" height="15" fill="rgb(236,212,23)" fg:x="490" fg:w="7"/><text x="3.1475%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (4 samples, 0.02%)</title><rect x="2.9153%" y="197" width="0.0237%" height="15" fill="rgb(242,79,21)" fg:x="493" fg:w="4"/><text x="3.1653%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (45 samples, 0.27%)</title><rect x="2.6846%" y="277" width="0.2661%" height="15" fill="rgb(211,96,35)" fg:x="454" fg:w="45"/><text x="2.9346%" y="287.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (18 samples, 0.11%)</title><rect x="2.8443%" y="261" width="0.1064%" height="15" fill="rgb(253,215,40)" fg:x="481" fg:w="18"/><text x="3.0943%" y="271.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (10 samples, 0.06%)</title><rect x="2.8916%" y="245" width="0.0591%" height="15" fill="rgb(211,81,21)" fg:x="489" fg:w="10"/><text x="3.1416%" y="255.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="2.9389%" y="229" width="0.0118%" height="15" fill="rgb(208,190,38)" fg:x="497" fg:w="2"/><text x="3.1889%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="2.9744%" y="261" width="0.0118%" height="15" fill="rgb(235,213,38)" fg:x="503" fg:w="2"/><text x="3.2244%" y="271.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="2.9862%" y="261" width="0.0118%" height="15" fill="rgb(237,122,38)" fg:x="505" fg:w="2"/><text x="3.2362%" y="271.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="3.0335%" y="229" width="0.0177%" height="15" fill="rgb(244,218,35)" fg:x="513" fg:w="3"/><text x="3.2835%" y="239.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="3.0335%" y="213" width="0.0177%" height="15" fill="rgb(240,68,47)" fg:x="513" fg:w="3"/><text x="3.2835%" y="223.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="3.0335%" y="197" width="0.0177%" height="15" fill="rgb(210,16,53)" fg:x="513" fg:w="3"/><text x="3.2835%" y="207.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (11 samples, 0.07%)</title><rect x="2.9980%" y="261" width="0.0650%" height="15" fill="rgb(235,124,12)" fg:x="507" fg:w="11"/><text x="3.2480%" y="271.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (5 samples, 0.03%)</title><rect x="3.0335%" y="245" width="0.0296%" height="15" fill="rgb(224,169,11)" fg:x="513" fg:w="5"/><text x="3.2835%" y="255.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (8 samples, 0.05%)</title><rect x="3.0631%" y="261" width="0.0473%" height="15" fill="rgb(250,166,2)" fg:x="518" fg:w="8"/><text x="3.3131%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="3.1400%" y="197" width="0.0118%" height="15" fill="rgb(242,216,29)" fg:x="531" fg:w="2"/><text x="3.3900%" y="207.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (6 samples, 0.04%)</title><rect x="3.1222%" y="245" width="0.0355%" height="15" fill="rgb(230,116,27)" fg:x="528" fg:w="6"/><text x="3.3722%" y="255.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (6 samples, 0.04%)</title><rect x="3.1222%" y="229" width="0.0355%" height="15" fill="rgb(228,99,48)" fg:x="528" fg:w="6"/><text x="3.3722%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (3 samples, 0.02%)</title><rect x="3.1400%" y="213" width="0.0177%" height="15" fill="rgb(253,11,6)" fg:x="531" fg:w="3"/><text x="3.3900%" y="223.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="3.1636%" y="197" width="0.0177%" height="15" fill="rgb(247,143,39)" fg:x="535" fg:w="3"/><text x="3.4136%" y="207.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="3.1636%" y="181" width="0.0177%" height="15" fill="rgb(236,97,10)" fg:x="535" fg:w="3"/><text x="3.4136%" y="191.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="3.1695%" y="165" width="0.0118%" height="15" fill="rgb(233,208,19)" fg:x="536" fg:w="2"/><text x="3.4195%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (8 samples, 0.05%)</title><rect x="3.1577%" y="229" width="0.0473%" height="15" fill="rgb(216,164,2)" fg:x="534" fg:w="8"/><text x="3.4077%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (7 samples, 0.04%)</title><rect x="3.1636%" y="213" width="0.0414%" height="15" fill="rgb(220,129,5)" fg:x="535" fg:w="7"/><text x="3.4136%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (2 samples, 0.01%)</title><rect x="3.1932%" y="197" width="0.0118%" height="15" fill="rgb(242,17,10)" fg:x="540" fg:w="2"/><text x="3.4432%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (8 samples, 0.05%)</title><rect x="3.2464%" y="181" width="0.0473%" height="15" fill="rgb(242,107,0)" fg:x="549" fg:w="8"/><text x="3.4964%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (8 samples, 0.05%)</title><rect x="3.2464%" y="165" width="0.0473%" height="15" fill="rgb(251,28,31)" fg:x="549" fg:w="8"/><text x="3.4964%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (6 samples, 0.04%)</title><rect x="3.2582%" y="149" width="0.0355%" height="15" fill="rgb(233,223,10)" fg:x="551" fg:w="6"/><text x="3.5082%" y="159.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (3 samples, 0.02%)</title><rect x="3.3055%" y="181" width="0.0177%" height="15" fill="rgb(215,21,27)" fg:x="559" fg:w="3"/><text x="3.5555%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (19 samples, 0.11%)</title><rect x="3.2405%" y="213" width="0.1124%" height="15" fill="rgb(232,23,21)" fg:x="548" fg:w="19"/><text x="3.4905%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (18 samples, 0.11%)</title><rect x="3.2464%" y="197" width="0.1064%" height="15" fill="rgb(244,5,23)" fg:x="549" fg:w="18"/><text x="3.4964%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (5 samples, 0.03%)</title><rect x="3.3233%" y="181" width="0.0296%" height="15" fill="rgb(226,81,46)" fg:x="562" fg:w="5"/><text x="3.5733%" y="191.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.01%)</title><rect x="3.3410%" y="165" width="0.0118%" height="15" fill="rgb(247,70,30)" fg:x="565" fg:w="2"/><text x="3.5910%" y="175.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="3.3765%" y="165" width="0.0414%" height="15" fill="rgb(212,68,19)" fg:x="571" fg:w="7"/><text x="3.6265%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (7 samples, 0.04%)</title><rect x="3.3765%" y="149" width="0.0414%" height="15" fill="rgb(240,187,13)" fg:x="571" fg:w="7"/><text x="3.6265%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="3.4002%" y="133" width="0.0177%" height="15" fill="rgb(223,113,26)" fg:x="575" fg:w="3"/><text x="3.6502%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="3.4415%" y="149" width="0.0118%" height="15" fill="rgb(206,192,2)" fg:x="582" fg:w="2"/><text x="3.6915%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::choose_pivot (60 samples, 0.35%)</title><rect x="3.1104%" y="261" width="0.3548%" height="15" fill="rgb(241,108,4)" fg:x="526" fg:w="60"/><text x="3.3604%" y="271.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (52 samples, 0.31%)</title><rect x="3.1577%" y="245" width="0.3075%" height="15" fill="rgb(247,173,49)" fg:x="534" fg:w="52"/><text x="3.4077%" y="255.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (44 samples, 0.26%)</title><rect x="3.2050%" y="229" width="0.2602%" height="15" fill="rgb(224,114,35)" fg:x="542" fg:w="44"/><text x="3.4550%" y="239.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (19 samples, 0.11%)</title><rect x="3.3528%" y="213" width="0.1124%" height="15" fill="rgb(245,159,27)" fg:x="567" fg:w="19"/><text x="3.6028%" y="223.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (16 samples, 0.09%)</title><rect x="3.3706%" y="197" width="0.0946%" height="15" fill="rgb(245,172,44)" fg:x="570" fg:w="16"/><text x="3.6206%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (15 samples, 0.09%)</title><rect x="3.3765%" y="181" width="0.0887%" height="15" fill="rgb(236,23,11)" fg:x="571" fg:w="15"/><text x="3.6265%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (7 samples, 0.04%)</title><rect x="3.4238%" y="165" width="0.0414%" height="15" fill="rgb(205,117,38)" fg:x="579" fg:w="7"/><text x="3.6738%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.01%)</title><rect x="3.4534%" y="149" width="0.0118%" height="15" fill="rgb(237,72,25)" fg:x="584" fg:w="2"/><text x="3.7034%" y="159.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="3.4711%" y="245" width="0.0237%" height="15" fill="rgb(244,70,9)" fg:x="587" fg:w="4"/><text x="3.7211%" y="255.50"></text></g><g><title>performance-test`&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked::precondition_check (3 samples, 0.02%)</title><rect x="3.4770%" y="229" width="0.0177%" height="15" fill="rgb(217,125,39)" fg:x="588" fg:w="3"/><text x="3.7270%" y="239.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.02%)</title><rect x="3.4948%" y="245" width="0.0177%" height="15" fill="rgb(235,36,10)" fg:x="591" fg:w="3"/><text x="3.7448%" y="255.50"></text></g><g><title>performance-test`alloc::string::String::as_str (17 samples, 0.10%)</title><rect x="3.6308%" y="181" width="0.1005%" height="15" fill="rgb(251,123,47)" fg:x="614" fg:w="17"/><text x="3.8808%" y="191.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.06%)</title><rect x="3.6722%" y="165" width="0.0591%" height="15" fill="rgb(221,13,13)" fg:x="621" fg:w="10"/><text x="3.9222%" y="175.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (18 samples, 0.11%)</title><rect x="3.6308%" y="197" width="0.1064%" height="15" fill="rgb(238,131,9)" fg:x="614" fg:w="18"/><text x="3.8808%" y="207.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="3.7372%" y="197" width="0.0118%" height="15" fill="rgb(211,50,8)" fg:x="632" fg:w="2"/><text x="3.9872%" y="207.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="3.7490%" y="197" width="0.0118%" height="15" fill="rgb(245,182,24)" fg:x="634" fg:w="2"/><text x="3.9990%" y="207.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (29 samples, 0.17%)</title><rect x="3.6189%" y="229" width="0.1715%" height="15" fill="rgb(242,14,37)" fg:x="612" fg:w="29"/><text x="3.8689%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (28 samples, 0.17%)</title><rect x="3.6249%" y="213" width="0.1656%" height="15" fill="rgb(246,228,12)" fg:x="613" fg:w="28"/><text x="3.8749%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (5 samples, 0.03%)</title><rect x="3.7609%" y="197" width="0.0296%" height="15" fill="rgb(213,55,15)" fg:x="636" fg:w="5"/><text x="4.0109%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (53 samples, 0.31%)</title><rect x="3.5125%" y="245" width="0.3134%" height="15" fill="rgb(209,9,3)" fg:x="594" fg:w="53"/><text x="3.7625%" y="255.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (6 samples, 0.04%)</title><rect x="3.7904%" y="229" width="0.0355%" height="15" fill="rgb(230,59,30)" fg:x="641" fg:w="6"/><text x="4.0404%" y="239.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.02%)</title><rect x="3.8082%" y="213" width="0.0177%" height="15" fill="rgb(209,121,21)" fg:x="644" fg:w="3"/><text x="4.0582%" y="223.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (23 samples, 0.14%)</title><rect x="3.9383%" y="197" width="0.1360%" height="15" fill="rgb(220,109,13)" fg:x="666" fg:w="23"/><text x="4.1883%" y="207.50"></text></g><g><title>performance-test`alloc::string::String::as_str (22 samples, 0.13%)</title><rect x="3.9442%" y="181" width="0.1301%" height="15" fill="rgb(232,18,1)" fg:x="667" fg:w="22"/><text x="4.1942%" y="191.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.09%)</title><rect x="3.9856%" y="165" width="0.0887%" height="15" fill="rgb(215,41,42)" fg:x="674" fg:w="15"/><text x="4.2356%" y="175.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="4.0743%" y="197" width="0.0118%" height="15" fill="rgb(224,123,36)" fg:x="689" fg:w="2"/><text x="4.3243%" y="207.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (7 samples, 0.04%)</title><rect x="4.0861%" y="197" width="0.0414%" height="15" fill="rgb(240,125,3)" fg:x="691" fg:w="7"/><text x="4.3361%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="4.1571%" y="181" width="0.0118%" height="15" fill="rgb(205,98,50)" fg:x="703" fg:w="2"/><text x="4.4071%" y="191.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="4.1689%" y="181" width="0.0177%" height="15" fill="rgb(205,185,37)" fg:x="705" fg:w="3"/><text x="4.4189%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (56 samples, 0.33%)</title><rect x="3.9146%" y="229" width="0.3311%" height="15" fill="rgb(238,207,15)" fg:x="662" fg:w="56"/><text x="4.1646%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (55 samples, 0.33%)</title><rect x="3.9205%" y="213" width="0.3252%" height="15" fill="rgb(213,199,42)" fg:x="663" fg:w="55"/><text x="4.1705%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (19 samples, 0.11%)</title><rect x="4.1334%" y="197" width="0.1124%" height="15" fill="rgb(235,201,11)" fg:x="699" fg:w="19"/><text x="4.3834%" y="207.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (10 samples, 0.06%)</title><rect x="4.1866%" y="181" width="0.0591%" height="15" fill="rgb(207,46,11)" fg:x="708" fg:w="10"/><text x="4.4366%" y="191.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (15 samples, 0.09%)</title><rect x="4.2458%" y="229" width="0.0887%" height="15" fill="rgb(241,35,35)" fg:x="718" fg:w="15"/><text x="4.4958%" y="239.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (11 samples, 0.07%)</title><rect x="4.2694%" y="213" width="0.0650%" height="15" fill="rgb(243,32,47)" fg:x="722" fg:w="11"/><text x="4.5194%" y="223.50"></text></g><g><title>performance-test`&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="4.3404%" y="213" width="0.0118%" height="15" fill="rgb(247,202,23)" fg:x="734" fg:w="2"/><text x="4.5904%" y="223.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="4.3404%" y="197" width="0.0118%" height="15" fill="rgb(219,102,11)" fg:x="734" fg:w="2"/><text x="4.5904%" y="207.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;&amp;alloc::string::String&gt;&gt; (4 samples, 0.02%)</title><rect x="4.3345%" y="229" width="0.0237%" height="15" fill="rgb(243,110,44)" fg:x="733" fg:w="4"/><text x="4.5845%" y="239.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (92 samples, 0.54%)</title><rect x="3.8259%" y="245" width="0.5440%" height="15" fill="rgb(222,74,54)" fg:x="647" fg:w="92"/><text x="4.0759%" y="255.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="4.3581%" y="229" width="0.0118%" height="15" fill="rgb(216,99,12)" fg:x="737" fg:w="2"/><text x="4.6081%" y="239.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="4.3759%" y="229" width="0.0118%" height="15" fill="rgb(226,22,26)" fg:x="740" fg:w="2"/><text x="4.6259%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="4.3759%" y="213" width="0.0118%" height="15" fill="rgb(217,163,10)" fg:x="740" fg:w="2"/><text x="4.6259%" y="223.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (5 samples, 0.03%)</title><rect x="4.3699%" y="245" width="0.0296%" height="15" fill="rgb(213,25,53)" fg:x="739" fg:w="5"/><text x="4.6199%" y="255.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="4.3877%" y="229" width="0.0118%" height="15" fill="rgb(252,105,26)" fg:x="742" fg:w="2"/><text x="4.6377%" y="239.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (9 samples, 0.05%)</title><rect x="4.4823%" y="181" width="0.0532%" height="15" fill="rgb(220,39,43)" fg:x="758" fg:w="9"/><text x="4.7323%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (7 samples, 0.04%)</title><rect x="4.4941%" y="165" width="0.0414%" height="15" fill="rgb(229,68,48)" fg:x="760" fg:w="7"/><text x="4.7441%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (5 samples, 0.03%)</title><rect x="4.5059%" y="149" width="0.0296%" height="15" fill="rgb(252,8,32)" fg:x="762" fg:w="5"/><text x="4.7559%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (12 samples, 0.07%)</title><rect x="4.4705%" y="213" width="0.0710%" height="15" fill="rgb(223,20,43)" fg:x="756" fg:w="12"/><text x="4.7205%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (11 samples, 0.07%)</title><rect x="4.4764%" y="197" width="0.0650%" height="15" fill="rgb(229,81,49)" fg:x="757" fg:w="11"/><text x="4.7264%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (23 samples, 0.14%)</title><rect x="4.4172%" y="229" width="0.1360%" height="15" fill="rgb(236,28,36)" fg:x="747" fg:w="23"/><text x="4.6672%" y="239.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="4.5414%" y="213" width="0.0118%" height="15" fill="rgb(249,185,26)" fg:x="768" fg:w="2"/><text x="4.7914%" y="223.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (2 samples, 0.01%)</title><rect x="4.5414%" y="197" width="0.0118%" height="15" fill="rgb(249,174,33)" fg:x="768" fg:w="2"/><text x="4.7914%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="4.5946%" y="181" width="0.0414%" height="15" fill="rgb(233,201,37)" fg:x="777" fg:w="7"/><text x="4.8446%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (7 samples, 0.04%)</title><rect x="4.5946%" y="165" width="0.0414%" height="15" fill="rgb(221,78,26)" fg:x="777" fg:w="7"/><text x="4.8446%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (6 samples, 0.04%)</title><rect x="4.6006%" y="149" width="0.0355%" height="15" fill="rgb(250,127,30)" fg:x="778" fg:w="6"/><text x="4.8506%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="4.6597%" y="165" width="0.0177%" height="15" fill="rgb(230,49,44)" fg:x="788" fg:w="3"/><text x="4.9097%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (18 samples, 0.11%)</title><rect x="4.5769%" y="213" width="0.1064%" height="15" fill="rgb(229,67,23)" fg:x="774" fg:w="18"/><text x="4.8269%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (15 samples, 0.09%)</title><rect x="4.5946%" y="197" width="0.0887%" height="15" fill="rgb(249,83,47)" fg:x="777" fg:w="15"/><text x="4.8446%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (6 samples, 0.04%)</title><rect x="4.6479%" y="181" width="0.0355%" height="15" fill="rgb(215,43,3)" fg:x="786" fg:w="6"/><text x="4.8979%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (211 samples, 1.25%)</title><rect x="3.4652%" y="261" width="1.2477%" height="15" fill="rgb(238,154,13)" fg:x="586" fg:w="211"/><text x="3.7152%" y="271.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (53 samples, 0.31%)</title><rect x="4.3995%" y="245" width="0.3134%" height="15" fill="rgb(219,56,2)" fg:x="744" fg:w="53"/><text x="4.6495%" y="255.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (27 samples, 0.16%)</title><rect x="4.5532%" y="229" width="0.1597%" height="15" fill="rgb(233,0,4)" fg:x="770" fg:w="27"/><text x="4.8032%" y="239.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.03%)</title><rect x="4.6833%" y="213" width="0.0296%" height="15" fill="rgb(235,30,7)" fg:x="792" fg:w="5"/><text x="4.9333%" y="223.50"></text></g><g><title>performance-test`alloc::string::String::as_str (4 samples, 0.02%)</title><rect x="4.7780%" y="197" width="0.0237%" height="15" fill="rgb(250,79,13)" fg:x="808" fg:w="4"/><text x="5.0280%" y="207.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="4.7898%" y="181" width="0.0118%" height="15" fill="rgb(211,146,34)" fg:x="810" fg:w="2"/><text x="5.0398%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="4.7780%" y="213" width="0.0296%" height="15" fill="rgb(228,22,38)" fg:x="808" fg:w="5"/><text x="5.0280%" y="223.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (10 samples, 0.06%)</title><rect x="4.7602%" y="245" width="0.0591%" height="15" fill="rgb(235,168,5)" fg:x="805" fg:w="10"/><text x="5.0102%" y="255.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (7 samples, 0.04%)</title><rect x="4.7780%" y="229" width="0.0414%" height="15" fill="rgb(221,155,16)" fg:x="808" fg:w="7"/><text x="5.0280%" y="239.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.05%)</title><rect x="4.8193%" y="245" width="0.0532%" height="15" fill="rgb(215,215,53)" fg:x="815" fg:w="9"/><text x="5.0693%" y="255.50"></text></g><g><title>performance-test`core::slice::_&lt;impl [T]&gt;::split_at_mut_unchecked (2 samples, 0.01%)</title><rect x="4.8726%" y="245" width="0.0118%" height="15" fill="rgb(223,4,10)" fg:x="824" fg:w="2"/><text x="5.1226%" y="255.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts_mut::precondition_check (2 samples, 0.01%)</title><rect x="4.8726%" y="229" width="0.0118%" height="15" fill="rgb(234,103,6)" fg:x="824" fg:w="2"/><text x="5.1226%" y="239.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (8 samples, 0.05%)</title><rect x="4.9140%" y="229" width="0.0473%" height="15" fill="rgb(227,97,0)" fg:x="831" fg:w="8"/><text x="5.1640%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (7 samples, 0.04%)</title><rect x="4.9199%" y="213" width="0.0414%" height="15" fill="rgb(234,150,53)" fg:x="832" fg:w="7"/><text x="5.1699%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (3 samples, 0.02%)</title><rect x="4.9435%" y="197" width="0.0177%" height="15" fill="rgb(228,201,54)" fg:x="836" fg:w="3"/><text x="5.1935%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="5.0027%" y="181" width="0.0237%" height="15" fill="rgb(222,22,37)" fg:x="846" fg:w="4"/><text x="5.2527%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (4 samples, 0.02%)</title><rect x="5.0027%" y="165" width="0.0237%" height="15" fill="rgb(237,53,32)" fg:x="846" fg:w="4"/><text x="5.2527%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (4 samples, 0.02%)</title><rect x="5.0027%" y="149" width="0.0237%" height="15" fill="rgb(233,25,53)" fg:x="846" fg:w="4"/><text x="5.2527%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (12 samples, 0.07%)</title><rect x="4.9849%" y="213" width="0.0710%" height="15" fill="rgb(210,40,34)" fg:x="843" fg:w="12"/><text x="5.2349%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (10 samples, 0.06%)</title><rect x="4.9967%" y="197" width="0.0591%" height="15" fill="rgb(241,220,44)" fg:x="845" fg:w="10"/><text x="5.2467%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (4 samples, 0.02%)</title><rect x="5.0322%" y="181" width="0.0237%" height="15" fill="rgb(235,28,35)" fg:x="851" fg:w="4"/><text x="5.2822%" y="191.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.01%)</title><rect x="5.0441%" y="165" width="0.0118%" height="15" fill="rgb(210,56,17)" fg:x="853" fg:w="2"/><text x="5.2941%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (12 samples, 0.07%)</title><rect x="5.1032%" y="149" width="0.0710%" height="15" fill="rgb(224,130,29)" fg:x="863" fg:w="12"/><text x="5.3532%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.06%)</title><rect x="5.1150%" y="133" width="0.0591%" height="15" fill="rgb(235,212,8)" fg:x="865" fg:w="10"/><text x="5.3650%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (14 samples, 0.08%)</title><rect x="5.0973%" y="165" width="0.0828%" height="15" fill="rgb(223,33,50)" fg:x="862" fg:w="14"/><text x="5.3473%" y="175.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.02%)</title><rect x="5.1860%" y="165" width="0.0237%" height="15" fill="rgb(219,149,13)" fg:x="877" fg:w="4"/><text x="5.4360%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.02%)</title><rect x="5.2569%" y="149" width="0.0237%" height="15" fill="rgb(250,156,29)" fg:x="889" fg:w="4"/><text x="5.5069%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (41 samples, 0.24%)</title><rect x="5.0795%" y="197" width="0.2424%" height="15" fill="rgb(216,193,19)" fg:x="859" fg:w="41"/><text x="5.3295%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (40 samples, 0.24%)</title><rect x="5.0854%" y="181" width="0.2365%" height="15" fill="rgb(216,135,14)" fg:x="860" fg:w="40"/><text x="5.3354%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (18 samples, 0.11%)</title><rect x="5.2155%" y="165" width="0.1064%" height="15" fill="rgb(241,47,5)" fg:x="882" fg:w="18"/><text x="5.4655%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (6 samples, 0.04%)</title><rect x="5.2865%" y="149" width="0.0355%" height="15" fill="rgb(233,42,35)" fg:x="894" fg:w="6"/><text x="5.5365%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::choose_pivot (77 samples, 0.46%)</title><rect x="4.8844%" y="245" width="0.4553%" height="15" fill="rgb(231,13,6)" fg:x="826" fg:w="77"/><text x="5.1344%" y="255.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (63 samples, 0.37%)</title><rect x="4.9672%" y="229" width="0.3725%" height="15" fill="rgb(207,181,40)" fg:x="840" fg:w="63"/><text x="5.2172%" y="239.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (48 samples, 0.28%)</title><rect x="5.0559%" y="213" width="0.2838%" height="15" fill="rgb(254,173,49)" fg:x="855" fg:w="48"/><text x="5.3059%" y="223.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.02%)</title><rect x="5.3220%" y="197" width="0.0177%" height="15" fill="rgb(221,1,38)" fg:x="900" fg:w="3"/><text x="5.5720%" y="207.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="5.3279%" y="181" width="0.0118%" height="15" fill="rgb(206,124,46)" fg:x="901" fg:w="2"/><text x="5.5779%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="5.3279%" y="165" width="0.0118%" height="15" fill="rgb(249,21,11)" fg:x="901" fg:w="2"/><text x="5.5779%" y="175.50"></text></g><g><title>performance-test`&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="5.3929%" y="213" width="0.0177%" height="15" fill="rgb(222,201,40)" fg:x="912" fg:w="3"/><text x="5.6429%" y="223.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="5.3929%" y="229" width="0.0296%" height="15" fill="rgb(235,61,29)" fg:x="912" fg:w="5"/><text x="5.6429%" y="239.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="5.4343%" y="229" width="0.0118%" height="15" fill="rgb(219,207,3)" fg:x="919" fg:w="2"/><text x="5.6843%" y="239.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (14 samples, 0.08%)</title><rect x="5.4462%" y="229" width="0.0828%" height="15" fill="rgb(222,56,46)" fg:x="921" fg:w="14"/><text x="5.6962%" y="239.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.02%)</title><rect x="5.5112%" y="213" width="0.0177%" height="15" fill="rgb(239,76,54)" fg:x="932" fg:w="3"/><text x="5.7612%" y="223.50"></text></g><g><title>performance-test`alloc::string::String::as_str (37 samples, 0.22%)</title><rect x="5.8719%" y="165" width="0.2188%" height="15" fill="rgb(231,124,27)" fg:x="993" fg:w="37"/><text x="6.1219%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (25 samples, 0.15%)</title><rect x="5.9429%" y="149" width="0.1478%" height="15" fill="rgb(249,195,6)" fg:x="1005" fg:w="25"/><text x="6.1929%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (38 samples, 0.22%)</title><rect x="5.8719%" y="181" width="0.2247%" height="15" fill="rgb(237,174,47)" fg:x="993" fg:w="38"/><text x="6.1219%" y="191.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (2 samples, 0.01%)</title><rect x="6.1025%" y="181" width="0.0118%" height="15" fill="rgb(206,201,31)" fg:x="1032" fg:w="2"/><text x="6.3525%" y="191.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="6.1144%" y="181" width="0.0118%" height="15" fill="rgb(231,57,52)" fg:x="1034" fg:w="2"/><text x="6.3644%" y="191.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (5 samples, 0.03%)</title><rect x="6.1262%" y="181" width="0.0296%" height="15" fill="rgb(248,177,22)" fg:x="1036" fg:w="5"/><text x="6.3762%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.03%)</title><rect x="6.1617%" y="165" width="0.0296%" height="15" fill="rgb(215,211,37)" fg:x="1042" fg:w="5"/><text x="6.4117%" y="175.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="6.1912%" y="165" width="0.0177%" height="15" fill="rgb(241,128,51)" fg:x="1047" fg:w="3"/><text x="6.4412%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (65 samples, 0.38%)</title><rect x="5.8601%" y="213" width="0.3844%" height="15" fill="rgb(227,165,31)" fg:x="991" fg:w="65"/><text x="6.1101%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (64 samples, 0.38%)</title><rect x="5.8660%" y="197" width="0.3785%" height="15" fill="rgb(228,167,24)" fg:x="992" fg:w="64"/><text x="6.1160%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (15 samples, 0.09%)</title><rect x="6.1558%" y="181" width="0.0887%" height="15" fill="rgb(228,143,12)" fg:x="1041" fg:w="15"/><text x="6.4058%" y="191.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (6 samples, 0.04%)</title><rect x="6.2090%" y="165" width="0.0355%" height="15" fill="rgb(249,149,8)" fg:x="1050" fg:w="6"/><text x="6.4590%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (27 samples, 0.16%)</title><rect x="6.2445%" y="213" width="0.1597%" height="15" fill="rgb(243,35,44)" fg:x="1056" fg:w="27"/><text x="6.4945%" y="223.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (15 samples, 0.09%)</title><rect x="6.3154%" y="197" width="0.0887%" height="15" fill="rgb(246,89,9)" fg:x="1068" fg:w="15"/><text x="6.5654%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (150 samples, 0.89%)</title><rect x="5.5349%" y="229" width="0.8870%" height="15" fill="rgb(233,213,13)" fg:x="936" fg:w="150"/><text x="5.7849%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="6.4100%" y="213" width="0.0118%" height="15" fill="rgb(233,141,41)" fg:x="1084" fg:w="2"/><text x="6.6600%" y="223.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="6.5933%" y="197" width="0.0118%" height="15" fill="rgb(239,167,4)" fg:x="1115" fg:w="2"/><text x="6.8433%" y="207.50"></text></g><g><title>performance-test`alloc::string::String::as_str (69 samples, 0.41%)</title><rect x="6.6406%" y="165" width="0.4080%" height="15" fill="rgb(209,217,16)" fg:x="1123" fg:w="69"/><text x="6.8906%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (54 samples, 0.32%)</title><rect x="6.7293%" y="149" width="0.3193%" height="15" fill="rgb(219,88,35)" fg:x="1138" fg:w="54"/><text x="6.9793%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (75 samples, 0.44%)</title><rect x="6.6347%" y="181" width="0.4435%" height="15" fill="rgb(220,193,23)" fg:x="1122" fg:w="75"/><text x="6.8847%" y="191.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (5 samples, 0.03%)</title><rect x="7.0487%" y="165" width="0.0296%" height="15" fill="rgb(230,90,52)" fg:x="1192" fg:w="5"/><text x="7.2987%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="7.0782%" y="181" width="0.0177%" height="15" fill="rgb(252,106,19)" fg:x="1197" fg:w="3"/><text x="7.3282%" y="191.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (6 samples, 0.04%)</title><rect x="7.1019%" y="181" width="0.0355%" height="15" fill="rgb(206,74,20)" fg:x="1201" fg:w="6"/><text x="7.3519%" y="191.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (17 samples, 0.10%)</title><rect x="7.1374%" y="181" width="0.1005%" height="15" fill="rgb(230,138,44)" fg:x="1207" fg:w="17"/><text x="7.3874%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (14 samples, 0.08%)</title><rect x="7.2793%" y="165" width="0.0828%" height="15" fill="rgb(235,182,43)" fg:x="1231" fg:w="14"/><text x="7.5293%" y="175.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="7.3621%" y="165" width="0.0177%" height="15" fill="rgb(242,16,51)" fg:x="1245" fg:w="3"/><text x="7.6121%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (150 samples, 0.89%)</title><rect x="6.5756%" y="213" width="0.8870%" height="15" fill="rgb(248,9,4)" fg:x="1112" fg:w="150"/><text x="6.8256%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (145 samples, 0.86%)</title><rect x="6.6052%" y="197" width="0.8574%" height="15" fill="rgb(210,31,22)" fg:x="1117" fg:w="145"/><text x="6.8552%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (38 samples, 0.22%)</title><rect x="7.2379%" y="181" width="0.2247%" height="15" fill="rgb(239,54,39)" fg:x="1224" fg:w="38"/><text x="7.4879%" y="191.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (14 samples, 0.08%)</title><rect x="7.3798%" y="165" width="0.0828%" height="15" fill="rgb(230,99,41)" fg:x="1248" fg:w="14"/><text x="7.6298%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (45 samples, 0.27%)</title><rect x="7.4626%" y="213" width="0.2661%" height="15" fill="rgb(253,106,12)" fg:x="1262" fg:w="45"/><text x="7.7126%" y="223.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (20 samples, 0.12%)</title><rect x="7.6104%" y="197" width="0.1183%" height="15" fill="rgb(213,46,41)" fg:x="1287" fg:w="20"/><text x="7.8604%" y="207.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;&amp;alloc::string::String&gt;&gt; (7 samples, 0.04%)</title><rect x="7.7287%" y="213" width="0.0414%" height="15" fill="rgb(215,133,35)" fg:x="1307" fg:w="7"/><text x="7.9787%" y="223.50"></text></g><g><title>performance-test`&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="7.7464%" y="197" width="0.0237%" height="15" fill="rgb(213,28,5)" fg:x="1310" fg:w="4"/><text x="7.9964%" y="207.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.02%)</title><rect x="7.7464%" y="181" width="0.0237%" height="15" fill="rgb(215,77,49)" fg:x="1310" fg:w="4"/><text x="7.9964%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.02%)</title><rect x="7.7524%" y="165" width="0.0177%" height="15" fill="rgb(248,100,22)" fg:x="1311" fg:w="3"/><text x="8.0024%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (230 samples, 1.36%)</title><rect x="6.4219%" y="229" width="1.3601%" height="15" fill="rgb(208,67,9)" fg:x="1086" fg:w="230"/><text x="6.6719%" y="239.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="7.7878%" y="181" width="0.0177%" height="15" fill="rgb(219,133,21)" fg:x="1317" fg:w="3"/><text x="8.0378%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="7.7878%" y="165" width="0.0177%" height="15" fill="rgb(246,46,29)" fg:x="1317" fg:w="3"/><text x="8.0378%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (5 samples, 0.03%)</title><rect x="7.7878%" y="213" width="0.0296%" height="15" fill="rgb(246,185,52)" fg:x="1317" fg:w="5"/><text x="8.0378%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (5 samples, 0.03%)</title><rect x="7.7878%" y="197" width="0.0296%" height="15" fill="rgb(252,136,11)" fg:x="1317" fg:w="5"/><text x="8.0378%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (11 samples, 0.07%)</title><rect x="7.7819%" y="229" width="0.0650%" height="15" fill="rgb(219,138,53)" fg:x="1316" fg:w="11"/><text x="8.0319%" y="239.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.03%)</title><rect x="7.8174%" y="213" width="0.0296%" height="15" fill="rgb(211,51,23)" fg:x="1322" fg:w="5"/><text x="8.0674%" y="223.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.02%)</title><rect x="7.8292%" y="197" width="0.0177%" height="15" fill="rgb(247,221,28)" fg:x="1324" fg:w="3"/><text x="8.0792%" y="207.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="8.0125%" y="197" width="0.0118%" height="15" fill="rgb(251,222,45)" fg:x="1355" fg:w="2"/><text x="8.2625%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="8.0244%" y="181" width="0.0118%" height="15" fill="rgb(217,162,53)" fg:x="1357" fg:w="2"/><text x="8.2744%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (17 samples, 0.10%)</title><rect x="8.0480%" y="149" width="0.1005%" height="15" fill="rgb(229,93,14)" fg:x="1361" fg:w="17"/><text x="8.2980%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (12 samples, 0.07%)</title><rect x="8.0776%" y="133" width="0.0710%" height="15" fill="rgb(209,67,49)" fg:x="1366" fg:w="12"/><text x="8.3276%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (20 samples, 0.12%)</title><rect x="8.0362%" y="165" width="0.1183%" height="15" fill="rgb(213,87,29)" fg:x="1359" fg:w="20"/><text x="8.2862%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="8.1545%" y="165" width="0.0177%" height="15" fill="rgb(205,151,52)" fg:x="1379" fg:w="3"/><text x="8.4045%" y="175.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (4 samples, 0.02%)</title><rect x="8.1722%" y="165" width="0.0237%" height="15" fill="rgb(253,215,39)" fg:x="1382" fg:w="4"/><text x="8.4222%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.03%)</title><rect x="8.2018%" y="149" width="0.0296%" height="15" fill="rgb(221,220,41)" fg:x="1387" fg:w="5"/><text x="8.4518%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (37 samples, 0.22%)</title><rect x="8.0244%" y="197" width="0.2188%" height="15" fill="rgb(218,133,21)" fg:x="1357" fg:w="37"/><text x="8.2744%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (35 samples, 0.21%)</title><rect x="8.0362%" y="181" width="0.2070%" height="15" fill="rgb(221,193,43)" fg:x="1359" fg:w="35"/><text x="8.2862%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (8 samples, 0.05%)</title><rect x="8.1958%" y="165" width="0.0473%" height="15" fill="rgb(240,128,52)" fg:x="1386" fg:w="8"/><text x="8.4458%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (10 samples, 0.06%)</title><rect x="8.2432%" y="197" width="0.0591%" height="15" fill="rgb(253,114,12)" fg:x="1394" fg:w="10"/><text x="8.4932%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (7 samples, 0.04%)</title><rect x="8.2609%" y="181" width="0.0414%" height="15" fill="rgb(215,223,47)" fg:x="1397" fg:w="7"/><text x="8.5109%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (76 samples, 0.45%)</title><rect x="7.8588%" y="213" width="0.4494%" height="15" fill="rgb(248,225,23)" fg:x="1329" fg:w="76"/><text x="8.1088%" y="223.50"></text></g><g><title>performance-test`alloc::string::String::as_str (32 samples, 0.19%)</title><rect x="8.3851%" y="149" width="0.1892%" height="15" fill="rgb(250,108,0)" fg:x="1418" fg:w="32"/><text x="8.6351%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (21 samples, 0.12%)</title><rect x="8.4501%" y="133" width="0.1242%" height="15" fill="rgb(228,208,7)" fg:x="1429" fg:w="21"/><text x="8.7001%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (35 samples, 0.21%)</title><rect x="8.3732%" y="165" width="0.2070%" height="15" fill="rgb(244,45,10)" fg:x="1416" fg:w="35"/><text x="8.6232%" y="175.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (3 samples, 0.02%)</title><rect x="8.5802%" y="165" width="0.0177%" height="15" fill="rgb(207,125,25)" fg:x="1451" fg:w="3"/><text x="8.8302%" y="175.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.02%)</title><rect x="8.5980%" y="165" width="0.0177%" height="15" fill="rgb(210,195,18)" fg:x="1454" fg:w="3"/><text x="8.8480%" y="175.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="8.6157%" y="165" width="0.0118%" height="15" fill="rgb(249,80,12)" fg:x="1457" fg:w="2"/><text x="8.8657%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="8.6453%" y="149" width="0.0177%" height="15" fill="rgb(221,65,9)" fg:x="1462" fg:w="3"/><text x="8.8953%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="8.6630%" y="149" width="0.0118%" height="15" fill="rgb(235,49,36)" fg:x="1465" fg:w="2"/><text x="8.9130%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (58 samples, 0.34%)</title><rect x="8.3555%" y="197" width="0.3430%" height="15" fill="rgb(225,32,20)" fg:x="1413" fg:w="58"/><text x="8.6055%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (57 samples, 0.34%)</title><rect x="8.3614%" y="181" width="0.3371%" height="15" fill="rgb(215,141,46)" fg:x="1414" fg:w="57"/><text x="8.6114%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (12 samples, 0.07%)</title><rect x="8.6275%" y="165" width="0.0710%" height="15" fill="rgb(250,160,47)" fg:x="1459" fg:w="12"/><text x="8.8775%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (4 samples, 0.02%)</title><rect x="8.6748%" y="149" width="0.0237%" height="15" fill="rgb(216,222,40)" fg:x="1467" fg:w="4"/><text x="8.9248%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (16 samples, 0.09%)</title><rect x="8.6985%" y="197" width="0.0946%" height="15" fill="rgb(234,217,39)" fg:x="1471" fg:w="16"/><text x="8.9485%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (7 samples, 0.04%)</title><rect x="8.7517%" y="181" width="0.0414%" height="15" fill="rgb(207,178,40)" fg:x="1480" fg:w="7"/><text x="9.0017%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (584 samples, 3.45%)</title><rect x="5.3456%" y="245" width="3.4534%" height="15" fill="rgb(221,136,13)" fg:x="904" fg:w="584"/><text x="5.5956%" y="255.50">per..</text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (161 samples, 0.95%)</title><rect x="7.8470%" y="229" width="0.9520%" height="15" fill="rgb(249,199,10)" fg:x="1327" fg:w="161"/><text x="8.0970%" y="239.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (83 samples, 0.49%)</title><rect x="8.3082%" y="213" width="0.4908%" height="15" fill="rgb(249,222,13)" fg:x="1405" fg:w="83"/><text x="8.5582%" y="223.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="8.8404%" y="229" width="0.0118%" height="15" fill="rgb(244,185,38)" fg:x="1495" fg:w="2"/><text x="9.0904%" y="239.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (6 samples, 0.04%)</title><rect x="8.8522%" y="229" width="0.0355%" height="15" fill="rgb(236,202,9)" fg:x="1497" fg:w="6"/><text x="9.1022%" y="239.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (5 samples, 0.03%)</title><rect x="8.8581%" y="213" width="0.0296%" height="15" fill="rgb(250,229,37)" fg:x="1498" fg:w="5"/><text x="9.1081%" y="223.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.05%)</title><rect x="8.8877%" y="229" width="0.0532%" height="15" fill="rgb(206,174,23)" fg:x="1503" fg:w="9"/><text x="9.1377%" y="239.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="8.9764%" y="181" width="0.0237%" height="15" fill="rgb(211,33,43)" fg:x="1518" fg:w="4"/><text x="9.2264%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (4 samples, 0.02%)</title><rect x="8.9764%" y="165" width="0.0237%" height="15" fill="rgb(245,58,50)" fg:x="1518" fg:w="4"/><text x="9.2264%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="8.9823%" y="149" width="0.0177%" height="15" fill="rgb(244,68,36)" fg:x="1519" fg:w="3"/><text x="9.2323%" y="159.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="9.0001%" y="181" width="0.0118%" height="15" fill="rgb(232,229,15)" fg:x="1522" fg:w="2"/><text x="9.2501%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="9.0119%" y="165" width="0.0177%" height="15" fill="rgb(254,30,23)" fg:x="1524" fg:w="3"/><text x="9.2619%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (11 samples, 0.07%)</title><rect x="8.9705%" y="213" width="0.0650%" height="15" fill="rgb(235,160,14)" fg:x="1517" fg:w="11"/><text x="9.2205%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (11 samples, 0.07%)</title><rect x="8.9705%" y="197" width="0.0650%" height="15" fill="rgb(212,155,44)" fg:x="1517" fg:w="11"/><text x="9.2205%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (4 samples, 0.02%)</title><rect x="9.0119%" y="181" width="0.0237%" height="15" fill="rgb(226,2,50)" fg:x="1524" fg:w="4"/><text x="9.2619%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="9.0769%" y="165" width="0.0355%" height="15" fill="rgb(234,177,6)" fg:x="1535" fg:w="6"/><text x="9.3269%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (6 samples, 0.04%)</title><rect x="9.0769%" y="149" width="0.0355%" height="15" fill="rgb(217,24,9)" fg:x="1535" fg:w="6"/><text x="9.3269%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="9.0947%" y="133" width="0.0177%" height="15" fill="rgb(220,13,46)" fg:x="1538" fg:w="3"/><text x="9.3447%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (12 samples, 0.07%)</title><rect x="9.0592%" y="197" width="0.0710%" height="15" fill="rgb(239,221,27)" fg:x="1532" fg:w="12"/><text x="9.3092%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (10 samples, 0.06%)</title><rect x="9.0710%" y="181" width="0.0591%" height="15" fill="rgb(222,198,25)" fg:x="1534" fg:w="10"/><text x="9.3210%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (3 samples, 0.02%)</title><rect x="9.1124%" y="165" width="0.0177%" height="15" fill="rgb(211,99,13)" fg:x="1541" fg:w="3"/><text x="9.3624%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.01%)</title><rect x="9.1183%" y="149" width="0.0118%" height="15" fill="rgb(232,111,31)" fg:x="1542" fg:w="2"/><text x="9.3683%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (19 samples, 0.11%)</title><rect x="9.1834%" y="149" width="0.1124%" height="15" fill="rgb(245,82,37)" fg:x="1553" fg:w="19"/><text x="9.4334%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (18 samples, 0.11%)</title><rect x="9.1893%" y="133" width="0.1064%" height="15" fill="rgb(227,149,46)" fg:x="1554" fg:w="18"/><text x="9.4393%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.06%)</title><rect x="9.2366%" y="117" width="0.0591%" height="15" fill="rgb(218,36,50)" fg:x="1562" fg:w="10"/><text x="9.4866%" y="127.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.02%)</title><rect x="9.2957%" y="149" width="0.0237%" height="15" fill="rgb(226,80,48)" fg:x="1572" fg:w="4"/><text x="9.5457%" y="159.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="9.3194%" y="149" width="0.0118%" height="15" fill="rgb(238,224,15)" fg:x="1576" fg:w="2"/><text x="9.5694%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="9.3549%" y="133" width="0.0118%" height="15" fill="rgb(241,136,10)" fg:x="1582" fg:w="2"/><text x="9.6049%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (40 samples, 0.24%)</title><rect x="9.1775%" y="181" width="0.2365%" height="15" fill="rgb(208,32,45)" fg:x="1552" fg:w="40"/><text x="9.4275%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (40 samples, 0.24%)</title><rect x="9.1775%" y="165" width="0.2365%" height="15" fill="rgb(207,135,9)" fg:x="1552" fg:w="40"/><text x="9.4275%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (14 samples, 0.08%)</title><rect x="9.3312%" y="149" width="0.0828%" height="15" fill="rgb(206,86,44)" fg:x="1578" fg:w="14"/><text x="9.5812%" y="159.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (8 samples, 0.05%)</title><rect x="9.3667%" y="133" width="0.0473%" height="15" fill="rgb(245,177,15)" fg:x="1584" fg:w="8"/><text x="9.6167%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::choose_pivot (80 samples, 0.47%)</title><rect x="8.9468%" y="229" width="0.4731%" height="15" fill="rgb(206,64,50)" fg:x="1513" fg:w="80"/><text x="9.1968%" y="239.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (64 samples, 0.38%)</title><rect x="9.0415%" y="213" width="0.3785%" height="15" fill="rgb(234,36,40)" fg:x="1529" fg:w="64"/><text x="9.2915%" y="223.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (49 samples, 0.29%)</title><rect x="9.1302%" y="197" width="0.2898%" height="15" fill="rgb(213,64,8)" fg:x="1544" fg:w="49"/><text x="9.3802%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (2 samples, 0.01%)</title><rect x="9.4199%" y="229" width="0.0118%" height="15" fill="rgb(210,75,36)" fg:x="1593" fg:w="2"/><text x="9.6699%" y="239.50"></text></g><g><title>performance-test`&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="9.5323%" y="197" width="0.0177%" height="15" fill="rgb(229,88,21)" fg:x="1612" fg:w="3"/><text x="9.7823%" y="207.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="9.5263%" y="213" width="0.0296%" height="15" fill="rgb(252,204,47)" fg:x="1611" fg:w="5"/><text x="9.7763%" y="223.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.02%)</title><rect x="9.5618%" y="213" width="0.0237%" height="15" fill="rgb(208,77,27)" fg:x="1617" fg:w="4"/><text x="9.8118%" y="223.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.01%)</title><rect x="9.5737%" y="197" width="0.0118%" height="15" fill="rgb(221,76,26)" fg:x="1619" fg:w="2"/><text x="9.8237%" y="207.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="9.5855%" y="213" width="0.0118%" height="15" fill="rgb(225,139,18)" fg:x="1621" fg:w="2"/><text x="9.8355%" y="223.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (18 samples, 0.11%)</title><rect x="9.5973%" y="213" width="0.1064%" height="15" fill="rgb(230,137,11)" fg:x="1623" fg:w="18"/><text x="9.8473%" y="223.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (4 samples, 0.02%)</title><rect x="9.6801%" y="197" width="0.0237%" height="15" fill="rgb(212,28,1)" fg:x="1637" fg:w="4"/><text x="9.9301%" y="207.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (5 samples, 0.03%)</title><rect x="10.0704%" y="197" width="0.0296%" height="15" fill="rgb(248,164,17)" fg:x="1703" fg:w="5"/><text x="10.3204%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="10.1236%" y="181" width="0.0118%" height="15" fill="rgb(222,171,42)" fg:x="1712" fg:w="2"/><text x="10.3736%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (63 samples, 0.37%)</title><rect x="10.1591%" y="149" width="0.3725%" height="15" fill="rgb(243,84,45)" fg:x="1718" fg:w="63"/><text x="10.4091%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (44 samples, 0.26%)</title><rect x="10.2714%" y="133" width="0.2602%" height="15" fill="rgb(252,49,23)" fg:x="1737" fg:w="44"/><text x="10.5214%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (70 samples, 0.41%)</title><rect x="10.1472%" y="165" width="0.4139%" height="15" fill="rgb(215,19,7)" fg:x="1716" fg:w="70"/><text x="10.3972%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (5 samples, 0.03%)</title><rect x="10.5316%" y="149" width="0.0296%" height="15" fill="rgb(238,81,41)" fg:x="1781" fg:w="5"/><text x="10.7816%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="10.5612%" y="165" width="0.0177%" height="15" fill="rgb(210,199,37)" fg:x="1786" fg:w="3"/><text x="10.8112%" y="175.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (7 samples, 0.04%)</title><rect x="10.5848%" y="165" width="0.0414%" height="15" fill="rgb(244,192,49)" fg:x="1790" fg:w="7"/><text x="10.8348%" y="175.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (12 samples, 0.07%)</title><rect x="10.6262%" y="165" width="0.0710%" height="15" fill="rgb(226,211,11)" fg:x="1797" fg:w="12"/><text x="10.8762%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.04%)</title><rect x="10.7031%" y="149" width="0.0414%" height="15" fill="rgb(236,162,54)" fg:x="1810" fg:w="7"/><text x="10.9531%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="10.7445%" y="149" width="0.0177%" height="15" fill="rgb(220,229,9)" fg:x="1817" fg:w="3"/><text x="10.9945%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (122 samples, 0.72%)</title><rect x="10.0999%" y="197" width="0.7214%" height="15" fill="rgb(250,87,22)" fg:x="1708" fg:w="122"/><text x="10.3499%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (116 samples, 0.69%)</title><rect x="10.1354%" y="181" width="0.6859%" height="15" fill="rgb(239,43,17)" fg:x="1714" fg:w="116"/><text x="10.3854%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (21 samples, 0.12%)</title><rect x="10.6972%" y="165" width="0.1242%" height="15" fill="rgb(231,177,25)" fg:x="1809" fg:w="21"/><text x="10.9472%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (10 samples, 0.06%)</title><rect x="10.7622%" y="149" width="0.0591%" height="15" fill="rgb(219,179,1)" fg:x="1820" fg:w="10"/><text x="11.0122%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (239 samples, 1.41%)</title><rect x="9.7037%" y="213" width="1.4133%" height="15" fill="rgb(238,219,53)" fg:x="1641" fg:w="239"/><text x="9.9537%" y="223.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (50 samples, 0.30%)</title><rect x="10.8214%" y="197" width="0.2957%" height="15" fill="rgb(232,167,36)" fg:x="1830" fg:w="50"/><text x="11.0714%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (33 samples, 0.20%)</title><rect x="10.9219%" y="181" width="0.1951%" height="15" fill="rgb(244,19,51)" fg:x="1847" fg:w="33"/><text x="11.1719%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="11.4186%" y="181" width="0.0296%" height="15" fill="rgb(224,6,22)" fg:x="1931" fg:w="5"/><text x="11.6686%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (114 samples, 0.67%)</title><rect x="11.5014%" y="149" width="0.6741%" height="15" fill="rgb(224,145,5)" fg:x="1945" fg:w="114"/><text x="11.7514%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (81 samples, 0.48%)</title><rect x="11.6965%" y="133" width="0.4790%" height="15" fill="rgb(234,130,49)" fg:x="1978" fg:w="81"/><text x="11.9465%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (135 samples, 0.80%)</title><rect x="11.4659%" y="165" width="0.7983%" height="15" fill="rgb(254,6,2)" fg:x="1939" fg:w="135"/><text x="11.7159%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.09%)</title><rect x="12.1755%" y="149" width="0.0887%" height="15" fill="rgb(208,96,46)" fg:x="2059" fg:w="15"/><text x="12.4255%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (8 samples, 0.05%)</title><rect x="12.2642%" y="165" width="0.0473%" height="15" fill="rgb(239,3,39)" fg:x="2074" fg:w="8"/><text x="12.5142%" y="175.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (7 samples, 0.04%)</title><rect x="12.3115%" y="165" width="0.0414%" height="15" fill="rgb(233,210,1)" fg:x="2082" fg:w="7"/><text x="12.5615%" y="175.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (10 samples, 0.06%)</title><rect x="12.3529%" y="165" width="0.0591%" height="15" fill="rgb(244,137,37)" fg:x="2089" fg:w="10"/><text x="12.6029%" y="175.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (30 samples, 0.18%)</title><rect x="12.4120%" y="165" width="0.1774%" height="15" fill="rgb(240,136,2)" fg:x="2099" fg:w="30"/><text x="12.6620%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (20 samples, 0.12%)</title><rect x="12.6959%" y="149" width="0.1183%" height="15" fill="rgb(239,18,37)" fg:x="2147" fg:w="20"/><text x="12.9459%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (8 samples, 0.05%)</title><rect x="12.8141%" y="149" width="0.0473%" height="15" fill="rgb(218,185,22)" fg:x="2167" fg:w="8"/><text x="13.0641%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (281 samples, 1.66%)</title><rect x="11.3654%" y="197" width="1.6616%" height="15" fill="rgb(225,218,4)" fg:x="1922" fg:w="281"/><text x="11.6154%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (267 samples, 1.58%)</title><rect x="11.4482%" y="181" width="1.5789%" height="15" fill="rgb(230,182,32)" fg:x="1936" fg:w="267"/><text x="11.6982%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (73 samples, 0.43%)</title><rect x="12.5954%" y="165" width="0.4317%" height="15" fill="rgb(242,56,43)" fg:x="2130" fg:w="73"/><text x="12.8454%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (28 samples, 0.17%)</title><rect x="12.8615%" y="149" width="0.1656%" height="15" fill="rgb(233,99,24)" fg:x="2175" fg:w="28"/><text x="13.1115%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (85 samples, 0.50%)</title><rect x="13.0270%" y="197" width="0.5026%" height="15" fill="rgb(234,209,42)" fg:x="2203" fg:w="85"/><text x="13.2770%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (49 samples, 0.29%)</title><rect x="13.2399%" y="181" width="0.2898%" height="15" fill="rgb(227,7,12)" fg:x="2239" fg:w="49"/><text x="13.4899%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="13.5297%" y="181" width="0.0177%" height="15" fill="rgb(245,203,43)" fg:x="2288" fg:w="3"/><text x="13.7797%" y="191.50"></text></g><g><title>performance-test`&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.05%)</title><rect x="13.5474%" y="181" width="0.0532%" height="15" fill="rgb(238,205,33)" fg:x="2291" fg:w="9"/><text x="13.7974%" y="191.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (8 samples, 0.05%)</title><rect x="13.5533%" y="165" width="0.0473%" height="15" fill="rgb(231,56,7)" fg:x="2292" fg:w="8"/><text x="13.8033%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (5 samples, 0.03%)</title><rect x="13.5710%" y="149" width="0.0296%" height="15" fill="rgb(244,186,29)" fg:x="2295" fg:w="5"/><text x="13.8210%" y="159.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;&amp;alloc::string::String&gt;&gt; (15 samples, 0.09%)</title><rect x="13.5297%" y="197" width="0.0887%" height="15" fill="rgb(234,111,31)" fg:x="2288" fg:w="15"/><text x="13.7797%" y="207.50"></text></g><g><title>performance-test`DYLD-STUB$$memcpy (3 samples, 0.02%)</title><rect x="13.6006%" y="181" width="0.0177%" height="15" fill="rgb(241,149,10)" fg:x="2300" fg:w="3"/><text x="13.8506%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (432 samples, 2.55%)</title><rect x="11.1170%" y="213" width="2.5546%" height="15" fill="rgb(249,206,44)" fg:x="1880" fg:w="432"/><text x="11.3670%" y="223.50">pe..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (8 samples, 0.05%)</title><rect x="13.6243%" y="197" width="0.0473%" height="15" fill="rgb(251,153,30)" fg:x="2304" fg:w="8"/><text x="13.8743%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (6 samples, 0.04%)</title><rect x="13.7071%" y="165" width="0.0355%" height="15" fill="rgb(239,152,38)" fg:x="2318" fg:w="6"/><text x="13.9571%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (6 samples, 0.04%)</title><rect x="13.7071%" y="149" width="0.0355%" height="15" fill="rgb(249,139,47)" fg:x="2318" fg:w="6"/><text x="13.9571%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (4 samples, 0.02%)</title><rect x="13.7189%" y="133" width="0.0237%" height="15" fill="rgb(244,64,35)" fg:x="2320" fg:w="4"/><text x="13.9689%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="13.7603%" y="149" width="0.0118%" height="15" fill="rgb(216,46,15)" fg:x="2327" fg:w="2"/><text x="14.0103%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="13.7721%" y="149" width="0.0118%" height="15" fill="rgb(250,74,19)" fg:x="2329" fg:w="2"/><text x="14.0221%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (21 samples, 0.12%)</title><rect x="13.6893%" y="197" width="0.1242%" height="15" fill="rgb(249,42,33)" fg:x="2315" fg:w="21"/><text x="13.9393%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (19 samples, 0.11%)</title><rect x="13.7011%" y="181" width="0.1124%" height="15" fill="rgb(242,149,17)" fg:x="2317" fg:w="19"/><text x="13.9511%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (10 samples, 0.06%)</title><rect x="13.7544%" y="165" width="0.0591%" height="15" fill="rgb(244,29,21)" fg:x="2326" fg:w="10"/><text x="14.0044%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (5 samples, 0.03%)</title><rect x="13.7839%" y="149" width="0.0296%" height="15" fill="rgb(220,130,37)" fg:x="2331" fg:w="5"/><text x="14.0339%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (29 samples, 0.17%)</title><rect x="13.6716%" y="213" width="0.1715%" height="15" fill="rgb(211,67,2)" fg:x="2312" fg:w="29"/><text x="13.9216%" y="223.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.03%)</title><rect x="13.8135%" y="197" width="0.0296%" height="15" fill="rgb(235,68,52)" fg:x="2336" fg:w="5"/><text x="14.0635%" y="207.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="13.8549%" y="197" width="0.0118%" height="15" fill="rgb(246,142,3)" fg:x="2343" fg:w="2"/><text x="14.1049%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (38 samples, 0.22%)</title><rect x="14.2393%" y="149" width="0.2247%" height="15" fill="rgb(241,25,7)" fg:x="2408" fg:w="38"/><text x="14.4893%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (36 samples, 0.21%)</title><rect x="14.2511%" y="133" width="0.2129%" height="15" fill="rgb(242,119,39)" fg:x="2410" fg:w="36"/><text x="14.5011%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (18 samples, 0.11%)</title><rect x="14.3575%" y="117" width="0.1064%" height="15" fill="rgb(241,98,45)" fg:x="2428" fg:w="18"/><text x="14.6075%" y="127.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (6 samples, 0.04%)</title><rect x="14.4699%" y="149" width="0.0355%" height="15" fill="rgb(254,28,30)" fg:x="2447" fg:w="6"/><text x="14.7199%" y="159.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (8 samples, 0.05%)</title><rect x="14.5054%" y="149" width="0.0473%" height="15" fill="rgb(241,142,54)" fg:x="2453" fg:w="8"/><text x="14.7554%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="14.5527%" y="133" width="0.0118%" height="15" fill="rgb(222,85,15)" fg:x="2461" fg:w="2"/><text x="14.8027%" y="143.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="14.5645%" y="133" width="0.0118%" height="15" fill="rgb(210,85,47)" fg:x="2463" fg:w="2"/><text x="14.8145%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (71 samples, 0.42%)</title><rect x="14.2097%" y="181" width="0.4198%" height="15" fill="rgb(224,206,25)" fg:x="2403" fg:w="71"/><text x="14.4597%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (69 samples, 0.41%)</title><rect x="14.2215%" y="165" width="0.4080%" height="15" fill="rgb(243,201,19)" fg:x="2405" fg:w="69"/><text x="14.4715%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (13 samples, 0.08%)</title><rect x="14.5527%" y="149" width="0.0769%" height="15" fill="rgb(236,59,4)" fg:x="2461" fg:w="13"/><text x="14.8027%" y="159.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (9 samples, 0.05%)</title><rect x="14.5763%" y="133" width="0.0532%" height="15" fill="rgb(254,179,45)" fg:x="2465" fg:w="9"/><text x="14.8263%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (17 samples, 0.10%)</title><rect x="14.6295%" y="181" width="0.1005%" height="15" fill="rgb(226,14,10)" fg:x="2474" fg:w="17"/><text x="14.8795%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (10 samples, 0.06%)</title><rect x="14.6709%" y="165" width="0.0591%" height="15" fill="rgb(244,27,41)" fg:x="2481" fg:w="10"/><text x="14.9209%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (148 samples, 0.88%)</title><rect x="13.8667%" y="197" width="0.8752%" height="15" fill="rgb(235,35,32)" fg:x="2345" fg:w="148"/><text x="14.1167%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="14.7301%" y="181" width="0.0118%" height="15" fill="rgb(218,68,31)" fg:x="2491" fg:w="2"/><text x="14.9801%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="14.8661%" y="165" width="0.0118%" height="15" fill="rgb(207,120,37)" fg:x="2514" fg:w="2"/><text x="15.1161%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (42 samples, 0.25%)</title><rect x="14.9370%" y="133" width="0.2484%" height="15" fill="rgb(227,98,0)" fg:x="2526" fg:w="42"/><text x="15.1870%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (22 samples, 0.13%)</title><rect x="15.0553%" y="117" width="0.1301%" height="15" fill="rgb(207,7,3)" fg:x="2546" fg:w="22"/><text x="15.3053%" y="127.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (49 samples, 0.29%)</title><rect x="14.9015%" y="149" width="0.2898%" height="15" fill="rgb(206,98,19)" fg:x="2520" fg:w="49"/><text x="15.1515%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (4 samples, 0.02%)</title><rect x="15.1913%" y="149" width="0.0237%" height="15" fill="rgb(217,5,26)" fg:x="2569" fg:w="4"/><text x="15.4413%" y="159.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (3 samples, 0.02%)</title><rect x="15.2149%" y="149" width="0.0177%" height="15" fill="rgb(235,190,38)" fg:x="2573" fg:w="3"/><text x="15.4649%" y="159.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.02%)</title><rect x="15.2327%" y="149" width="0.0237%" height="15" fill="rgb(247,86,24)" fg:x="2576" fg:w="4"/><text x="15.4827%" y="159.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (5 samples, 0.03%)</title><rect x="15.2563%" y="149" width="0.0296%" height="15" fill="rgb(205,101,16)" fg:x="2580" fg:w="5"/><text x="15.5063%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="15.3155%" y="133" width="0.0118%" height="15" fill="rgb(246,168,33)" fg:x="2590" fg:w="2"/><text x="15.5655%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (89 samples, 0.53%)</title><rect x="14.8542%" y="181" width="0.5263%" height="15" fill="rgb(231,114,1)" fg:x="2512" fg:w="89"/><text x="15.1042%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (85 samples, 0.50%)</title><rect x="14.8779%" y="165" width="0.5026%" height="15" fill="rgb(207,184,53)" fg:x="2516" fg:w="85"/><text x="15.1279%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (16 samples, 0.09%)</title><rect x="15.2859%" y="149" width="0.0946%" height="15" fill="rgb(224,95,51)" fg:x="2585" fg:w="16"/><text x="15.5359%" y="159.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (9 samples, 0.05%)</title><rect x="15.3273%" y="133" width="0.0532%" height="15" fill="rgb(212,188,45)" fg:x="2592" fg:w="9"/><text x="15.5773%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (17 samples, 0.10%)</title><rect x="15.3805%" y="181" width="0.1005%" height="15" fill="rgb(223,154,38)" fg:x="2601" fg:w="17"/><text x="15.6305%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (6 samples, 0.04%)</title><rect x="15.4456%" y="165" width="0.0355%" height="15" fill="rgb(251,22,52)" fg:x="2612" fg:w="6"/><text x="15.6956%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (1,025 samples, 6.06%)</title><rect x="9.4317%" y="229" width="6.0611%" height="15" fill="rgb(229,209,22)" fg:x="1595" fg:w="1025"/><text x="9.6817%" y="239.50">performa..</text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (279 samples, 1.65%)</title><rect x="13.8431%" y="213" width="1.6498%" height="15" fill="rgb(234,138,34)" fg:x="2341" fg:w="279"/><text x="14.0931%" y="223.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (127 samples, 0.75%)</title><rect x="14.7419%" y="197" width="0.7510%" height="15" fill="rgb(212,95,11)" fg:x="2493" fg:w="127"/><text x="14.9919%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="15.4810%" y="181" width="0.0118%" height="15" fill="rgb(240,179,47)" fg:x="2618" fg:w="2"/><text x="15.7310%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="15.5284%" y="213" width="0.0177%" height="15" fill="rgb(240,163,11)" fg:x="2626" fg:w="3"/><text x="15.7784%" y="223.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (7 samples, 0.04%)</title><rect x="15.5520%" y="213" width="0.0414%" height="15" fill="rgb(236,37,12)" fg:x="2630" fg:w="7"/><text x="15.8020%" y="223.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (4 samples, 0.02%)</title><rect x="15.5697%" y="197" width="0.0237%" height="15" fill="rgb(232,164,16)" fg:x="2633" fg:w="4"/><text x="15.8197%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="15.5697%" y="181" width="0.0237%" height="15" fill="rgb(244,205,15)" fg:x="2633" fg:w="4"/><text x="15.8197%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="15.5757%" y="165" width="0.0177%" height="15" fill="rgb(223,117,47)" fg:x="2634" fg:w="3"/><text x="15.8257%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="15.5816%" y="149" width="0.0118%" height="15" fill="rgb(244,107,35)" fg:x="2635" fg:w="2"/><text x="15.8316%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="15.5934%" y="213" width="0.0118%" height="15" fill="rgb(205,140,8)" fg:x="2637" fg:w="2"/><text x="15.8434%" y="223.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="15.6407%" y="165" width="0.0177%" height="15" fill="rgb(228,84,46)" fg:x="2645" fg:w="3"/><text x="15.8907%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="15.6407%" y="149" width="0.0177%" height="15" fill="rgb(254,188,9)" fg:x="2645" fg:w="3"/><text x="15.8907%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="15.6466%" y="133" width="0.0118%" height="15" fill="rgb(206,112,54)" fg:x="2646" fg:w="2"/><text x="15.8966%" y="143.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="15.6703%" y="165" width="0.0118%" height="15" fill="rgb(216,84,49)" fg:x="2650" fg:w="2"/><text x="15.9203%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (11 samples, 0.07%)</title><rect x="15.6289%" y="197" width="0.0650%" height="15" fill="rgb(214,194,35)" fg:x="2643" fg:w="11"/><text x="15.8789%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (10 samples, 0.06%)</title><rect x="15.6348%" y="181" width="0.0591%" height="15" fill="rgb(249,28,3)" fg:x="2644" fg:w="10"/><text x="15.8848%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="15.7235%" y="149" width="0.0414%" height="15" fill="rgb(222,56,52)" fg:x="2659" fg:w="7"/><text x="15.9735%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (6 samples, 0.04%)</title><rect x="15.7294%" y="133" width="0.0355%" height="15" fill="rgb(245,217,50)" fg:x="2660" fg:w="6"/><text x="15.9794%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="15.7471%" y="117" width="0.0177%" height="15" fill="rgb(213,201,24)" fg:x="2663" fg:w="3"/><text x="15.9971%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="15.7708%" y="133" width="0.0118%" height="15" fill="rgb(248,116,28)" fg:x="2667" fg:w="2"/><text x="16.0208%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (15 samples, 0.09%)</title><rect x="15.6998%" y="181" width="0.0887%" height="15" fill="rgb(219,72,43)" fg:x="2655" fg:w="15"/><text x="15.9498%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (11 samples, 0.07%)</title><rect x="15.7235%" y="165" width="0.0650%" height="15" fill="rgb(209,138,14)" fg:x="2659" fg:w="11"/><text x="15.9735%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (3 samples, 0.02%)</title><rect x="15.7708%" y="149" width="0.0177%" height="15" fill="rgb(222,18,33)" fg:x="2667" fg:w="3"/><text x="16.0208%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.08%)</title><rect x="15.8418%" y="133" width="0.0769%" height="15" fill="rgb(213,199,7)" fg:x="2679" fg:w="13"/><text x="16.0918%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (13 samples, 0.08%)</title><rect x="15.8418%" y="117" width="0.0769%" height="15" fill="rgb(250,110,10)" fg:x="2679" fg:w="13"/><text x="16.0918%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.06%)</title><rect x="15.8595%" y="101" width="0.0591%" height="15" fill="rgb(248,123,6)" fg:x="2682" fg:w="10"/><text x="16.1095%" y="111.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="15.9186%" y="133" width="0.0118%" height="15" fill="rgb(206,91,31)" fg:x="2692" fg:w="2"/><text x="16.1686%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::choose_pivot (59 samples, 0.35%)</title><rect x="15.6171%" y="213" width="0.3489%" height="15" fill="rgb(211,154,13)" fg:x="2641" fg:w="59"/><text x="15.8671%" y="223.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (46 samples, 0.27%)</title><rect x="15.6939%" y="197" width="0.2720%" height="15" fill="rgb(225,148,7)" fg:x="2654" fg:w="46"/><text x="15.9439%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (30 samples, 0.18%)</title><rect x="15.7885%" y="181" width="0.1774%" height="15" fill="rgb(220,160,43)" fg:x="2670" fg:w="30"/><text x="16.0385%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (22 samples, 0.13%)</title><rect x="15.8358%" y="165" width="0.1301%" height="15" fill="rgb(213,52,39)" fg:x="2678" fg:w="22"/><text x="16.0858%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (21 samples, 0.12%)</title><rect x="15.8418%" y="149" width="0.1242%" height="15" fill="rgb(243,137,7)" fg:x="2679" fg:w="21"/><text x="16.0918%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (5 samples, 0.03%)</title><rect x="15.9364%" y="133" width="0.0296%" height="15" fill="rgb(230,79,13)" fg:x="2695" fg:w="5"/><text x="16.1864%" y="143.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.01%)</title><rect x="15.9541%" y="117" width="0.0118%" height="15" fill="rgb(247,105,23)" fg:x="2698" fg:w="2"/><text x="16.2041%" y="127.50"></text></g><g><title>performance-test`&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.05%)</title><rect x="16.0842%" y="181" width="0.0473%" height="15" fill="rgb(223,179,41)" fg:x="2720" fg:w="8"/><text x="16.3342%" y="191.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (4 samples, 0.02%)</title><rect x="16.1079%" y="165" width="0.0237%" height="15" fill="rgb(218,9,34)" fg:x="2724" fg:w="4"/><text x="16.3579%" y="175.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.06%)</title><rect x="16.0783%" y="197" width="0.0591%" height="15" fill="rgb(222,106,8)" fg:x="2719" fg:w="10"/><text x="16.3283%" y="207.50"></text></g><g><title>performance-test`&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="16.1374%" y="197" width="0.0118%" height="15" fill="rgb(211,220,0)" fg:x="2729" fg:w="2"/><text x="16.3874%" y="207.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (5 samples, 0.03%)</title><rect x="16.1493%" y="197" width="0.0296%" height="15" fill="rgb(229,52,16)" fg:x="2731" fg:w="5"/><text x="16.3993%" y="207.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (3 samples, 0.02%)</title><rect x="16.1611%" y="181" width="0.0177%" height="15" fill="rgb(212,155,18)" fg:x="2733" fg:w="3"/><text x="16.4111%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="16.1788%" y="197" width="0.0118%" height="15" fill="rgb(242,21,14)" fg:x="2736" fg:w="2"/><text x="16.4288%" y="207.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (20 samples, 0.12%)</title><rect x="16.1906%" y="197" width="0.1183%" height="15" fill="rgb(222,19,48)" fg:x="2738" fg:w="20"/><text x="16.4406%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (4 samples, 0.02%)</title><rect x="16.2853%" y="181" width="0.0237%" height="15" fill="rgb(232,45,27)" fg:x="2754" fg:w="4"/><text x="16.5353%" y="191.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;usize,2_usize&gt;&gt; (4 samples, 0.02%)</title><rect x="16.3089%" y="197" width="0.0237%" height="15" fill="rgb(249,103,42)" fg:x="2758" fg:w="4"/><text x="16.5589%" y="207.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="16.3148%" y="181" width="0.0177%" height="15" fill="rgb(246,81,33)" fg:x="2759" fg:w="3"/><text x="16.5648%" y="191.50"></text></g><g><title>performance-test`&lt;core::ops::index_range::IndexRange as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.01%)</title><rect x="16.3207%" y="165" width="0.0118%" height="15" fill="rgb(252,33,42)" fg:x="2760" fg:w="2"/><text x="16.5707%" y="175.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (5 samples, 0.03%)</title><rect x="16.7820%" y="181" width="0.0296%" height="15" fill="rgb(209,212,41)" fg:x="2838" fg:w="5"/><text x="17.0320%" y="191.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.01%)</title><rect x="16.7997%" y="165" width="0.0118%" height="15" fill="rgb(207,154,6)" fg:x="2841" fg:w="2"/><text x="17.0497%" y="175.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="16.8648%" y="165" width="0.0118%" height="15" fill="rgb(223,64,47)" fg:x="2852" fg:w="2"/><text x="17.1148%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (77 samples, 0.46%)</title><rect x="16.9062%" y="133" width="0.4553%" height="15" fill="rgb(211,161,38)" fg:x="2859" fg:w="77"/><text x="17.1562%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (53 samples, 0.31%)</title><rect x="17.0481%" y="117" width="0.3134%" height="15" fill="rgb(219,138,40)" fg:x="2883" fg:w="53"/><text x="17.2981%" y="127.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (85 samples, 0.50%)</title><rect x="16.8884%" y="149" width="0.5026%" height="15" fill="rgb(241,228,46)" fg:x="2856" fg:w="85"/><text x="17.1384%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (5 samples, 0.03%)</title><rect x="17.3615%" y="133" width="0.0296%" height="15" fill="rgb(223,209,38)" fg:x="2936" fg:w="5"/><text x="17.6115%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="17.3910%" y="149" width="0.0177%" height="15" fill="rgb(236,164,45)" fg:x="2941" fg:w="3"/><text x="17.6410%" y="159.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (8 samples, 0.05%)</title><rect x="17.4147%" y="149" width="0.0473%" height="15" fill="rgb(231,15,5)" fg:x="2945" fg:w="8"/><text x="17.6647%" y="159.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (9 samples, 0.05%)</title><rect x="17.4620%" y="149" width="0.0532%" height="15" fill="rgb(252,35,15)" fg:x="2953" fg:w="9"/><text x="17.7120%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (24 samples, 0.14%)</title><rect x="17.5448%" y="133" width="0.1419%" height="15" fill="rgb(248,181,18)" fg:x="2967" fg:w="24"/><text x="17.7948%" y="143.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="17.6867%" y="133" width="0.0118%" height="15" fill="rgb(233,39,42)" fg:x="2991" fg:w="2"/><text x="17.9367%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (168 samples, 0.99%)</title><rect x="16.8115%" y="181" width="0.9934%" height="15" fill="rgb(238,110,33)" fg:x="2843" fg:w="168"/><text x="17.0615%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (157 samples, 0.93%)</title><rect x="16.8766%" y="165" width="0.9284%" height="15" fill="rgb(233,195,10)" fg:x="2854" fg:w="157"/><text x="17.1266%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (48 samples, 0.28%)</title><rect x="17.5211%" y="149" width="0.2838%" height="15" fill="rgb(254,105,3)" fg:x="2963" fg:w="48"/><text x="17.7711%" y="159.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (18 samples, 0.11%)</title><rect x="17.6985%" y="133" width="0.1064%" height="15" fill="rgb(221,225,9)" fg:x="2993" fg:w="18"/><text x="17.9485%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (54 samples, 0.32%)</title><rect x="17.8050%" y="181" width="0.3193%" height="15" fill="rgb(224,227,45)" fg:x="3011" fg:w="54"/><text x="18.0550%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (33 samples, 0.20%)</title><rect x="17.9292%" y="165" width="0.1951%" height="15" fill="rgb(229,198,43)" fg:x="3032" fg:w="33"/><text x="18.1792%" y="175.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.01%)</title><rect x="18.1243%" y="181" width="0.0118%" height="15" fill="rgb(206,209,35)" fg:x="3065" fg:w="2"/><text x="18.3743%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (306 samples, 1.81%)</title><rect x="16.3326%" y="197" width="1.8095%" height="15" fill="rgb(245,195,53)" fg:x="2762" fg:w="306"/><text x="16.5826%" y="207.50">p..</text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="18.5264%" y="165" width="0.0414%" height="15" fill="rgb(240,92,26)" fg:x="3133" fg:w="7"/><text x="18.7764%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (139 samples, 0.82%)</title><rect x="18.6447%" y="133" width="0.8220%" height="15" fill="rgb(207,40,23)" fg:x="3153" fg:w="139"/><text x="18.8947%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (100 samples, 0.59%)</title><rect x="18.8753%" y="117" width="0.5913%" height="15" fill="rgb(223,111,35)" fg:x="3192" fg:w="100"/><text x="19.1253%" y="127.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (155 samples, 0.92%)</title><rect x="18.5914%" y="149" width="0.9166%" height="15" fill="rgb(229,147,28)" fg:x="3144" fg:w="155"/><text x="18.8414%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (7 samples, 0.04%)</title><rect x="19.4666%" y="133" width="0.0414%" height="15" fill="rgb(211,29,28)" fg:x="3292" fg:w="7"/><text x="19.7166%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="19.5080%" y="149" width="0.0177%" height="15" fill="rgb(228,72,33)" fg:x="3299" fg:w="3"/><text x="19.7580%" y="159.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (7 samples, 0.04%)</title><rect x="19.5258%" y="149" width="0.0414%" height="15" fill="rgb(205,214,31)" fg:x="3302" fg:w="7"/><text x="19.7758%" y="159.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (17 samples, 0.10%)</title><rect x="19.5671%" y="149" width="0.1005%" height="15" fill="rgb(224,111,15)" fg:x="3309" fg:w="17"/><text x="19.8171%" y="159.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (23 samples, 0.14%)</title><rect x="19.6677%" y="149" width="0.1360%" height="15" fill="rgb(253,21,26)" fg:x="3326" fg:w="23"/><text x="19.9177%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.11%)</title><rect x="19.8392%" y="133" width="0.1064%" height="15" fill="rgb(245,139,43)" fg:x="3355" fg:w="18"/><text x="20.0892%" y="143.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="19.9456%" y="133" width="0.0177%" height="15" fill="rgb(252,170,7)" fg:x="3373" fg:w="3"/><text x="20.1956%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (287 samples, 1.70%)</title><rect x="18.4673%" y="181" width="1.6971%" height="15" fill="rgb(231,118,14)" fg:x="3123" fg:w="287"/><text x="18.7173%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (270 samples, 1.60%)</title><rect x="18.5678%" y="165" width="1.5966%" height="15" fill="rgb(238,83,0)" fg:x="3140" fg:w="270"/><text x="18.8178%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (61 samples, 0.36%)</title><rect x="19.8037%" y="149" width="0.3607%" height="15" fill="rgb(221,39,39)" fg:x="3349" fg:w="61"/><text x="20.0537%" y="159.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (34 samples, 0.20%)</title><rect x="19.9633%" y="133" width="0.2011%" height="15" fill="rgb(222,119,46)" fg:x="3376" fg:w="34"/><text x="20.2133%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (91 samples, 0.54%)</title><rect x="20.1644%" y="181" width="0.5381%" height="15" fill="rgb(222,165,49)" fg:x="3410" fg:w="91"/><text x="20.4144%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (48 samples, 0.28%)</title><rect x="20.4187%" y="165" width="0.2838%" height="15" fill="rgb(219,113,52)" fg:x="3453" fg:w="48"/><text x="20.6687%" y="175.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;&amp;alloc::string::String&gt;&gt; (12 samples, 0.07%)</title><rect x="20.7025%" y="181" width="0.0710%" height="15" fill="rgb(214,7,15)" fg:x="3501" fg:w="12"/><text x="20.9525%" y="191.50"></text></g><g><title>performance-test`&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.07%)</title><rect x="20.7084%" y="165" width="0.0650%" height="15" fill="rgb(235,32,4)" fg:x="3502" fg:w="11"/><text x="20.9584%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (8 samples, 0.05%)</title><rect x="20.7262%" y="149" width="0.0473%" height="15" fill="rgb(238,90,54)" fg:x="3505" fg:w="8"/><text x="20.9762%" y="159.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (4 samples, 0.02%)</title><rect x="20.7498%" y="133" width="0.0237%" height="15" fill="rgb(213,208,19)" fg:x="3509" fg:w="4"/><text x="20.9998%" y="143.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (2 samples, 0.01%)</title><rect x="20.7735%" y="181" width="0.0118%" height="15" fill="rgb(233,156,4)" fg:x="3513" fg:w="2"/><text x="21.0235%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (452 samples, 2.67%)</title><rect x="18.1420%" y="197" width="2.6728%" height="15" fill="rgb(207,194,5)" fg:x="3068" fg:w="452"/><text x="18.3920%" y="207.50">pe..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (5 samples, 0.03%)</title><rect x="20.7853%" y="181" width="0.0296%" height="15" fill="rgb(206,111,30)" fg:x="3515" fg:w="5"/><text x="21.0353%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (10 samples, 0.06%)</title><rect x="20.8503%" y="133" width="0.0591%" height="15" fill="rgb(243,70,54)" fg:x="3526" fg:w="10"/><text x="21.1003%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (8 samples, 0.05%)</title><rect x="20.8622%" y="117" width="0.0473%" height="15" fill="rgb(242,28,8)" fg:x="3528" fg:w="8"/><text x="21.1122%" y="127.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (12 samples, 0.07%)</title><rect x="20.8444%" y="149" width="0.0710%" height="15" fill="rgb(219,106,18)" fg:x="3525" fg:w="12"/><text x="21.0944%" y="159.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.02%)</title><rect x="20.9272%" y="149" width="0.0177%" height="15" fill="rgb(244,222,10)" fg:x="3539" fg:w="3"/><text x="21.1772%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (25 samples, 0.15%)</title><rect x="20.8326%" y="181" width="0.1478%" height="15" fill="rgb(236,179,52)" fg:x="3523" fg:w="25"/><text x="21.0826%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (23 samples, 0.14%)</title><rect x="20.8444%" y="165" width="0.1360%" height="15" fill="rgb(213,23,39)" fg:x="3525" fg:w="23"/><text x="21.0944%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (5 samples, 0.03%)</title><rect x="20.9509%" y="149" width="0.0296%" height="15" fill="rgb(238,48,10)" fg:x="3543" fg:w="5"/><text x="21.2009%" y="159.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (4 samples, 0.02%)</title><rect x="20.9568%" y="133" width="0.0237%" height="15" fill="rgb(251,196,23)" fg:x="3544" fg:w="4"/><text x="21.2068%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (34 samples, 0.20%)</title><rect x="20.8149%" y="197" width="0.2011%" height="15" fill="rgb(250,152,24)" fg:x="3520" fg:w="34"/><text x="21.0649%" y="207.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (6 samples, 0.04%)</title><rect x="20.9804%" y="181" width="0.0355%" height="15" fill="rgb(209,150,17)" fg:x="3548" fg:w="6"/><text x="21.2304%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (2 samples, 0.01%)</title><rect x="21.0041%" y="165" width="0.0118%" height="15" fill="rgb(234,202,34)" fg:x="3552" fg:w="2"/><text x="21.2541%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (6 samples, 0.04%)</title><rect x="21.0218%" y="181" width="0.0355%" height="15" fill="rgb(253,148,53)" fg:x="3555" fg:w="6"/><text x="21.2718%" y="191.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (7 samples, 0.04%)</title><rect x="21.4239%" y="165" width="0.0414%" height="15" fill="rgb(218,129,16)" fg:x="3623" fg:w="7"/><text x="21.6739%" y="175.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (6 samples, 0.04%)</title><rect x="21.4298%" y="149" width="0.0355%" height="15" fill="rgb(216,85,19)" fg:x="3624" fg:w="6"/><text x="21.6798%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (51 samples, 0.30%)</title><rect x="21.5658%" y="117" width="0.3016%" height="15" fill="rgb(235,228,7)" fg:x="3647" fg:w="51"/><text x="21.8158%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (33 samples, 0.20%)</title><rect x="21.6723%" y="101" width="0.1951%" height="15" fill="rgb(245,175,0)" fg:x="3665" fg:w="33"/><text x="21.9223%" y="111.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (59 samples, 0.35%)</title><rect x="21.5304%" y="133" width="0.3489%" height="15" fill="rgb(208,168,36)" fg:x="3641" fg:w="59"/><text x="21.7804%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="21.8674%" y="117" width="0.0118%" height="15" fill="rgb(246,171,24)" fg:x="3698" fg:w="2"/><text x="22.1174%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (4 samples, 0.02%)</title><rect x="21.8793%" y="133" width="0.0237%" height="15" fill="rgb(215,142,24)" fg:x="3700" fg:w="4"/><text x="22.1293%" y="143.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="21.9029%" y="133" width="0.0118%" height="15" fill="rgb(250,187,7)" fg:x="3704" fg:w="2"/><text x="22.1529%" y="143.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (5 samples, 0.03%)</title><rect x="21.9147%" y="133" width="0.0296%" height="15" fill="rgb(228,66,33)" fg:x="3706" fg:w="5"/><text x="22.1647%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16 samples, 0.09%)</title><rect x="21.9502%" y="117" width="0.0946%" height="15" fill="rgb(234,215,21)" fg:x="3712" fg:w="16"/><text x="22.2002%" y="127.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="22.0448%" y="117" width="0.0177%" height="15" fill="rgb(222,191,20)" fg:x="3728" fg:w="3"/><text x="22.2948%" y="127.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (112 samples, 0.66%)</title><rect x="21.4653%" y="165" width="0.6623%" height="15" fill="rgb(245,79,54)" fg:x="3630" fg:w="112"/><text x="21.7153%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (101 samples, 0.60%)</title><rect x="21.5304%" y="149" width="0.5972%" height="15" fill="rgb(240,10,37)" fg:x="3641" fg:w="101"/><text x="21.7804%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (31 samples, 0.18%)</title><rect x="21.9443%" y="133" width="0.1833%" height="15" fill="rgb(214,192,32)" fg:x="3711" fg:w="31"/><text x="22.1943%" y="143.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (11 samples, 0.07%)</title><rect x="22.0626%" y="117" width="0.0650%" height="15" fill="rgb(209,36,54)" fg:x="3731" fg:w="11"/><text x="22.3126%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (33 samples, 0.20%)</title><rect x="22.1276%" y="165" width="0.1951%" height="15" fill="rgb(220,10,11)" fg:x="3742" fg:w="33"/><text x="22.3776%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (21 samples, 0.12%)</title><rect x="22.1986%" y="149" width="0.1242%" height="15" fill="rgb(221,106,17)" fg:x="3754" fg:w="21"/><text x="22.4486%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (216 samples, 1.28%)</title><rect x="21.0573%" y="181" width="1.2773%" height="15" fill="rgb(251,142,44)" fg:x="3561" fg:w="216"/><text x="21.3073%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="22.3227%" y="165" width="0.0118%" height="15" fill="rgb(238,13,15)" fg:x="3775" fg:w="2"/><text x="22.5727%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (56 samples, 0.33%)</title><rect x="22.4942%" y="117" width="0.3311%" height="15" fill="rgb(208,107,27)" fg:x="3804" fg:w="56"/><text x="22.7442%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (32 samples, 0.19%)</title><rect x="22.6362%" y="101" width="0.1892%" height="15" fill="rgb(205,136,37)" fg:x="3828" fg:w="32"/><text x="22.8862%" y="111.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (63 samples, 0.37%)</title><rect x="22.4765%" y="133" width="0.3725%" height="15" fill="rgb(250,205,27)" fg:x="3801" fg:w="63"/><text x="22.7265%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (4 samples, 0.02%)</title><rect x="22.8254%" y="117" width="0.0237%" height="15" fill="rgb(210,80,43)" fg:x="3860" fg:w="4"/><text x="23.0754%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="22.8490%" y="133" width="0.0177%" height="15" fill="rgb(247,160,36)" fg:x="3864" fg:w="3"/><text x="23.0990%" y="143.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (2 samples, 0.01%)</title><rect x="22.8668%" y="133" width="0.0118%" height="15" fill="rgb(234,13,49)" fg:x="3867" fg:w="2"/><text x="23.1168%" y="143.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.02%)</title><rect x="22.8786%" y="133" width="0.0177%" height="15" fill="rgb(234,122,0)" fg:x="3869" fg:w="3"/><text x="23.1286%" y="143.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (11 samples, 0.07%)</title><rect x="22.8963%" y="133" width="0.0650%" height="15" fill="rgb(207,146,38)" fg:x="3872" fg:w="11"/><text x="23.1463%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.04%)</title><rect x="22.9969%" y="117" width="0.0414%" height="15" fill="rgb(207,177,25)" fg:x="3889" fg:w="7"/><text x="23.2469%" y="127.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (3 samples, 0.02%)</title><rect x="23.0383%" y="117" width="0.0177%" height="15" fill="rgb(211,178,42)" fg:x="3896" fg:w="3"/><text x="23.2883%" y="127.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (129 samples, 0.76%)</title><rect x="22.4114%" y="165" width="0.7628%" height="15" fill="rgb(230,69,54)" fg:x="3790" fg:w="129"/><text x="22.6614%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (123 samples, 0.73%)</title><rect x="22.4469%" y="149" width="0.7273%" height="15" fill="rgb(214,135,41)" fg:x="3796" fg:w="123"/><text x="22.6969%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (36 samples, 0.21%)</title><rect x="22.9614%" y="133" width="0.2129%" height="15" fill="rgb(237,67,25)" fg:x="3883" fg:w="36"/><text x="23.2114%" y="143.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (20 samples, 0.12%)</title><rect x="23.0560%" y="117" width="0.1183%" height="15" fill="rgb(222,189,50)" fg:x="3899" fg:w="20"/><text x="23.3060%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (28 samples, 0.17%)</title><rect x="23.1743%" y="165" width="0.1656%" height="15" fill="rgb(245,148,34)" fg:x="3919" fg:w="28"/><text x="23.4243%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (10 samples, 0.06%)</title><rect x="23.2807%" y="149" width="0.0591%" height="15" fill="rgb(222,29,6)" fg:x="3937" fg:w="10"/><text x="23.5307%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (1,248 samples, 7.38%)</title><rect x="15.9659%" y="213" width="7.3798%" height="15" fill="rgb(221,189,43)" fg:x="2700" fg:w="1248"/><text x="16.2159%" y="223.50">performanc..</text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (394 samples, 2.33%)</title><rect x="21.0159%" y="197" width="2.3298%" height="15" fill="rgb(207,36,27)" fg:x="3554" fg:w="394"/><text x="21.2659%" y="207.50">p..</text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (171 samples, 1.01%)</title><rect x="22.3346%" y="181" width="1.0112%" height="15" fill="rgb(217,90,24)" fg:x="3777" fg:w="171"/><text x="22.5846%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="23.3694%" y="197" width="0.0118%" height="15" fill="rgb(224,66,35)" fg:x="3952" fg:w="2"/><text x="23.6194%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="23.3931%" y="165" width="0.0177%" height="15" fill="rgb(221,13,50)" fg:x="3956" fg:w="3"/><text x="23.6431%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="23.3990%" y="149" width="0.0118%" height="15" fill="rgb(236,68,49)" fg:x="3957" fg:w="2"/><text x="23.6490%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (5 samples, 0.03%)</title><rect x="23.3931%" y="197" width="0.0296%" height="15" fill="rgb(229,146,28)" fg:x="3956" fg:w="5"/><text x="23.6431%" y="207.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (5 samples, 0.03%)</title><rect x="23.3931%" y="181" width="0.0296%" height="15" fill="rgb(225,31,38)" fg:x="3956" fg:w="5"/><text x="23.6431%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (2 samples, 0.01%)</title><rect x="23.4108%" y="165" width="0.0118%" height="15" fill="rgb(250,208,3)" fg:x="3959" fg:w="2"/><text x="23.6608%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="23.4226%" y="197" width="0.0118%" height="15" fill="rgb(246,54,23)" fg:x="3961" fg:w="2"/><text x="23.6726%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="23.4699%" y="149" width="0.0296%" height="15" fill="rgb(243,76,11)" fg:x="3969" fg:w="5"/><text x="23.7199%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (4 samples, 0.02%)</title><rect x="23.4758%" y="133" width="0.0237%" height="15" fill="rgb(245,21,50)" fg:x="3970" fg:w="4"/><text x="23.7258%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="23.4818%" y="117" width="0.0177%" height="15" fill="rgb(228,9,43)" fg:x="3971" fg:w="3"/><text x="23.7318%" y="127.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="23.5172%" y="149" width="0.0118%" height="15" fill="rgb(208,100,47)" fg:x="3977" fg:w="2"/><text x="23.7672%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="23.5291%" y="133" width="0.0118%" height="15" fill="rgb(232,26,8)" fg:x="3979" fg:w="2"/><text x="23.7791%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (14 samples, 0.08%)</title><rect x="23.4640%" y="181" width="0.0828%" height="15" fill="rgb(216,166,38)" fg:x="3968" fg:w="14"/><text x="23.7140%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (14 samples, 0.08%)</title><rect x="23.4640%" y="165" width="0.0828%" height="15" fill="rgb(251,202,51)" fg:x="3968" fg:w="14"/><text x="23.7140%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (3 samples, 0.02%)</title><rect x="23.5291%" y="149" width="0.0177%" height="15" fill="rgb(254,216,34)" fg:x="3979" fg:w="3"/><text x="23.7791%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="23.5527%" y="133" width="0.0118%" height="15" fill="rgb(251,32,27)" fg:x="3983" fg:w="2"/><text x="23.8027%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="23.5527%" y="117" width="0.0118%" height="15" fill="rgb(208,127,28)" fg:x="3983" fg:w="2"/><text x="23.8027%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="23.5527%" y="101" width="0.0118%" height="15" fill="rgb(224,137,22)" fg:x="3983" fg:w="2"/><text x="23.8027%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3 samples, 0.02%)</title><rect x="23.5527%" y="165" width="0.0177%" height="15" fill="rgb(254,70,32)" fg:x="3983" fg:w="3"/><text x="23.8027%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (3 samples, 0.02%)</title><rect x="23.5527%" y="149" width="0.0177%" height="15" fill="rgb(229,75,37)" fg:x="3983" fg:w="3"/><text x="23.8027%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="23.5705%" y="117" width="0.0414%" height="15" fill="rgb(252,64,23)" fg:x="3986" fg:w="7"/><text x="23.8205%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (6 samples, 0.04%)</title><rect x="23.5764%" y="101" width="0.0355%" height="15" fill="rgb(232,162,48)" fg:x="3987" fg:w="6"/><text x="23.8264%" y="111.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (5 samples, 0.03%)</title><rect x="23.5823%" y="85" width="0.0296%" height="15" fill="rgb(246,160,12)" fg:x="3988" fg:w="5"/><text x="23.8323%" y="95.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="23.6119%" y="117" width="0.0118%" height="15" fill="rgb(247,166,0)" fg:x="3993" fg:w="2"/><text x="23.8619%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (15 samples, 0.09%)</title><rect x="23.5468%" y="181" width="0.0887%" height="15" fill="rgb(249,219,21)" fg:x="3982" fg:w="15"/><text x="23.7968%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (11 samples, 0.07%)</title><rect x="23.5705%" y="165" width="0.0650%" height="15" fill="rgb(205,209,3)" fg:x="3986" fg:w="11"/><text x="23.8205%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (11 samples, 0.07%)</title><rect x="23.5705%" y="149" width="0.0650%" height="15" fill="rgb(243,44,1)" fg:x="3986" fg:w="11"/><text x="23.8205%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (11 samples, 0.07%)</title><rect x="23.5705%" y="133" width="0.0650%" height="15" fill="rgb(206,159,16)" fg:x="3986" fg:w="11"/><text x="23.8205%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (2 samples, 0.01%)</title><rect x="23.6237%" y="117" width="0.0118%" height="15" fill="rgb(244,77,30)" fg:x="3995" fg:w="2"/><text x="23.8737%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::choose_pivot (35 samples, 0.21%)</title><rect x="23.4345%" y="197" width="0.2070%" height="15" fill="rgb(218,69,12)" fg:x="3963" fg:w="35"/><text x="23.6845%" y="207.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="23.7360%" y="181" width="0.0414%" height="15" fill="rgb(212,87,7)" fg:x="4014" fg:w="7"/><text x="23.9860%" y="191.50"></text></g><g><title>performance-test`&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="23.7360%" y="165" width="0.0414%" height="15" fill="rgb(245,114,25)" fg:x="4014" fg:w="7"/><text x="23.9860%" y="175.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_sub::precondition_check (4 samples, 0.02%)</title><rect x="23.7538%" y="149" width="0.0237%" height="15" fill="rgb(210,61,42)" fg:x="4017" fg:w="4"/><text x="24.0038%" y="159.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.02%)</title><rect x="23.7774%" y="181" width="0.0237%" height="15" fill="rgb(211,52,33)" fg:x="4021" fg:w="4"/><text x="24.0274%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="23.8011%" y="181" width="0.0118%" height="15" fill="rgb(234,58,33)" fg:x="4025" fg:w="2"/><text x="24.0511%" y="191.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (28 samples, 0.17%)</title><rect x="23.8129%" y="181" width="0.1656%" height="15" fill="rgb(220,115,36)" fg:x="4027" fg:w="28"/><text x="24.0629%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (9 samples, 0.05%)</title><rect x="23.9253%" y="165" width="0.0532%" height="15" fill="rgb(243,153,54)" fg:x="4046" fg:w="9"/><text x="24.1753%" y="175.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="24.3983%" y="165" width="0.0118%" height="15" fill="rgb(251,47,18)" fg:x="4126" fg:w="2"/><text x="24.6483%" y="175.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.01%)</title><rect x="24.3983%" y="149" width="0.0118%" height="15" fill="rgb(242,102,42)" fg:x="4126" fg:w="2"/><text x="24.6483%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="24.4515%" y="149" width="0.0177%" height="15" fill="rgb(234,31,38)" fg:x="4135" fg:w="3"/><text x="24.7015%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (66 samples, 0.39%)</title><rect x="24.5048%" y="117" width="0.3903%" height="15" fill="rgb(221,117,51)" fg:x="4144" fg:w="66"/><text x="24.7548%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (42 samples, 0.25%)</title><rect x="24.6467%" y="101" width="0.2484%" height="15" fill="rgb(212,20,18)" fg:x="4168" fg:w="42"/><text x="24.8967%" y="111.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (73 samples, 0.43%)</title><rect x="24.4811%" y="133" width="0.4317%" height="15" fill="rgb(245,133,36)" fg:x="4140" fg:w="73"/><text x="24.7311%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="24.8950%" y="117" width="0.0177%" height="15" fill="rgb(212,6,19)" fg:x="4210" fg:w="3"/><text x="25.1450%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="24.9128%" y="133" width="0.0118%" height="15" fill="rgb(218,1,36)" fg:x="4213" fg:w="2"/><text x="25.1628%" y="143.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (2 samples, 0.01%)</title><rect x="24.9246%" y="133" width="0.0118%" height="15" fill="rgb(246,84,54)" fg:x="4215" fg:w="2"/><text x="25.1746%" y="143.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (7 samples, 0.04%)</title><rect x="24.9364%" y="133" width="0.0414%" height="15" fill="rgb(242,110,6)" fg:x="4217" fg:w="7"/><text x="25.1864%" y="143.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (7 samples, 0.04%)</title><rect x="24.9778%" y="133" width="0.0414%" height="15" fill="rgb(214,47,5)" fg:x="4224" fg:w="7"/><text x="25.2278%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (15 samples, 0.09%)</title><rect x="25.0606%" y="117" width="0.0887%" height="15" fill="rgb(218,159,25)" fg:x="4238" fg:w="15"/><text x="25.3106%" y="127.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (5 samples, 0.03%)</title><rect x="25.1493%" y="117" width="0.0296%" height="15" fill="rgb(215,211,28)" fg:x="4253" fg:w="5"/><text x="25.3993%" y="127.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (137 samples, 0.81%)</title><rect x="24.4101%" y="165" width="0.8101%" height="15" fill="rgb(238,59,32)" fg:x="4128" fg:w="137"/><text x="24.6601%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (127 samples, 0.75%)</title><rect x="24.4693%" y="149" width="0.7510%" height="15" fill="rgb(226,82,3)" fg:x="4138" fg:w="127"/><text x="24.7193%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (33 samples, 0.20%)</title><rect x="25.0251%" y="133" width="0.1951%" height="15" fill="rgb(240,164,32)" fg:x="4232" fg:w="33"/><text x="25.2751%" y="143.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (7 samples, 0.04%)</title><rect x="25.1789%" y="117" width="0.0414%" height="15" fill="rgb(232,46,7)" fg:x="4258" fg:w="7"/><text x="25.4289%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (30 samples, 0.18%)</title><rect x="25.2203%" y="165" width="0.1774%" height="15" fill="rgb(229,129,53)" fg:x="4265" fg:w="30"/><text x="25.4703%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (24 samples, 0.14%)</title><rect x="25.2558%" y="149" width="0.1419%" height="15" fill="rgb(234,188,29)" fg:x="4271" fg:w="24"/><text x="25.5058%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (241 samples, 1.43%)</title><rect x="23.9844%" y="181" width="1.4251%" height="15" fill="rgb(246,141,4)" fg:x="4056" fg:w="241"/><text x="24.2344%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="25.6756%" y="149" width="0.0177%" height="15" fill="rgb(229,23,39)" fg:x="4342" fg:w="3"/><text x="25.9256%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (103 samples, 0.61%)</title><rect x="25.7525%" y="117" width="0.6091%" height="15" fill="rgb(206,12,3)" fg:x="4355" fg:w="103"/><text x="26.0025%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (70 samples, 0.41%)</title><rect x="25.9476%" y="101" width="0.4139%" height="15" fill="rgb(252,226,20)" fg:x="4388" fg:w="70"/><text x="26.1976%" y="111.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (123 samples, 0.73%)</title><rect x="25.7111%" y="133" width="0.7273%" height="15" fill="rgb(216,123,35)" fg:x="4348" fg:w="123"/><text x="25.9611%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (13 samples, 0.08%)</title><rect x="26.3615%" y="117" width="0.0769%" height="15" fill="rgb(212,68,40)" fg:x="4458" fg:w="13"/><text x="26.6115%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="26.4384%" y="133" width="0.0177%" height="15" fill="rgb(254,125,32)" fg:x="4471" fg:w="3"/><text x="26.6884%" y="143.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (4 samples, 0.02%)</title><rect x="26.4562%" y="133" width="0.0237%" height="15" fill="rgb(253,97,22)" fg:x="4474" fg:w="4"/><text x="26.7062%" y="143.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (10 samples, 0.06%)</title><rect x="26.4798%" y="133" width="0.0591%" height="15" fill="rgb(241,101,14)" fg:x="4478" fg:w="10"/><text x="26.7298%" y="143.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (14 samples, 0.08%)</title><rect x="26.5389%" y="133" width="0.0828%" height="15" fill="rgb(238,103,29)" fg:x="4488" fg:w="14"/><text x="26.7889%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (22 samples, 0.13%)</title><rect x="26.6868%" y="117" width="0.1301%" height="15" fill="rgb(233,195,47)" fg:x="4513" fg:w="22"/><text x="26.9368%" y="127.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (5 samples, 0.03%)</title><rect x="26.8169%" y="117" width="0.0296%" height="15" fill="rgb(246,218,30)" fg:x="4535" fg:w="5"/><text x="27.0669%" y="127.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (230 samples, 1.36%)</title><rect x="25.6342%" y="165" width="1.3601%" height="15" fill="rgb(219,145,47)" fg:x="4335" fg:w="230"/><text x="25.8842%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (220 samples, 1.30%)</title><rect x="25.6933%" y="149" width="1.3009%" height="15" fill="rgb(243,12,26)" fg:x="4345" fg:w="220"/><text x="25.9433%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (63 samples, 0.37%)</title><rect x="26.6217%" y="133" width="0.3725%" height="15" fill="rgb(214,87,16)" fg:x="4502" fg:w="63"/><text x="26.8717%" y="143.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (25 samples, 0.15%)</title><rect x="26.8464%" y="117" width="0.1478%" height="15" fill="rgb(208,99,42)" fg:x="4540" fg:w="25"/><text x="27.0964%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (63 samples, 0.37%)</title><rect x="26.9943%" y="165" width="0.3725%" height="15" fill="rgb(253,99,2)" fg:x="4565" fg:w="63"/><text x="27.2443%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (36 samples, 0.21%)</title><rect x="27.1539%" y="149" width="0.2129%" height="15" fill="rgb(220,168,23)" fg:x="4592" fg:w="36"/><text x="27.4039%" y="159.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;&amp;alloc::string::String&gt;&gt; (10 samples, 0.06%)</title><rect x="27.3668%" y="165" width="0.0591%" height="15" fill="rgb(242,38,24)" fg:x="4628" fg:w="10"/><text x="27.6168%" y="175.50"></text></g><g><title>performance-test`&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.05%)</title><rect x="27.3727%" y="149" width="0.0532%" height="15" fill="rgb(225,182,9)" fg:x="4629" fg:w="9"/><text x="27.6227%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.05%)</title><rect x="27.3727%" y="133" width="0.0532%" height="15" fill="rgb(243,178,37)" fg:x="4629" fg:w="9"/><text x="27.6227%" y="143.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (5 samples, 0.03%)</title><rect x="27.3964%" y="117" width="0.0296%" height="15" fill="rgb(232,139,19)" fg:x="4633" fg:w="5"/><text x="27.6464%" y="127.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (6 samples, 0.04%)</title><rect x="27.4259%" y="165" width="0.0355%" height="15" fill="rgb(225,201,24)" fg:x="4638" fg:w="6"/><text x="27.6759%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (353 samples, 2.09%)</title><rect x="25.4095%" y="181" width="2.0874%" height="15" fill="rgb(221,47,46)" fg:x="4297" fg:w="353"/><text x="25.6595%" y="191.50">p..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (6 samples, 0.04%)</title><rect x="27.4614%" y="165" width="0.0355%" height="15" fill="rgb(249,23,13)" fg:x="4644" fg:w="6"/><text x="27.7114%" y="175.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="27.5205%" y="149" width="0.0118%" height="15" fill="rgb(219,9,5)" fg:x="4654" fg:w="2"/><text x="27.7705%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (11 samples, 0.07%)</title><rect x="27.5324%" y="133" width="0.0650%" height="15" fill="rgb(254,171,16)" fg:x="4656" fg:w="11"/><text x="27.7824%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (11 samples, 0.07%)</title><rect x="27.5324%" y="117" width="0.0650%" height="15" fill="rgb(230,171,20)" fg:x="4656" fg:w="11"/><text x="27.7824%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (9 samples, 0.05%)</title><rect x="27.5442%" y="101" width="0.0532%" height="15" fill="rgb(210,71,41)" fg:x="4658" fg:w="9"/><text x="27.7942%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (19 samples, 0.11%)</title><rect x="27.5146%" y="165" width="0.1124%" height="15" fill="rgb(206,173,20)" fg:x="4653" fg:w="19"/><text x="27.7646%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (16 samples, 0.09%)</title><rect x="27.5324%" y="149" width="0.0946%" height="15" fill="rgb(233,88,34)" fg:x="4656" fg:w="16"/><text x="27.7824%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (5 samples, 0.03%)</title><rect x="27.5974%" y="133" width="0.0296%" height="15" fill="rgb(223,209,46)" fg:x="4667" fg:w="5"/><text x="27.8474%" y="143.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.01%)</title><rect x="27.6152%" y="117" width="0.0118%" height="15" fill="rgb(250,43,18)" fg:x="4670" fg:w="2"/><text x="27.8652%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (7 samples, 0.04%)</title><rect x="27.6270%" y="165" width="0.0414%" height="15" fill="rgb(208,13,10)" fg:x="4672" fg:w="7"/><text x="27.8770%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.02%)</title><rect x="27.6506%" y="149" width="0.0177%" height="15" fill="rgb(212,200,36)" fg:x="4676" fg:w="3"/><text x="27.9006%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (30 samples, 0.18%)</title><rect x="27.4969%" y="181" width="0.1774%" height="15" fill="rgb(225,90,30)" fg:x="4650" fg:w="30"/><text x="27.7469%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="27.6802%" y="165" width="0.0118%" height="15" fill="rgb(236,182,39)" fg:x="4681" fg:w="2"/><text x="27.9302%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.02%)</title><rect x="27.6920%" y="165" width="0.0237%" height="15" fill="rgb(212,144,35)" fg:x="4683" fg:w="4"/><text x="27.9420%" y="175.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="27.9345%" y="149" width="0.0118%" height="15" fill="rgb(228,63,44)" fg:x="4724" fg:w="2"/><text x="28.1845%" y="159.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.01%)</title><rect x="27.9345%" y="133" width="0.0118%" height="15" fill="rgb(228,109,6)" fg:x="4724" fg:w="2"/><text x="28.1845%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="27.9581%" y="133" width="0.0177%" height="15" fill="rgb(238,117,24)" fg:x="4728" fg:w="3"/><text x="28.2081%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (47 samples, 0.28%)</title><rect x="27.9936%" y="101" width="0.2779%" height="15" fill="rgb(242,26,26)" fg:x="4734" fg:w="47"/><text x="28.2436%" y="111.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (28 samples, 0.17%)</title><rect x="28.1060%" y="85" width="0.1656%" height="15" fill="rgb(221,92,48)" fg:x="4753" fg:w="28"/><text x="28.3560%" y="95.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (50 samples, 0.30%)</title><rect x="27.9818%" y="117" width="0.2957%" height="15" fill="rgb(209,209,32)" fg:x="4732" fg:w="50"/><text x="28.2318%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="28.2775%" y="117" width="0.0118%" height="15" fill="rgb(221,70,22)" fg:x="4782" fg:w="2"/><text x="28.5275%" y="127.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="28.2893%" y="117" width="0.0118%" height="15" fill="rgb(248,145,5)" fg:x="4784" fg:w="2"/><text x="28.5393%" y="127.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (4 samples, 0.02%)</title><rect x="28.3011%" y="117" width="0.0237%" height="15" fill="rgb(226,116,26)" fg:x="4786" fg:w="4"/><text x="28.5511%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (10 samples, 0.06%)</title><rect x="28.3307%" y="101" width="0.0591%" height="15" fill="rgb(244,5,17)" fg:x="4791" fg:w="10"/><text x="28.5807%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (91 samples, 0.54%)</title><rect x="27.9463%" y="149" width="0.5381%" height="15" fill="rgb(252,159,33)" fg:x="4726" fg:w="91"/><text x="28.1963%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (86 samples, 0.51%)</title><rect x="27.9759%" y="133" width="0.5085%" height="15" fill="rgb(206,71,0)" fg:x="4731" fg:w="86"/><text x="28.2259%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (27 samples, 0.16%)</title><rect x="28.3248%" y="117" width="0.1597%" height="15" fill="rgb(233,118,54)" fg:x="4790" fg:w="27"/><text x="28.5748%" y="127.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (16 samples, 0.09%)</title><rect x="28.3898%" y="101" width="0.0946%" height="15" fill="rgb(234,83,48)" fg:x="4801" fg:w="16"/><text x="28.6398%" y="111.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (22 samples, 0.13%)</title><rect x="28.4844%" y="149" width="0.1301%" height="15" fill="rgb(228,3,54)" fg:x="4817" fg:w="22"/><text x="28.7344%" y="159.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (10 samples, 0.06%)</title><rect x="28.5554%" y="133" width="0.0591%" height="15" fill="rgb(226,155,13)" fg:x="4829" fg:w="10"/><text x="28.8054%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (154 samples, 0.91%)</title><rect x="27.7157%" y="165" width="0.9106%" height="15" fill="rgb(241,28,37)" fg:x="4687" fg:w="154"/><text x="27.9657%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (32 samples, 0.19%)</title><rect x="28.7623%" y="101" width="0.1892%" height="15" fill="rgb(233,93,10)" fg:x="4864" fg:w="32"/><text x="29.0123%" y="111.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (23 samples, 0.14%)</title><rect x="28.8156%" y="85" width="0.1360%" height="15" fill="rgb(225,113,19)" fg:x="4873" fg:w="23"/><text x="29.0656%" y="95.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (35 samples, 0.21%)</title><rect x="28.7564%" y="117" width="0.2070%" height="15" fill="rgb(241,2,18)" fg:x="4863" fg:w="35"/><text x="29.0064%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="28.9516%" y="101" width="0.0118%" height="15" fill="rgb(228,207,21)" fg:x="4896" fg:w="2"/><text x="29.2016%" y="111.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="28.9634%" y="117" width="0.0118%" height="15" fill="rgb(213,211,35)" fg:x="4898" fg:w="2"/><text x="29.2134%" y="127.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.02%)</title><rect x="28.9811%" y="117" width="0.0237%" height="15" fill="rgb(209,83,10)" fg:x="4901" fg:w="4"/><text x="29.2311%" y="127.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (6 samples, 0.04%)</title><rect x="29.0048%" y="117" width="0.0355%" height="15" fill="rgb(209,164,1)" fg:x="4905" fg:w="6"/><text x="29.2548%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.05%)</title><rect x="29.0698%" y="101" width="0.0473%" height="15" fill="rgb(213,184,43)" fg:x="4916" fg:w="8"/><text x="29.3198%" y="111.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (5 samples, 0.03%)</title><rect x="29.1171%" y="101" width="0.0296%" height="15" fill="rgb(231,61,34)" fg:x="4924" fg:w="5"/><text x="29.3671%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (82 samples, 0.48%)</title><rect x="28.7269%" y="149" width="0.4849%" height="15" fill="rgb(235,75,3)" fg:x="4858" fg:w="82"/><text x="28.9769%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (78 samples, 0.46%)</title><rect x="28.7505%" y="133" width="0.4612%" height="15" fill="rgb(220,106,47)" fg:x="4862" fg:w="78"/><text x="29.0005%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (29 samples, 0.17%)</title><rect x="29.0403%" y="117" width="0.1715%" height="15" fill="rgb(210,196,33)" fg:x="4911" fg:w="29"/><text x="29.2903%" y="127.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (11 samples, 0.07%)</title><rect x="29.1467%" y="101" width="0.0650%" height="15" fill="rgb(229,154,42)" fg:x="4929" fg:w="11"/><text x="29.3967%" y="111.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (18 samples, 0.11%)</title><rect x="29.2118%" y="149" width="0.1064%" height="15" fill="rgb(228,114,26)" fg:x="4940" fg:w="18"/><text x="29.4618%" y="159.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (7 samples, 0.04%)</title><rect x="29.2768%" y="133" width="0.0414%" height="15" fill="rgb(208,144,1)" fg:x="4951" fg:w="7"/><text x="29.5268%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (961 samples, 5.68%)</title><rect x="23.6414%" y="197" width="5.6827%" height="15" fill="rgb(239,112,37)" fg:x="3998" fg:w="961"/><text x="23.8914%" y="207.50">perform..</text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (279 samples, 1.65%)</title><rect x="27.6743%" y="181" width="1.6498%" height="15" fill="rgb(210,96,50)" fg:x="4680" fg:w="279"/><text x="27.9243%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (118 samples, 0.70%)</title><rect x="28.6263%" y="165" width="0.6978%" height="15" fill="rgb(222,178,2)" fg:x="4841" fg:w="118"/><text x="28.8763%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::choose_pivot (5 samples, 0.03%)</title><rect x="29.3478%" y="181" width="0.0296%" height="15" fill="rgb(226,74,18)" fg:x="4963" fg:w="5"/><text x="29.5978%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.02%)</title><rect x="29.3596%" y="165" width="0.0177%" height="15" fill="rgb(225,67,54)" fg:x="4965" fg:w="3"/><text x="29.6096%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.02%)</title><rect x="29.3596%" y="149" width="0.0177%" height="15" fill="rgb(251,92,32)" fg:x="4965" fg:w="3"/><text x="29.6096%" y="159.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="29.4128%" y="165" width="0.0237%" height="15" fill="rgb(228,149,22)" fg:x="4974" fg:w="4"/><text x="29.6628%" y="175.50"></text></g><g><title>performance-test`&lt;core::ops::index_range::IndexRange as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="29.4246%" y="149" width="0.0118%" height="15" fill="rgb(243,54,13)" fg:x="4976" fg:w="2"/><text x="29.6746%" y="159.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="29.4365%" y="165" width="0.0118%" height="15" fill="rgb(243,180,28)" fg:x="4978" fg:w="2"/><text x="29.6865%" y="175.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (2 samples, 0.01%)</title><rect x="29.4365%" y="149" width="0.0118%" height="15" fill="rgb(208,167,24)" fg:x="4978" fg:w="2"/><text x="29.6865%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (12 samples, 0.07%)</title><rect x="29.4483%" y="165" width="0.0710%" height="15" fill="rgb(245,73,45)" fg:x="4980" fg:w="12"/><text x="29.6983%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (7 samples, 0.04%)</title><rect x="29.4779%" y="149" width="0.0414%" height="15" fill="rgb(237,203,48)" fg:x="4985" fg:w="7"/><text x="29.7279%" y="159.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::array::iter::IntoIter&lt;usize,2_usize&gt;&gt; (4 samples, 0.02%)</title><rect x="29.5192%" y="165" width="0.0237%" height="15" fill="rgb(211,197,16)" fg:x="4992" fg:w="4"/><text x="29.7692%" y="175.50"></text></g><g><title>performance-test`&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="29.5252%" y="149" width="0.0177%" height="15" fill="rgb(243,99,51)" fg:x="4993" fg:w="3"/><text x="29.7752%" y="159.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (2 samples, 0.01%)</title><rect x="29.7853%" y="149" width="0.0118%" height="15" fill="rgb(215,123,29)" fg:x="5037" fg:w="2"/><text x="30.0353%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (29 samples, 0.17%)</title><rect x="29.8327%" y="101" width="0.1715%" height="15" fill="rgb(239,186,37)" fg:x="5045" fg:w="29"/><text x="30.0827%" y="111.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (18 samples, 0.11%)</title><rect x="29.8977%" y="85" width="0.1064%" height="15" fill="rgb(252,136,39)" fg:x="5056" fg:w="18"/><text x="30.1477%" y="95.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (31 samples, 0.18%)</title><rect x="29.8267%" y="117" width="0.1833%" height="15" fill="rgb(223,213,32)" fg:x="5044" fg:w="31"/><text x="30.0767%" y="127.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.02%)</title><rect x="30.0160%" y="117" width="0.0237%" height="15" fill="rgb(233,115,5)" fg:x="5076" fg:w="4"/><text x="30.2660%" y="127.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (4 samples, 0.02%)</title><rect x="30.0396%" y="117" width="0.0237%" height="15" fill="rgb(207,226,44)" fg:x="5080" fg:w="4"/><text x="30.2896%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.11%)</title><rect x="30.0869%" y="101" width="0.1064%" height="15" fill="rgb(208,126,0)" fg:x="5088" fg:w="18"/><text x="30.3369%" y="111.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (4 samples, 0.02%)</title><rect x="30.1934%" y="101" width="0.0237%" height="15" fill="rgb(244,66,21)" fg:x="5106" fg:w="4"/><text x="30.4434%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (85 samples, 0.50%)</title><rect x="29.7972%" y="149" width="0.5026%" height="15" fill="rgb(222,97,12)" fg:x="5039" fg:w="85"/><text x="30.0472%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (80 samples, 0.47%)</title><rect x="29.8267%" y="133" width="0.4731%" height="15" fill="rgb(219,213,19)" fg:x="5044" fg:w="80"/><text x="30.0767%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (39 samples, 0.23%)</title><rect x="30.0692%" y="117" width="0.2306%" height="15" fill="rgb(252,169,30)" fg:x="5085" fg:w="39"/><text x="30.3192%" y="127.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (14 samples, 0.08%)</title><rect x="30.2170%" y="101" width="0.0828%" height="15" fill="rgb(206,32,51)" fg:x="5110" fg:w="14"/><text x="30.4670%" y="111.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (27 samples, 0.16%)</title><rect x="30.2998%" y="149" width="0.1597%" height="15" fill="rgb(250,172,42)" fg:x="5124" fg:w="27"/><text x="30.5498%" y="159.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (17 samples, 0.10%)</title><rect x="30.3589%" y="133" width="0.1005%" height="15" fill="rgb(209,34,43)" fg:x="5134" fg:w="17"/><text x="30.6089%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (156 samples, 0.92%)</title><rect x="29.5488%" y="165" width="0.9225%" height="15" fill="rgb(223,11,35)" fg:x="4997" fg:w="156"/><text x="29.7988%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (51 samples, 0.30%)</title><rect x="30.6960%" y="101" width="0.3016%" height="15" fill="rgb(251,219,26)" fg:x="5191" fg:w="51"/><text x="30.9460%" y="111.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (39 samples, 0.23%)</title><rect x="30.7670%" y="85" width="0.2306%" height="15" fill="rgb(231,119,3)" fg:x="5203" fg:w="39"/><text x="31.0170%" y="95.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (55 samples, 0.33%)</title><rect x="30.6901%" y="117" width="0.3252%" height="15" fill="rgb(216,97,11)" fg:x="5190" fg:w="55"/><text x="30.9401%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="30.9976%" y="101" width="0.0177%" height="15" fill="rgb(223,59,9)" fg:x="5242" fg:w="3"/><text x="31.2476%" y="111.50"></text></g><g><title>performance-test`alloc::string::String::as_str (5 samples, 0.03%)</title><rect x="31.0153%" y="117" width="0.0296%" height="15" fill="rgb(233,93,31)" fg:x="5245" fg:w="5"/><text x="31.2653%" y="127.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (9 samples, 0.05%)</title><rect x="31.0567%" y="117" width="0.0532%" height="15" fill="rgb(239,81,33)" fg:x="5252" fg:w="9"/><text x="31.3067%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.07%)</title><rect x="31.1395%" y="101" width="0.0650%" height="15" fill="rgb(213,120,34)" fg:x="5266" fg:w="11"/><text x="31.3895%" y="111.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (4 samples, 0.02%)</title><rect x="31.2045%" y="101" width="0.0237%" height="15" fill="rgb(243,49,53)" fg:x="5277" fg:w="4"/><text x="31.4545%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (123 samples, 0.73%)</title><rect x="30.6250%" y="149" width="0.7273%" height="15" fill="rgb(247,216,33)" fg:x="5179" fg:w="123"/><text x="30.8750%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (114 samples, 0.67%)</title><rect x="30.6783%" y="133" width="0.6741%" height="15" fill="rgb(226,26,14)" fg:x="5188" fg:w="114"/><text x="30.9283%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (41 samples, 0.24%)</title><rect x="31.1099%" y="117" width="0.2424%" height="15" fill="rgb(215,49,53)" fg:x="5261" fg:w="41"/><text x="31.3599%" y="127.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (21 samples, 0.12%)</title><rect x="31.2282%" y="101" width="0.1242%" height="15" fill="rgb(245,162,40)" fg:x="5281" fg:w="21"/><text x="31.4782%" y="111.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (31 samples, 0.18%)</title><rect x="31.3524%" y="149" width="0.1833%" height="15" fill="rgb(229,68,17)" fg:x="5302" fg:w="31"/><text x="31.6024%" y="159.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (16 samples, 0.09%)</title><rect x="31.4411%" y="133" width="0.0946%" height="15" fill="rgb(213,182,10)" fg:x="5317" fg:w="16"/><text x="31.6911%" y="143.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;&amp;alloc::string::String&gt;&gt; (4 samples, 0.02%)</title><rect x="31.5357%" y="149" width="0.0237%" height="15" fill="rgb(245,125,30)" fg:x="5333" fg:w="4"/><text x="31.7857%" y="159.50"></text></g><g><title>performance-test`&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="31.5416%" y="133" width="0.0177%" height="15" fill="rgb(232,202,2)" fg:x="5334" fg:w="3"/><text x="31.7916%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.02%)</title><rect x="31.5416%" y="117" width="0.0177%" height="15" fill="rgb(237,140,51)" fg:x="5334" fg:w="3"/><text x="31.7916%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (185 samples, 1.09%)</title><rect x="30.4713%" y="165" width="1.0940%" height="15" fill="rgb(236,157,25)" fg:x="5153" fg:w="185"/><text x="30.7213%" y="175.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5 samples, 0.03%)</title><rect x="31.6066%" y="117" width="0.0296%" height="15" fill="rgb(219,209,0)" fg:x="5345" fg:w="5"/><text x="31.8566%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (5 samples, 0.03%)</title><rect x="31.6066%" y="101" width="0.0296%" height="15" fill="rgb(240,116,54)" fg:x="5345" fg:w="5"/><text x="31.8566%" y="111.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="31.6362%" y="117" width="0.0118%" height="15" fill="rgb(216,10,36)" fg:x="5350" fg:w="2"/><text x="31.8862%" y="127.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (10 samples, 0.06%)</title><rect x="31.6007%" y="149" width="0.0591%" height="15" fill="rgb(222,72,44)" fg:x="5344" fg:w="10"/><text x="31.8507%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (9 samples, 0.05%)</title><rect x="31.6066%" y="133" width="0.0532%" height="15" fill="rgb(232,159,9)" fg:x="5345" fg:w="9"/><text x="31.8566%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (18 samples, 0.11%)</title><rect x="31.5653%" y="165" width="0.1064%" height="15" fill="rgb(210,39,32)" fg:x="5338" fg:w="18"/><text x="31.8153%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="31.6599%" y="149" width="0.0118%" height="15" fill="rgb(216,194,45)" fg:x="5354" fg:w="2"/><text x="31.9099%" y="159.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (4 samples, 0.02%)</title><rect x="31.8314%" y="133" width="0.0237%" height="15" fill="rgb(218,18,35)" fg:x="5383" fg:w="4"/><text x="32.0814%" y="143.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (4 samples, 0.02%)</title><rect x="31.8314%" y="117" width="0.0237%" height="15" fill="rgb(207,83,51)" fg:x="5383" fg:w="4"/><text x="32.0814%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (25 samples, 0.15%)</title><rect x="31.8905%" y="85" width="0.1478%" height="15" fill="rgb(225,63,43)" fg:x="5393" fg:w="25"/><text x="32.1405%" y="95.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (16 samples, 0.09%)</title><rect x="31.9437%" y="69" width="0.0946%" height="15" fill="rgb(207,57,36)" fg:x="5402" fg:w="16"/><text x="32.1937%" y="79.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (29 samples, 0.17%)</title><rect x="31.8727%" y="101" width="0.1715%" height="15" fill="rgb(216,99,33)" fg:x="5390" fg:w="29"/><text x="32.1227%" y="111.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (3 samples, 0.02%)</title><rect x="32.0561%" y="101" width="0.0177%" height="15" fill="rgb(225,42,16)" fg:x="5421" fg:w="3"/><text x="32.3061%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.04%)</title><rect x="32.0738%" y="85" width="0.0414%" height="15" fill="rgb(220,201,45)" fg:x="5424" fg:w="7"/><text x="32.3238%" y="95.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (51 samples, 0.30%)</title><rect x="31.8550%" y="133" width="0.3016%" height="15" fill="rgb(225,33,4)" fg:x="5387" fg:w="51"/><text x="32.1050%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (51 samples, 0.30%)</title><rect x="31.8550%" y="117" width="0.3016%" height="15" fill="rgb(224,33,50)" fg:x="5387" fg:w="51"/><text x="32.1050%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (14 samples, 0.08%)</title><rect x="32.0738%" y="101" width="0.0828%" height="15" fill="rgb(246,198,51)" fg:x="5424" fg:w="14"/><text x="32.3238%" y="111.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (6 samples, 0.04%)</title><rect x="32.1211%" y="85" width="0.0355%" height="15" fill="rgb(205,22,4)" fg:x="5432" fg:w="6"/><text x="32.3711%" y="95.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (18 samples, 0.11%)</title><rect x="32.1566%" y="133" width="0.1064%" height="15" fill="rgb(206,3,8)" fg:x="5438" fg:w="18"/><text x="32.4066%" y="143.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (9 samples, 0.05%)</title><rect x="32.2098%" y="117" width="0.0532%" height="15" fill="rgb(251,23,15)" fg:x="5447" fg:w="9"/><text x="32.4598%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (100 samples, 0.59%)</title><rect x="31.6776%" y="149" width="0.5913%" height="15" fill="rgb(252,88,28)" fg:x="5357" fg:w="100"/><text x="31.9276%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (26 samples, 0.15%)</title><rect x="32.3399%" y="85" width="0.1537%" height="15" fill="rgb(212,127,14)" fg:x="5469" fg:w="26"/><text x="32.5899%" y="95.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (17 samples, 0.10%)</title><rect x="32.3931%" y="69" width="0.1005%" height="15" fill="rgb(247,145,37)" fg:x="5478" fg:w="17"/><text x="32.6431%" y="79.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (29 samples, 0.17%)</title><rect x="32.3281%" y="101" width="0.1715%" height="15" fill="rgb(209,117,53)" fg:x="5467" fg:w="29"/><text x="32.5781%" y="111.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (5 samples, 0.03%)</title><rect x="32.5055%" y="101" width="0.0296%" height="15" fill="rgb(212,90,42)" fg:x="5497" fg:w="5"/><text x="32.7555%" y="111.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (3 samples, 0.02%)</title><rect x="32.5350%" y="101" width="0.0177%" height="15" fill="rgb(218,164,37)" fg:x="5502" fg:w="3"/><text x="32.7850%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.04%)</title><rect x="32.5705%" y="85" width="0.0355%" height="15" fill="rgb(246,65,34)" fg:x="5508" fg:w="6"/><text x="32.8205%" y="95.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (59 samples, 0.35%)</title><rect x="32.3044%" y="133" width="0.3489%" height="15" fill="rgb(231,100,33)" fg:x="5463" fg:w="59"/><text x="32.5544%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (56 samples, 0.33%)</title><rect x="32.3222%" y="117" width="0.3311%" height="15" fill="rgb(228,126,14)" fg:x="5466" fg:w="56"/><text x="32.5722%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (17 samples, 0.10%)</title><rect x="32.5528%" y="101" width="0.1005%" height="15" fill="rgb(215,173,21)" fg:x="5505" fg:w="17"/><text x="32.8028%" y="111.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (7 samples, 0.04%)</title><rect x="32.6119%" y="85" width="0.0414%" height="15" fill="rgb(210,6,40)" fg:x="5515" fg:w="7"/><text x="32.8619%" y="95.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (564 samples, 3.34%)</title><rect x="29.3832%" y="181" width="3.3351%" height="15" fill="rgb(212,48,18)" fg:x="4969" fg:w="564"/><text x="29.6332%" y="191.50">per..</text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (177 samples, 1.05%)</title><rect x="31.6717%" y="165" width="1.0467%" height="15" fill="rgb(230,214,11)" fg:x="5356" fg:w="177"/><text x="31.9217%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (76 samples, 0.45%)</title><rect x="32.2689%" y="149" width="0.4494%" height="15" fill="rgb(254,105,39)" fg:x="5457" fg:w="76"/><text x="32.5189%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (11 samples, 0.07%)</title><rect x="32.6533%" y="133" width="0.0650%" height="15" fill="rgb(245,158,5)" fg:x="5522" fg:w="11"/><text x="32.9033%" y="143.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (6 samples, 0.04%)</title><rect x="32.6829%" y="117" width="0.0355%" height="15" fill="rgb(249,208,11)" fg:x="5527" fg:w="6"/><text x="32.9329%" y="127.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="32.7420%" y="149" width="0.0118%" height="15" fill="rgb(210,39,28)" fg:x="5537" fg:w="2"/><text x="32.9920%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.02%)</title><rect x="32.7538%" y="149" width="0.0177%" height="15" fill="rgb(211,56,53)" fg:x="5539" fg:w="3"/><text x="33.0038%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (15 samples, 0.09%)</title><rect x="32.8898%" y="101" width="0.0887%" height="15" fill="rgb(226,201,30)" fg:x="5562" fg:w="15"/><text x="33.1398%" y="111.50"></text></g><g><title>performance-test`alloc::string::String::as_str (13 samples, 0.08%)</title><rect x="32.9017%" y="85" width="0.0769%" height="15" fill="rgb(239,101,34)" fg:x="5564" fg:w="13"/><text x="33.1517%" y="95.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.06%)</title><rect x="32.9194%" y="69" width="0.0591%" height="15" fill="rgb(226,209,5)" fg:x="5567" fg:w="10"/><text x="33.1694%" y="79.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="32.9785%" y="101" width="0.0118%" height="15" fill="rgb(250,105,47)" fg:x="5577" fg:w="2"/><text x="33.2285%" y="111.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="32.9963%" y="101" width="0.0118%" height="15" fill="rgb(230,72,3)" fg:x="5580" fg:w="2"/><text x="33.2463%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (11 samples, 0.07%)</title><rect x="33.0140%" y="85" width="0.0650%" height="15" fill="rgb(232,218,39)" fg:x="5583" fg:w="11"/><text x="33.2640%" y="95.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="33.0791%" y="85" width="0.0118%" height="15" fill="rgb(248,166,6)" fg:x="5594" fg:w="2"/><text x="33.3291%" y="95.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (40 samples, 0.24%)</title><rect x="32.8839%" y="133" width="0.2365%" height="15" fill="rgb(247,89,20)" fg:x="5561" fg:w="40"/><text x="33.1339%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (39 samples, 0.23%)</title><rect x="32.8898%" y="117" width="0.2306%" height="15" fill="rgb(248,130,54)" fg:x="5562" fg:w="39"/><text x="33.1398%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (19 samples, 0.11%)</title><rect x="33.0081%" y="101" width="0.1124%" height="15" fill="rgb(234,196,4)" fg:x="5582" fg:w="19"/><text x="33.2581%" y="111.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (5 samples, 0.03%)</title><rect x="33.0909%" y="85" width="0.0296%" height="15" fill="rgb(250,143,31)" fg:x="5596" fg:w="5"/><text x="33.3409%" y="95.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (72 samples, 0.43%)</title><rect x="32.7716%" y="149" width="0.4258%" height="15" fill="rgb(211,110,34)" fg:x="5542" fg:w="72"/><text x="33.0216%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (13 samples, 0.08%)</title><rect x="33.1205%" y="133" width="0.0769%" height="15" fill="rgb(215,124,48)" fg:x="5601" fg:w="13"/><text x="33.3705%" y="143.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (8 samples, 0.05%)</title><rect x="33.1500%" y="117" width="0.0473%" height="15" fill="rgb(216,46,13)" fg:x="5606" fg:w="8"/><text x="33.4000%" y="127.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="33.3156%" y="117" width="0.0118%" height="15" fill="rgb(205,184,25)" fg:x="5634" fg:w="2"/><text x="33.5656%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (19 samples, 0.11%)</title><rect x="33.3452%" y="85" width="0.1124%" height="15" fill="rgb(228,1,10)" fg:x="5639" fg:w="19"/><text x="33.5952%" y="95.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (12 samples, 0.07%)</title><rect x="33.3866%" y="69" width="0.0710%" height="15" fill="rgb(213,116,27)" fg:x="5646" fg:w="12"/><text x="33.6366%" y="79.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (23 samples, 0.14%)</title><rect x="33.3333%" y="101" width="0.1360%" height="15" fill="rgb(241,95,50)" fg:x="5637" fg:w="23"/><text x="33.5833%" y="111.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="33.4575%" y="85" width="0.0118%" height="15" fill="rgb(238,48,32)" fg:x="5658" fg:w="2"/><text x="33.7075%" y="95.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="33.4812%" y="101" width="0.0118%" height="15" fill="rgb(235,113,49)" fg:x="5662" fg:w="2"/><text x="33.7312%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (6 samples, 0.04%)</title><rect x="33.4930%" y="85" width="0.0355%" height="15" fill="rgb(205,127,43)" fg:x="5664" fg:w="6"/><text x="33.7430%" y="95.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (46 samples, 0.27%)</title><rect x="33.2860%" y="133" width="0.2720%" height="15" fill="rgb(250,162,2)" fg:x="5629" fg:w="46"/><text x="33.5360%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (39 samples, 0.23%)</title><rect x="33.3274%" y="117" width="0.2306%" height="15" fill="rgb(220,13,41)" fg:x="5636" fg:w="39"/><text x="33.5774%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (11 samples, 0.07%)</title><rect x="33.4930%" y="101" width="0.0650%" height="15" fill="rgb(249,221,25)" fg:x="5664" fg:w="11"/><text x="33.7430%" y="111.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (4 samples, 0.02%)</title><rect x="33.5344%" y="85" width="0.0237%" height="15" fill="rgb(215,208,19)" fg:x="5671" fg:w="4"/><text x="33.7844%" y="95.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (18 samples, 0.11%)</title><rect x="33.5580%" y="133" width="0.1064%" height="15" fill="rgb(236,175,2)" fg:x="5675" fg:w="18"/><text x="33.8080%" y="143.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (12 samples, 0.07%)</title><rect x="33.5935%" y="117" width="0.0710%" height="15" fill="rgb(241,52,2)" fg:x="5681" fg:w="12"/><text x="33.8435%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (82 samples, 0.48%)</title><rect x="33.1973%" y="149" width="0.4849%" height="15" fill="rgb(248,140,14)" fg:x="5614" fg:w="82"/><text x="33.4473%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="33.6881%" y="101" width="0.0118%" height="15" fill="rgb(253,22,42)" fg:x="5697" fg:w="2"/><text x="33.9381%" y="111.50"></text></g><g><title>performance-test`alloc::string::String::as_str (2 samples, 0.01%)</title><rect x="33.6881%" y="85" width="0.0118%" height="15" fill="rgb(234,61,47)" fg:x="5697" fg:w="2"/><text x="33.9381%" y="95.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="33.6881%" y="69" width="0.0118%" height="15" fill="rgb(208,226,15)" fg:x="5697" fg:w="2"/><text x="33.9381%" y="79.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (3 samples, 0.02%)</title><rect x="33.6881%" y="133" width="0.0177%" height="15" fill="rgb(217,221,4)" fg:x="5697" fg:w="3"/><text x="33.9381%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (3 samples, 0.02%)</title><rect x="33.6881%" y="117" width="0.0177%" height="15" fill="rgb(212,174,34)" fg:x="5697" fg:w="3"/><text x="33.9381%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (5 samples, 0.03%)</title><rect x="33.6822%" y="149" width="0.0296%" height="15" fill="rgb(253,83,4)" fg:x="5696" fg:w="5"/><text x="33.9322%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="33.7118%" y="133" width="0.0118%" height="15" fill="rgb(250,195,49)" fg:x="5701" fg:w="2"/><text x="33.9618%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (12 samples, 0.07%)</title><rect x="33.7768%" y="69" width="0.0710%" height="15" fill="rgb(241,192,25)" fg:x="5712" fg:w="12"/><text x="34.0268%" y="79.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (7 samples, 0.04%)</title><rect x="33.8064%" y="53" width="0.0414%" height="15" fill="rgb(208,124,10)" fg:x="5717" fg:w="7"/><text x="34.0564%" y="63.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (15 samples, 0.09%)</title><rect x="33.7709%" y="85" width="0.0887%" height="15" fill="rgb(222,33,0)" fg:x="5711" fg:w="15"/><text x="34.0209%" y="95.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="33.8478%" y="69" width="0.0118%" height="15" fill="rgb(234,209,28)" fg:x="5724" fg:w="2"/><text x="34.0978%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="33.8774%" y="69" width="0.0177%" height="15" fill="rgb(224,11,23)" fg:x="5729" fg:w="3"/><text x="34.1274%" y="79.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (24 samples, 0.14%)</title><rect x="33.7650%" y="117" width="0.1419%" height="15" fill="rgb(232,99,1)" fg:x="5710" fg:w="24"/><text x="34.0150%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (23 samples, 0.14%)</title><rect x="33.7709%" y="101" width="0.1360%" height="15" fill="rgb(237,95,45)" fg:x="5711" fg:w="23"/><text x="34.0209%" y="111.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (7 samples, 0.04%)</title><rect x="33.8655%" y="85" width="0.0414%" height="15" fill="rgb(208,109,11)" fg:x="5727" fg:w="7"/><text x="34.1155%" y="95.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="33.8951%" y="69" width="0.0118%" height="15" fill="rgb(216,190,48)" fg:x="5732" fg:w="2"/><text x="34.1451%" y="79.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (35 samples, 0.21%)</title><rect x="33.7236%" y="133" width="0.2070%" height="15" fill="rgb(251,171,36)" fg:x="5703" fg:w="35"/><text x="33.9736%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.02%)</title><rect x="33.9069%" y="117" width="0.0237%" height="15" fill="rgb(230,62,22)" fg:x="5734" fg:w="4"/><text x="34.1569%" y="127.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.02%)</title><rect x="33.9128%" y="101" width="0.0177%" height="15" fill="rgb(225,114,35)" fg:x="5735" fg:w="3"/><text x="34.1628%" y="111.50"></text></g><g><title>performance-test`alloc::string::String::as_str (10 samples, 0.06%)</title><rect x="33.9483%" y="69" width="0.0591%" height="15" fill="rgb(215,118,42)" fg:x="5741" fg:w="10"/><text x="34.1983%" y="79.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (7 samples, 0.04%)</title><rect x="33.9661%" y="53" width="0.0414%" height="15" fill="rgb(243,119,21)" fg:x="5744" fg:w="7"/><text x="34.2161%" y="63.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (12 samples, 0.07%)</title><rect x="33.9483%" y="85" width="0.0710%" height="15" fill="rgb(252,177,53)" fg:x="5741" fg:w="12"/><text x="34.1983%" y="95.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="34.0075%" y="69" width="0.0118%" height="15" fill="rgb(237,209,29)" fg:x="5751" fg:w="2"/><text x="34.2575%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="34.0429%" y="69" width="0.0177%" height="15" fill="rgb(212,65,23)" fg:x="5757" fg:w="3"/><text x="34.2929%" y="79.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (22 samples, 0.13%)</title><rect x="33.9483%" y="117" width="0.1301%" height="15" fill="rgb(230,222,46)" fg:x="5741" fg:w="22"/><text x="34.1983%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (22 samples, 0.13%)</title><rect x="33.9483%" y="101" width="0.1301%" height="15" fill="rgb(215,135,32)" fg:x="5741" fg:w="22"/><text x="34.1983%" y="111.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (8 samples, 0.05%)</title><rect x="34.0311%" y="85" width="0.0473%" height="15" fill="rgb(246,101,22)" fg:x="5755" fg:w="8"/><text x="34.2811%" y="95.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (3 samples, 0.02%)</title><rect x="34.0607%" y="69" width="0.0177%" height="15" fill="rgb(206,107,13)" fg:x="5760" fg:w="3"/><text x="34.3107%" y="79.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.03%)</title><rect x="34.0784%" y="117" width="0.0296%" height="15" fill="rgb(250,100,44)" fg:x="5763" fg:w="5"/><text x="34.3284%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (235 samples, 1.39%)</title><rect x="32.7243%" y="165" width="1.3896%" height="15" fill="rgb(231,147,38)" fg:x="5534" fg:w="235"/><text x="32.9743%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (68 samples, 0.40%)</title><rect x="33.7118%" y="149" width="0.4021%" height="15" fill="rgb(229,8,40)" fg:x="5701" fg:w="68"/><text x="33.9618%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (31 samples, 0.18%)</title><rect x="33.9306%" y="133" width="0.1833%" height="15" fill="rgb(221,135,30)" fg:x="5738" fg:w="31"/><text x="34.1806%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="34.1139%" y="149" width="0.0118%" height="15" fill="rgb(249,193,18)" fg:x="5769" fg:w="2"/><text x="34.3639%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="34.1139%" y="133" width="0.0118%" height="15" fill="rgb(209,133,39)" fg:x="5769" fg:w="2"/><text x="34.3639%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (2 samples, 0.01%)</title><rect x="34.1139%" y="117" width="0.0118%" height="15" fill="rgb(232,100,14)" fg:x="5769" fg:w="2"/><text x="34.3639%" y="127.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="34.1494%" y="85" width="0.0177%" height="15" fill="rgb(224,185,1)" fg:x="5775" fg:w="3"/><text x="34.3994%" y="95.50"></text></g><g><title>performance-test`alloc::string::String::as_str (3 samples, 0.02%)</title><rect x="34.1494%" y="69" width="0.0177%" height="15" fill="rgb(223,139,8)" fg:x="5775" fg:w="3"/><text x="34.3994%" y="79.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.01%)</title><rect x="34.1553%" y="53" width="0.0118%" height="15" fill="rgb(232,213,38)" fg:x="5776" fg:w="2"/><text x="34.4053%" y="63.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (4 samples, 0.02%)</title><rect x="34.1494%" y="117" width="0.0237%" height="15" fill="rgb(207,94,22)" fg:x="5775" fg:w="4"/><text x="34.3994%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (4 samples, 0.02%)</title><rect x="34.1494%" y="101" width="0.0237%" height="15" fill="rgb(219,183,54)" fg:x="5775" fg:w="4"/><text x="34.3994%" y="111.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (9 samples, 0.05%)</title><rect x="34.1316%" y="133" width="0.0532%" height="15" fill="rgb(216,185,54)" fg:x="5772" fg:w="9"/><text x="34.3816%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="34.1730%" y="117" width="0.0118%" height="15" fill="rgb(254,217,39)" fg:x="5779" fg:w="2"/><text x="34.4230%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (8 samples, 0.05%)</title><rect x="34.2203%" y="69" width="0.0473%" height="15" fill="rgb(240,178,23)" fg:x="5787" fg:w="8"/><text x="34.4703%" y="79.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (6 samples, 0.04%)</title><rect x="34.2322%" y="53" width="0.0355%" height="15" fill="rgb(218,11,47)" fg:x="5789" fg:w="6"/><text x="34.4822%" y="63.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (10 samples, 0.06%)</title><rect x="34.2144%" y="85" width="0.0591%" height="15" fill="rgb(218,51,51)" fg:x="5786" fg:w="10"/><text x="34.4644%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="34.2854%" y="69" width="0.0118%" height="15" fill="rgb(238,126,27)" fg:x="5798" fg:w="2"/><text x="34.5354%" y="79.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (21 samples, 0.12%)</title><rect x="34.1967%" y="117" width="0.1242%" height="15" fill="rgb(249,202,22)" fg:x="5783" fg:w="21"/><text x="34.4467%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (20 samples, 0.12%)</title><rect x="34.2026%" y="101" width="0.1183%" height="15" fill="rgb(254,195,49)" fg:x="5784" fg:w="20"/><text x="34.4526%" y="111.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (6 samples, 0.04%)</title><rect x="34.2854%" y="85" width="0.0355%" height="15" fill="rgb(208,123,14)" fg:x="5798" fg:w="6"/><text x="34.5354%" y="95.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (4 samples, 0.02%)</title><rect x="34.2972%" y="69" width="0.0237%" height="15" fill="rgb(224,200,8)" fg:x="5800" fg:w="4"/><text x="34.5472%" y="79.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="34.3209%" y="117" width="0.0118%" height="15" fill="rgb(217,61,36)" fg:x="5804" fg:w="2"/><text x="34.5709%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (27 samples, 0.16%)</title><rect x="34.1849%" y="133" width="0.1597%" height="15" fill="rgb(206,35,45)" fg:x="5781" fg:w="27"/><text x="34.4349%" y="143.50"></text></g><g><title>performance-test`core::ptr::drop_in_place&lt;core::slice::sort::shared::smallsort::CopyOnDrop&lt;&amp;alloc::string::String&gt;&gt; (2 samples, 0.01%)</title><rect x="34.3327%" y="117" width="0.0118%" height="15" fill="rgb(217,65,33)" fg:x="5806" fg:w="2"/><text x="34.5827%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (7 samples, 0.04%)</title><rect x="34.3622%" y="53" width="0.0414%" height="15" fill="rgb(222,158,48)" fg:x="5811" fg:w="7"/><text x="34.6122%" y="63.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="34.3859%" y="37" width="0.0177%" height="15" fill="rgb(254,2,54)" fg:x="5815" fg:w="3"/><text x="34.6359%" y="47.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (8 samples, 0.05%)</title><rect x="34.3622%" y="69" width="0.0473%" height="15" fill="rgb(250,143,38)" fg:x="5811" fg:w="8"/><text x="34.6122%" y="79.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (12 samples, 0.07%)</title><rect x="34.3563%" y="101" width="0.0710%" height="15" fill="rgb(248,25,0)" fg:x="5810" fg:w="12"/><text x="34.6063%" y="111.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (11 samples, 0.07%)</title><rect x="34.3622%" y="85" width="0.0650%" height="15" fill="rgb(206,152,27)" fg:x="5811" fg:w="11"/><text x="34.6122%" y="95.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (2 samples, 0.01%)</title><rect x="34.4155%" y="69" width="0.0118%" height="15" fill="rgb(240,77,30)" fg:x="5820" fg:w="2"/><text x="34.6655%" y="79.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (17 samples, 0.10%)</title><rect x="34.3504%" y="117" width="0.1005%" height="15" fill="rgb(231,5,3)" fg:x="5809" fg:w="17"/><text x="34.6004%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (4 samples, 0.02%)</title><rect x="34.4273%" y="101" width="0.0237%" height="15" fill="rgb(207,226,32)" fg:x="5822" fg:w="4"/><text x="34.6773%" y="111.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (3 samples, 0.02%)</title><rect x="34.4332%" y="85" width="0.0177%" height="15" fill="rgb(222,207,47)" fg:x="5823" fg:w="3"/><text x="34.6832%" y="95.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (59 samples, 0.35%)</title><rect x="34.1257%" y="149" width="0.3489%" height="15" fill="rgb(229,115,45)" fg:x="5771" fg:w="59"/><text x="34.3757%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (21 samples, 0.12%)</title><rect x="34.3504%" y="133" width="0.1242%" height="15" fill="rgb(224,191,6)" fg:x="5809" fg:w="21"/><text x="34.6004%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (4 samples, 0.02%)</title><rect x="34.4509%" y="117" width="0.0237%" height="15" fill="rgb(230,227,24)" fg:x="5826" fg:w="4"/><text x="34.7009%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.01%)</title><rect x="34.4628%" y="101" width="0.0118%" height="15" fill="rgb(228,80,19)" fg:x="5828" fg:w="2"/><text x="34.7128%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="34.4923%" y="101" width="0.0118%" height="15" fill="rgb(247,229,0)" fg:x="5833" fg:w="2"/><text x="34.7423%" y="111.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="34.4923%" y="85" width="0.0118%" height="15" fill="rgb(237,194,15)" fg:x="5833" fg:w="2"/><text x="34.7423%" y="95.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (4 samples, 0.02%)</title><rect x="34.4864%" y="117" width="0.0237%" height="15" fill="rgb(219,203,20)" fg:x="5832" fg:w="4"/><text x="34.7364%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.05%)</title><rect x="34.4805%" y="133" width="0.0473%" height="15" fill="rgb(234,128,8)" fg:x="5831" fg:w="8"/><text x="34.7305%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="34.5101%" y="117" width="0.0177%" height="15" fill="rgb(248,202,8)" fg:x="5836" fg:w="3"/><text x="34.7601%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.01%)</title><rect x="34.5160%" y="101" width="0.0118%" height="15" fill="rgb(206,104,37)" fg:x="5837" fg:w="2"/><text x="34.7660%" y="111.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::bidirectional_merge (3 samples, 0.02%)</title><rect x="34.5278%" y="101" width="0.0177%" height="15" fill="rgb(223,8,27)" fg:x="5839" fg:w="3"/><text x="34.7778%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (2 samples, 0.01%)</title><rect x="34.5515%" y="85" width="0.0118%" height="15" fill="rgb(216,217,28)" fg:x="5843" fg:w="2"/><text x="34.8015%" y="95.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="34.5515%" y="69" width="0.0118%" height="15" fill="rgb(249,199,1)" fg:x="5843" fg:w="2"/><text x="34.8015%" y="79.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (16 samples, 0.09%)</title><rect x="34.4746%" y="149" width="0.0946%" height="15" fill="rgb(240,85,17)" fg:x="5830" fg:w="16"/><text x="34.7246%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (7 samples, 0.04%)</title><rect x="34.5278%" y="133" width="0.0414%" height="15" fill="rgb(206,108,45)" fg:x="5839" fg:w="7"/><text x="34.7778%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.04%)</title><rect x="34.5278%" y="117" width="0.0414%" height="15" fill="rgb(245,210,41)" fg:x="5839" fg:w="7"/><text x="34.7778%" y="127.50"></text></g><g><title>performance-test`core::slice::sort::shared::smallsort::insert_tail (4 samples, 0.02%)</title><rect x="34.5456%" y="101" width="0.0237%" height="15" fill="rgb(206,13,37)" fg:x="5842" fg:w="4"/><text x="34.7956%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="34.5988%" y="85" width="0.0118%" height="15" fill="rgb(250,61,18)" fg:x="5851" fg:w="2"/><text x="34.8488%" y="95.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (6 samples, 0.04%)</title><rect x="34.5810%" y="133" width="0.0355%" height="15" fill="rgb(235,172,48)" fg:x="5848" fg:w="6"/><text x="34.8310%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (6 samples, 0.04%)</title><rect x="34.5810%" y="117" width="0.0355%" height="15" fill="rgb(249,201,17)" fg:x="5848" fg:w="6"/><text x="34.8310%" y="127.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (4 samples, 0.02%)</title><rect x="34.5929%" y="101" width="0.0237%" height="15" fill="rgb(219,208,6)" fg:x="5850" fg:w="4"/><text x="34.8429%" y="111.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.02%)</title><rect x="34.6165%" y="133" width="0.0177%" height="15" fill="rgb(248,31,23)" fg:x="5854" fg:w="3"/><text x="34.8665%" y="143.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (91 samples, 0.54%)</title><rect x="34.1139%" y="165" width="0.5381%" height="15" fill="rgb(245,15,42)" fg:x="5769" fg:w="91"/><text x="34.3639%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (14 samples, 0.08%)</title><rect x="34.5692%" y="149" width="0.0828%" height="15" fill="rgb(222,217,39)" fg:x="5846" fg:w="14"/><text x="34.8192%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (3 samples, 0.02%)</title><rect x="34.6343%" y="133" width="0.0177%" height="15" fill="rgb(210,219,27)" fg:x="5857" fg:w="3"/><text x="34.8843%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (10 samples, 0.06%)</title><rect x="34.6875%" y="117" width="0.0591%" height="15" fill="rgb(252,166,36)" fg:x="5866" fg:w="10"/><text x="34.9375%" y="127.50"></text></g><g><title>performance-test`alloc::string::String::as_str (10 samples, 0.06%)</title><rect x="34.6875%" y="101" width="0.0591%" height="15" fill="rgb(245,132,34)" fg:x="5866" fg:w="10"/><text x="34.9375%" y="111.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (10 samples, 0.06%)</title><rect x="34.6875%" y="85" width="0.0591%" height="15" fill="rgb(236,54,3)" fg:x="5866" fg:w="10"/><text x="34.9375%" y="95.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (2 samples, 0.01%)</title><rect x="34.7466%" y="117" width="0.0118%" height="15" fill="rgb(241,173,43)" fg:x="5876" fg:w="2"/><text x="34.9966%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="34.7644%" y="101" width="0.0118%" height="15" fill="rgb(215,190,9)" fg:x="5879" fg:w="2"/><text x="35.0144%" y="111.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (19 samples, 0.11%)</title><rect x="34.6757%" y="149" width="0.1124%" height="15" fill="rgb(242,101,16)" fg:x="5864" fg:w="19"/><text x="34.9257%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (17 samples, 0.10%)</title><rect x="34.6875%" y="133" width="0.1005%" height="15" fill="rgb(223,190,21)" fg:x="5866" fg:w="17"/><text x="34.9375%" y="143.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (5 samples, 0.03%)</title><rect x="34.7584%" y="117" width="0.0296%" height="15" fill="rgb(215,228,25)" fg:x="5878" fg:w="5"/><text x="35.0084%" y="127.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.01%)</title><rect x="34.7762%" y="101" width="0.0118%" height="15" fill="rgb(225,36,22)" fg:x="5881" fg:w="2"/><text x="35.0262%" y="111.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (364 samples, 2.15%)</title><rect x="32.7183%" y="181" width="2.1524%" height="15" fill="rgb(251,106,46)" fg:x="5533" fg:w="364"/><text x="32.9683%" y="191.50">p..</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (37 samples, 0.22%)</title><rect x="34.6520%" y="165" width="0.2188%" height="15" fill="rgb(208,90,1)" fg:x="5860" fg:w="37"/><text x="34.9020%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (14 samples, 0.08%)</title><rect x="34.7880%" y="149" width="0.0828%" height="15" fill="rgb(243,10,4)" fg:x="5883" fg:w="14"/><text x="35.0380%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (9 samples, 0.05%)</title><rect x="34.8176%" y="133" width="0.0532%" height="15" fill="rgb(212,137,27)" fg:x="5888" fg:w="9"/><text x="35.0676%" y="143.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (7 samples, 0.04%)</title><rect x="34.8294%" y="117" width="0.0414%" height="15" fill="rgb(231,220,49)" fg:x="5890" fg:w="7"/><text x="35.0794%" y="127.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (3 samples, 0.02%)</title><rect x="34.9595%" y="165" width="0.0177%" height="15" fill="rgb(237,96,20)" fg:x="5912" fg:w="3"/><text x="35.2095%" y="175.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (30 samples, 0.18%)</title><rect x="35.0068%" y="133" width="0.1774%" height="15" fill="rgb(239,229,30)" fg:x="5920" fg:w="30"/><text x="35.2568%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (29 samples, 0.17%)</title><rect x="35.0127%" y="117" width="0.1715%" height="15" fill="rgb(219,65,33)" fg:x="5921" fg:w="29"/><text x="35.2627%" y="127.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (15 samples, 0.09%)</title><rect x="35.0955%" y="101" width="0.0887%" height="15" fill="rgb(243,134,7)" fg:x="5935" fg:w="15"/><text x="35.3455%" y="111.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (2 samples, 0.01%)</title><rect x="35.1901%" y="133" width="0.0118%" height="15" fill="rgb(216,177,54)" fg:x="5951" fg:w="2"/><text x="35.4401%" y="143.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.02%)</title><rect x="35.2019%" y="133" width="0.0177%" height="15" fill="rgb(211,160,20)" fg:x="5953" fg:w="3"/><text x="35.4519%" y="143.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (7 samples, 0.04%)</title><rect x="35.2197%" y="133" width="0.0414%" height="15" fill="rgb(239,85,39)" fg:x="5956" fg:w="7"/><text x="35.4697%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (9 samples, 0.05%)</title><rect x="35.2847%" y="117" width="0.0532%" height="15" fill="rgb(232,125,22)" fg:x="5967" fg:w="9"/><text x="35.5347%" y="127.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="35.3379%" y="117" width="0.0118%" height="15" fill="rgb(244,57,34)" fg:x="5976" fg:w="2"/><text x="35.5879%" y="127.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (73 samples, 0.43%)</title><rect x="34.9772%" y="165" width="0.4317%" height="15" fill="rgb(214,203,32)" fg:x="5915" fg:w="73"/><text x="35.2272%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (70 samples, 0.41%)</title><rect x="34.9950%" y="149" width="0.4139%" height="15" fill="rgb(207,58,43)" fg:x="5918" fg:w="70"/><text x="35.2450%" y="159.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (25 samples, 0.15%)</title><rect x="35.2611%" y="133" width="0.1478%" height="15" fill="rgb(215,193,15)" fg:x="5963" fg:w="25"/><text x="35.5111%" y="143.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (10 samples, 0.06%)</title><rect x="35.3498%" y="117" width="0.0591%" height="15" fill="rgb(232,15,44)" fg:x="5978" fg:w="10"/><text x="35.5998%" y="127.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (15 samples, 0.09%)</title><rect x="35.4089%" y="165" width="0.0887%" height="15" fill="rgb(212,3,48)" fg:x="5988" fg:w="15"/><text x="35.6589%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (7 samples, 0.04%)</title><rect x="35.4562%" y="149" width="0.0414%" height="15" fill="rgb(218,128,7)" fg:x="5996" fg:w="7"/><text x="35.7062%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (1,109 samples, 6.56%)</title><rect x="29.3241%" y="197" width="6.5579%" height="15" fill="rgb(226,216,39)" fg:x="4959" fg:w="1109"/><text x="29.5741%" y="207.50">performan..</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (171 samples, 1.01%)</title><rect x="34.8708%" y="181" width="1.0112%" height="15" fill="rgb(243,47,51)" fg:x="5897" fg:w="171"/><text x="35.1208%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (65 samples, 0.38%)</title><rect x="35.4976%" y="165" width="0.3844%" height="15" fill="rgb(241,183,40)" fg:x="6003" fg:w="65"/><text x="35.7476%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (25 samples, 0.15%)</title><rect x="35.7341%" y="149" width="0.1478%" height="15" fill="rgb(231,217,32)" fg:x="6043" fg:w="25"/><text x="35.9841%" y="159.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (9 samples, 0.05%)</title><rect x="35.8288%" y="133" width="0.0532%" height="15" fill="rgb(229,61,38)" fg:x="6059" fg:w="9"/><text x="36.0788%" y="143.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (10 samples, 0.06%)</title><rect x="36.0535%" y="181" width="0.0591%" height="15" fill="rgb(225,210,5)" fg:x="6097" fg:w="10"/><text x="36.3035%" y="191.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (4 samples, 0.02%)</title><rect x="36.0889%" y="165" width="0.0237%" height="15" fill="rgb(231,79,45)" fg:x="6103" fg:w="4"/><text x="36.3389%" y="175.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="36.1776%" y="165" width="0.0177%" height="15" fill="rgb(224,100,7)" fg:x="6118" fg:w="3"/><text x="36.4276%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (100 samples, 0.59%)</title><rect x="36.2249%" y="133" width="0.5913%" height="15" fill="rgb(241,198,18)" fg:x="6126" fg:w="100"/><text x="36.4749%" y="143.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (71 samples, 0.42%)</title><rect x="36.3964%" y="117" width="0.4198%" height="15" fill="rgb(252,97,53)" fg:x="6155" fg:w="71"/><text x="36.6464%" y="127.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (104 samples, 0.61%)</title><rect x="36.2190%" y="149" width="0.6150%" height="15" fill="rgb(220,88,7)" fg:x="6125" fg:w="104"/><text x="36.4690%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.02%)</title><rect x="36.8163%" y="133" width="0.0177%" height="15" fill="rgb(213,176,14)" fg:x="6226" fg:w="3"/><text x="37.0663%" y="143.50"></text></g><g><title>performance-test`alloc::string::String::as_str (5 samples, 0.03%)</title><rect x="36.8340%" y="149" width="0.0296%" height="15" fill="rgb(246,73,7)" fg:x="6229" fg:w="5"/><text x="37.0840%" y="159.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (2 samples, 0.01%)</title><rect x="36.8636%" y="149" width="0.0118%" height="15" fill="rgb(245,64,36)" fg:x="6234" fg:w="2"/><text x="37.1136%" y="159.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (8 samples, 0.05%)</title><rect x="36.8754%" y="149" width="0.0473%" height="15" fill="rgb(245,80,10)" fg:x="6236" fg:w="8"/><text x="37.1254%" y="159.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (13 samples, 0.08%)</title><rect x="36.9227%" y="149" width="0.0769%" height="15" fill="rgb(232,107,50)" fg:x="6244" fg:w="13"/><text x="37.1727%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (26 samples, 0.15%)</title><rect x="37.0587%" y="133" width="0.1537%" height="15" fill="rgb(253,3,0)" fg:x="6267" fg:w="26"/><text x="37.3087%" y="143.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (6 samples, 0.04%)</title><rect x="37.2125%" y="133" width="0.0355%" height="15" fill="rgb(212,99,53)" fg:x="6293" fg:w="6"/><text x="37.4625%" y="143.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (219 samples, 1.30%)</title><rect x="36.1126%" y="181" width="1.2950%" height="15" fill="rgb(249,111,54)" fg:x="6107" fg:w="219"/><text x="36.3626%" y="191.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (205 samples, 1.21%)</title><rect x="36.1954%" y="165" width="1.2122%" height="15" fill="rgb(249,55,30)" fg:x="6121" fg:w="205"/><text x="36.4454%" y="175.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (69 samples, 0.41%)</title><rect x="36.9996%" y="149" width="0.4080%" height="15" fill="rgb(237,47,42)" fg:x="6257" fg:w="69"/><text x="37.2496%" y="159.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (27 samples, 0.16%)</title><rect x="37.2479%" y="133" width="0.1597%" height="15" fill="rgb(211,20,18)" fg:x="6299" fg:w="27"/><text x="37.4979%" y="143.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (36 samples, 0.21%)</title><rect x="37.4076%" y="181" width="0.2129%" height="15" fill="rgb(231,203,46)" fg:x="6326" fg:w="36"/><text x="37.6576%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (15 samples, 0.09%)</title><rect x="37.5318%" y="165" width="0.0887%" height="15" fill="rgb(237,142,3)" fg:x="6347" fg:w="15"/><text x="37.7818%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (168 samples, 0.99%)</title><rect x="37.6205%" y="181" width="0.9934%" height="15" fill="rgb(241,107,1)" fg:x="6362" fg:w="168"/><text x="37.8705%" y="191.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (70 samples, 0.41%)</title><rect x="38.2000%" y="165" width="0.4139%" height="15" fill="rgb(229,83,13)" fg:x="6460" fg:w="70"/><text x="38.4500%" y="175.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (33 samples, 0.20%)</title><rect x="38.4188%" y="149" width="0.1951%" height="15" fill="rgb(241,91,40)" fg:x="6497" fg:w="33"/><text x="38.6688%" y="159.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (2,583 samples, 15.27%)</title><rect x="23.3458%" y="213" width="15.2741%" height="15" fill="rgb(225,3,45)" fg:x="3948" fg:w="2583"/><text x="23.5958%" y="223.50">performance-test`core::..</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (463 samples, 2.74%)</title><rect x="35.8820%" y="197" width="2.7379%" height="15" fill="rgb(244,223,14)" fg:x="6068" fg:w="463"/><text x="36.1320%" y="207.50">pe..</text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (23 samples, 0.14%)</title><rect x="38.9510%" y="197" width="0.1360%" height="15" fill="rgb(224,124,37)" fg:x="6587" fg:w="23"/><text x="39.2010%" y="207.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (14 samples, 0.08%)</title><rect x="39.0042%" y="181" width="0.0828%" height="15" fill="rgb(251,171,30)" fg:x="6596" fg:w="14"/><text x="39.2542%" y="191.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (10 samples, 0.06%)</title><rect x="39.1757%" y="181" width="0.0591%" height="15" fill="rgb(236,46,54)" fg:x="6625" fg:w="10"/><text x="39.4257%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (203 samples, 1.20%)</title><rect x="39.3827%" y="149" width="1.2004%" height="15" fill="rgb(245,213,5)" fg:x="6660" fg:w="203"/><text x="39.6327%" y="159.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (138 samples, 0.82%)</title><rect x="39.7670%" y="133" width="0.8160%" height="15" fill="rgb(230,144,27)" fg:x="6725" fg:w="138"/><text x="40.0170%" y="143.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (218 samples, 1.29%)</title><rect x="39.3294%" y="165" width="1.2891%" height="15" fill="rgb(220,86,6)" fg:x="6651" fg:w="218"/><text x="39.5794%" y="175.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (6 samples, 0.04%)</title><rect x="40.5831%" y="149" width="0.0355%" height="15" fill="rgb(240,20,13)" fg:x="6863" fg:w="6"/><text x="40.8331%" y="159.50"></text></g><g><title>performance-test`alloc::string::String::as_str (10 samples, 0.06%)</title><rect x="40.6185%" y="165" width="0.0591%" height="15" fill="rgb(217,89,34)" fg:x="6869" fg:w="10"/><text x="40.8685%" y="175.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (11 samples, 0.07%)</title><rect x="40.6777%" y="165" width="0.0650%" height="15" fill="rgb(229,13,5)" fg:x="6879" fg:w="11"/><text x="40.9277%" y="175.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (22 samples, 0.13%)</title><rect x="40.7427%" y="165" width="0.1301%" height="15" fill="rgb(244,67,35)" fg:x="6890" fg:w="22"/><text x="40.9927%" y="175.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (30 samples, 0.18%)</title><rect x="40.8728%" y="165" width="0.1774%" height="15" fill="rgb(221,40,2)" fg:x="6912" fg:w="30"/><text x="41.1228%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (39 samples, 0.23%)</title><rect x="41.1980%" y="149" width="0.2306%" height="15" fill="rgb(237,157,21)" fg:x="6967" fg:w="39"/><text x="41.4480%" y="159.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (6 samples, 0.04%)</title><rect x="41.4287%" y="149" width="0.0355%" height="15" fill="rgb(222,94,11)" fg:x="7006" fg:w="6"/><text x="41.6787%" y="159.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (445 samples, 2.63%)</title><rect x="39.0870%" y="197" width="2.6314%" height="15" fill="rgb(249,113,6)" fg:x="6610" fg:w="445"/><text x="39.3370%" y="207.50">pe..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (420 samples, 2.48%)</title><rect x="39.2348%" y="181" width="2.4836%" height="15" fill="rgb(238,137,36)" fg:x="6635" fg:w="420"/><text x="39.4848%" y="191.50">pe..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (113 samples, 0.67%)</title><rect x="41.0502%" y="165" width="0.6682%" height="15" fill="rgb(210,102,26)" fg:x="6942" fg:w="113"/><text x="41.3002%" y="175.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (43 samples, 0.25%)</title><rect x="41.4641%" y="149" width="0.2543%" height="15" fill="rgb(218,30,30)" fg:x="7012" fg:w="43"/><text x="41.7141%" y="159.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (83 samples, 0.49%)</title><rect x="41.7184%" y="197" width="0.4908%" height="15" fill="rgb(214,67,26)" fg:x="7055" fg:w="83"/><text x="41.9684%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (34 samples, 0.20%)</title><rect x="42.0082%" y="181" width="0.2011%" height="15" fill="rgb(251,9,53)" fg:x="7104" fg:w="34"/><text x="42.2582%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (358 samples, 2.12%)</title><rect x="42.2092%" y="197" width="2.1170%" height="15" fill="rgb(228,204,25)" fg:x="7138" fg:w="358"/><text x="42.4592%" y="207.50">p..</text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (134 samples, 0.79%)</title><rect x="43.5338%" y="181" width="0.7924%" height="15" fill="rgb(207,153,8)" fg:x="7362" fg:w="134"/><text x="43.7838%" y="191.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (70 samples, 0.41%)</title><rect x="43.9122%" y="165" width="0.4139%" height="15" fill="rgb(242,9,16)" fg:x="7426" fg:w="70"/><text x="44.1622%" y="175.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (4,879 samples, 28.85%)</title><rect x="15.4929%" y="229" width="28.8510%" height="15" fill="rgb(217,211,10)" fg:x="2620" fg:w="4879"/><text x="15.7429%" y="239.50">performance-test`core::slice::sort::stable::qu..</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (968 samples, 5.72%)</title><rect x="38.6198%" y="213" width="5.7241%" height="15" fill="rgb(219,228,52)" fg:x="6531" fg:w="968"/><text x="38.8698%" y="223.50">perform..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (3 samples, 0.02%)</title><rect x="44.3262%" y="197" width="0.0177%" height="15" fill="rgb(231,92,29)" fg:x="7496" fg:w="3"/><text x="44.5762%" y="207.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (43 samples, 0.25%)</title><rect x="44.8465%" y="213" width="0.2543%" height="15" fill="rgb(232,8,23)" fg:x="7584" fg:w="43"/><text x="45.0965%" y="223.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (31 samples, 0.18%)</title><rect x="44.9175%" y="197" width="0.1833%" height="15" fill="rgb(216,211,34)" fg:x="7596" fg:w="31"/><text x="45.1675%" y="207.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (17 samples, 0.10%)</title><rect x="45.2487%" y="197" width="0.1005%" height="15" fill="rgb(236,151,0)" fg:x="7652" fg:w="17"/><text x="45.4987%" y="207.50"></text></g><g><title>performance-test`alloc::string::String::as_str (321 samples, 1.90%)</title><rect x="45.5798%" y="165" width="1.8982%" height="15" fill="rgb(209,168,3)" fg:x="7708" fg:w="321"/><text x="45.8298%" y="175.50">p..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (209 samples, 1.24%)</title><rect x="46.2421%" y="149" width="1.2359%" height="15" fill="rgb(208,129,28)" fg:x="7820" fg:w="209"/><text x="46.4921%" y="159.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (348 samples, 2.06%)</title><rect x="45.4615%" y="181" width="2.0578%" height="15" fill="rgb(229,78,22)" fg:x="7688" fg:w="348"/><text x="45.7115%" y="191.50">p..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (7 samples, 0.04%)</title><rect x="47.4780%" y="165" width="0.0414%" height="15" fill="rgb(228,187,13)" fg:x="8029" fg:w="7"/><text x="47.7280%" y="175.50"></text></g><g><title>performance-test`alloc::string::String::as_str (11 samples, 0.07%)</title><rect x="47.5194%" y="181" width="0.0650%" height="15" fill="rgb(240,119,24)" fg:x="8036" fg:w="11"/><text x="47.7694%" y="191.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (14 samples, 0.08%)</title><rect x="47.5844%" y="181" width="0.0828%" height="15" fill="rgb(209,194,42)" fg:x="8047" fg:w="14"/><text x="47.8344%" y="191.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (30 samples, 0.18%)</title><rect x="47.6672%" y="181" width="0.1774%" height="15" fill="rgb(247,200,46)" fg:x="8061" fg:w="30"/><text x="47.9172%" y="191.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (62 samples, 0.37%)</title><rect x="47.8446%" y="181" width="0.3666%" height="15" fill="rgb(218,76,16)" fg:x="8091" fg:w="62"/><text x="48.0946%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (42 samples, 0.25%)</title><rect x="48.6370%" y="165" width="0.2484%" height="15" fill="rgb(225,21,48)" fg:x="8225" fg:w="42"/><text x="48.8870%" y="175.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (17 samples, 0.10%)</title><rect x="48.8853%" y="165" width="0.1005%" height="15" fill="rgb(239,223,50)" fg:x="8267" fg:w="17"/><text x="49.1353%" y="175.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (748 samples, 4.42%)</title><rect x="45.1008%" y="213" width="4.4232%" height="15" fill="rgb(244,45,21)" fg:x="7627" fg:w="748"/><text x="45.3508%" y="223.50">perfo..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (706 samples, 4.17%)</title><rect x="45.3492%" y="197" width="4.1748%" height="15" fill="rgb(232,33,43)" fg:x="7669" fg:w="706"/><text x="45.5992%" y="207.50">perfo..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (221 samples, 1.31%)</title><rect x="48.2171%" y="181" width="1.3068%" height="15" fill="rgb(209,8,3)" fg:x="8154" fg:w="221"/><text x="48.4671%" y="191.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (91 samples, 0.54%)</title><rect x="48.9859%" y="165" width="0.5381%" height="15" fill="rgb(214,25,53)" fg:x="8284" fg:w="91"/><text x="49.2359%" y="175.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (136 samples, 0.80%)</title><rect x="49.5240%" y="213" width="0.8042%" height="15" fill="rgb(254,186,54)" fg:x="8375" fg:w="136"/><text x="49.7740%" y="223.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (56 samples, 0.33%)</title><rect x="49.9970%" y="197" width="0.3311%" height="15" fill="rgb(208,174,49)" fg:x="8455" fg:w="56"/><text x="50.2470%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (546 samples, 3.23%)</title><rect x="50.3282%" y="213" width="3.2287%" height="15" fill="rgb(233,191,51)" fg:x="8511" fg:w="546"/><text x="50.5782%" y="223.50">per..</text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (211 samples, 1.25%)</title><rect x="52.3091%" y="197" width="1.2477%" height="15" fill="rgb(222,134,10)" fg:x="8846" fg:w="211"/><text x="52.5591%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (101 samples, 0.60%)</title><rect x="52.9596%" y="181" width="0.5972%" height="15" fill="rgb(230,226,20)" fg:x="8956" fg:w="101"/><text x="53.2096%" y="191.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (7,575 samples, 44.79%)</title><rect x="8.7990%" y="245" width="44.7933%" height="15" fill="rgb(251,111,25)" fg:x="1488" fg:w="7575"/><text x="9.0490%" y="255.50">performance-test`core::slice::sort::stable::quicksort::quicksort</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (1,564 samples, 9.25%)</title><rect x="44.3439%" y="229" width="9.2484%" height="15" fill="rgb(224,40,46)" fg:x="7499" fg:w="1564"/><text x="44.5939%" y="239.50">performance-t..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (6 samples, 0.04%)</title><rect x="53.5569%" y="213" width="0.0355%" height="15" fill="rgb(236,108,47)" fg:x="9057" fg:w="6"/><text x="53.8069%" y="223.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (59 samples, 0.35%)</title><rect x="54.2369%" y="229" width="0.3489%" height="15" fill="rgb(234,93,0)" fg:x="9172" fg:w="59"/><text x="54.4869%" y="239.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (33 samples, 0.20%)</title><rect x="54.3906%" y="213" width="0.1951%" height="15" fill="rgb(224,213,32)" fg:x="9198" fg:w="33"/><text x="54.6406%" y="223.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (27 samples, 0.16%)</title><rect x="54.7513%" y="213" width="0.1597%" height="15" fill="rgb(251,11,48)" fg:x="9259" fg:w="27"/><text x="55.0013%" y="223.50"></text></g><g><title>performance-test`alloc::string::String::as_str (492 samples, 2.91%)</title><rect x="55.2362%" y="181" width="2.9093%" height="15" fill="rgb(236,173,5)" fg:x="9341" fg:w="492"/><text x="55.4862%" y="191.50">pe..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (320 samples, 1.89%)</title><rect x="56.2533%" y="165" width="1.8923%" height="15" fill="rgb(230,95,12)" fg:x="9513" fg:w="320"/><text x="56.5033%" y="175.50">p..</text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (532 samples, 3.15%)</title><rect x="55.0825%" y="197" width="3.1459%" height="15" fill="rgb(232,209,1)" fg:x="9315" fg:w="532"/><text x="55.3325%" y="207.50">per..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (14 samples, 0.08%)</title><rect x="58.1456%" y="181" width="0.0828%" height="15" fill="rgb(232,6,1)" fg:x="9833" fg:w="14"/><text x="58.3956%" y="191.50"></text></g><g><title>performance-test`alloc::string::String::as_str (22 samples, 0.13%)</title><rect x="58.2284%" y="197" width="0.1301%" height="15" fill="rgb(210,224,50)" fg:x="9847" fg:w="22"/><text x="58.4784%" y="207.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (18 samples, 0.11%)</title><rect x="58.3585%" y="197" width="0.1064%" height="15" fill="rgb(228,127,35)" fg:x="9869" fg:w="18"/><text x="58.6085%" y="207.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (33 samples, 0.20%)</title><rect x="58.4649%" y="197" width="0.1951%" height="15" fill="rgb(245,102,45)" fg:x="9887" fg:w="33"/><text x="58.7149%" y="207.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (84 samples, 0.50%)</title><rect x="58.6600%" y="197" width="0.4967%" height="15" fill="rgb(214,1,49)" fg:x="9920" fg:w="84"/><text x="58.9100%" y="207.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (3 samples, 0.02%)</title><rect x="59.1568%" y="197" width="0.0177%" height="15" fill="rgb(226,163,40)" fg:x="10004" fg:w="3"/><text x="59.4068%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (54 samples, 0.32%)</title><rect x="60.0792%" y="181" width="0.3193%" height="15" fill="rgb(239,212,28)" fg:x="10160" fg:w="54"/><text x="60.3292%" y="191.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (21 samples, 0.12%)</title><rect x="60.3986%" y="181" width="0.1242%" height="15" fill="rgb(220,20,13)" fg:x="10214" fg:w="21"/><text x="60.6486%" y="191.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (1,099 samples, 6.50%)</title><rect x="54.5858%" y="229" width="6.4987%" height="15" fill="rgb(210,164,35)" fg:x="9231" fg:w="1099"/><text x="54.8358%" y="239.50">performan..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (1,044 samples, 6.17%)</title><rect x="54.9110%" y="213" width="6.1735%" height="15" fill="rgb(248,109,41)" fg:x="9286" fg:w="1044"/><text x="55.1610%" y="223.50">performa..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (323 samples, 1.91%)</title><rect x="59.1745%" y="197" width="1.9100%" height="15" fill="rgb(238,23,50)" fg:x="10007" fg:w="323"/><text x="59.4245%" y="207.50">p..</text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (95 samples, 0.56%)</title><rect x="60.5227%" y="181" width="0.5618%" height="15" fill="rgb(211,48,49)" fg:x="10235" fg:w="95"/><text x="60.7727%" y="191.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (177 samples, 1.05%)</title><rect x="61.0845%" y="229" width="1.0467%" height="15" fill="rgb(223,36,21)" fg:x="10330" fg:w="177"/><text x="61.3345%" y="239.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (75 samples, 0.44%)</title><rect x="61.6877%" y="213" width="0.4435%" height="15" fill="rgb(207,123,46)" fg:x="10432" fg:w="75"/><text x="61.9377%" y="223.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (738 samples, 4.36%)</title><rect x="62.1312%" y="229" width="4.3640%" height="15" fill="rgb(240,218,32)" fg:x="10507" fg:w="738"/><text x="62.3812%" y="239.50">perfo..</text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (306 samples, 1.81%)</title><rect x="64.6857%" y="213" width="1.8095%" height="15" fill="rgb(252,5,43)" fg:x="10939" fg:w="306"/><text x="64.9357%" y="223.50">p..</text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (145 samples, 0.86%)</title><rect x="65.6378%" y="197" width="0.8574%" height="15" fill="rgb(252,84,19)" fg:x="11100" fg:w="145"/><text x="65.8878%" y="207.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (10,450 samples, 61.79%)</title><rect x="4.7129%" y="261" width="61.7941%" height="15" fill="rgb(243,152,39)" fg:x="797" fg:w="10450"/><text x="4.9629%" y="271.50">performance-test`core::slice::sort::stable::quicksort::quicksort</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (2,184 samples, 12.91%)</title><rect x="53.5923%" y="245" width="12.9147%" height="15" fill="rgb(234,160,15)" fg:x="9063" fg:w="2184"/><text x="53.8423%" y="255.50">performance-test`co..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="66.4952%" y="229" width="0.0118%" height="15" fill="rgb(237,34,20)" fg:x="11245" fg:w="2"/><text x="66.7452%" y="239.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (51 samples, 0.30%)</title><rect x="67.1811%" y="245" width="0.3016%" height="15" fill="rgb(229,97,13)" fg:x="11361" fg:w="51"/><text x="67.4311%" y="255.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (30 samples, 0.18%)</title><rect x="67.3053%" y="229" width="0.1774%" height="15" fill="rgb(234,71,50)" fg:x="11382" fg:w="30"/><text x="67.5553%" y="239.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (32 samples, 0.19%)</title><rect x="67.7370%" y="229" width="0.1892%" height="15" fill="rgb(253,155,4)" fg:x="11455" fg:w="32"/><text x="67.9870%" y="239.50"></text></g><g><title>performance-test`alloc::string::String::as_str (549 samples, 3.25%)</title><rect x="68.3047%" y="197" width="3.2464%" height="15" fill="rgb(222,185,37)" fg:x="11551" fg:w="549"/><text x="68.5547%" y="207.50">per..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (343 samples, 2.03%)</title><rect x="69.5228%" y="181" width="2.0283%" height="15" fill="rgb(251,177,13)" fg:x="11757" fg:w="343"/><text x="69.7728%" y="191.50">p..</text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (599 samples, 3.54%)</title><rect x="68.0859%" y="213" width="3.5421%" height="15" fill="rgb(250,179,40)" fg:x="11514" fg:w="599"/><text x="68.3359%" y="223.50">perf..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (13 samples, 0.08%)</title><rect x="71.5511%" y="197" width="0.0769%" height="15" fill="rgb(242,44,2)" fg:x="12100" fg:w="13"/><text x="71.8011%" y="207.50"></text></g><g><title>performance-test`alloc::string::String::as_str (24 samples, 0.14%)</title><rect x="71.6279%" y="213" width="0.1419%" height="15" fill="rgb(216,177,13)" fg:x="12113" fg:w="24"/><text x="71.8779%" y="223.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (20 samples, 0.12%)</title><rect x="71.7699%" y="213" width="0.1183%" height="15" fill="rgb(216,106,43)" fg:x="12137" fg:w="20"/><text x="72.0199%" y="223.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (37 samples, 0.22%)</title><rect x="71.8881%" y="213" width="0.2188%" height="15" fill="rgb(216,183,2)" fg:x="12157" fg:w="37"/><text x="72.1381%" y="223.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (84 samples, 0.50%)</title><rect x="72.1069%" y="213" width="0.4967%" height="15" fill="rgb(249,75,3)" fg:x="12194" fg:w="84"/><text x="72.3569%" y="223.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (4 samples, 0.02%)</title><rect x="72.6036%" y="213" width="0.0237%" height="15" fill="rgb(219,67,39)" fg:x="12278" fg:w="4"/><text x="72.8536%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (26 samples, 0.15%)</title><rect x="74.1825%" y="197" width="0.1537%" height="15" fill="rgb(253,228,2)" fg:x="12545" fg:w="26"/><text x="74.4325%" y="207.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (21 samples, 0.12%)</title><rect x="74.3362%" y="197" width="0.1242%" height="15" fill="rgb(235,138,27)" fg:x="12571" fg:w="21"/><text x="74.5862%" y="207.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (1,248 samples, 7.38%)</title><rect x="67.4827%" y="245" width="7.3798%" height="15" fill="rgb(236,97,51)" fg:x="11412" fg:w="1248"/><text x="67.7327%" y="255.50">performanc..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (1,173 samples, 6.94%)</title><rect x="67.9262%" y="229" width="6.9363%" height="15" fill="rgb(240,80,30)" fg:x="11487" fg:w="1173"/><text x="68.1762%" y="239.50">performan..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (378 samples, 2.24%)</title><rect x="72.6273%" y="213" width="2.2352%" height="15" fill="rgb(230,178,19)" fg:x="12282" fg:w="378"/><text x="72.8773%" y="223.50">p..</text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (68 samples, 0.40%)</title><rect x="74.4604%" y="197" width="0.4021%" height="15" fill="rgb(210,190,27)" fg:x="12592" fg:w="68"/><text x="74.7104%" y="207.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (204 samples, 1.21%)</title><rect x="74.8625%" y="245" width="1.2063%" height="15" fill="rgb(222,107,31)" fg:x="12660" fg:w="204"/><text x="75.1125%" y="255.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (81 samples, 0.48%)</title><rect x="75.5899%" y="229" width="0.4790%" height="15" fill="rgb(216,127,34)" fg:x="12783" fg:w="81"/><text x="75.8399%" y="239.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (812 samples, 4.80%)</title><rect x="76.0688%" y="245" width="4.8016%" height="15" fill="rgb(234,116,52)" fg:x="12864" fg:w="812"/><text x="76.3188%" y="255.50">perfor..</text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (321 samples, 1.90%)</title><rect x="78.9723%" y="229" width="1.8982%" height="15" fill="rgb(222,124,15)" fg:x="13355" fg:w="321"/><text x="79.2223%" y="239.50">p..</text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (153 samples, 0.90%)</title><rect x="79.9657%" y="213" width="0.9047%" height="15" fill="rgb(231,179,28)" fg:x="13523" fg:w="153"/><text x="80.2157%" y="223.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (13,179 samples, 77.93%)</title><rect x="2.9507%" y="277" width="77.9315%" height="15" fill="rgb(226,93,45)" fg:x="499" fg:w="13179"/><text x="3.2007%" y="287.50">performance-test`core::slice::sort::stable::quicksort::quicksort</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (2,431 samples, 14.38%)</title><rect x="66.5070%" y="261" width="14.3753%" height="15" fill="rgb(215,8,51)" fg:x="11247" fg:w="2431"/><text x="66.7570%" y="271.50">performance-test`core:..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (2 samples, 0.01%)</title><rect x="80.8704%" y="245" width="0.0118%" height="15" fill="rgb(223,106,5)" fg:x="13676" fg:w="2"/><text x="81.1204%" y="255.50"></text></g><g><title>performance-test`&lt;usize as core::iter::range::Step&gt;::forward_unchecked (61 samples, 0.36%)</title><rect x="81.5682%" y="261" width="0.3607%" height="15" fill="rgb(250,191,5)" fg:x="13794" fg:w="61"/><text x="81.8182%" y="271.50"></text></g><g><title>performance-test`core::num::_&lt;impl usize&gt;::unchecked_add::precondition_check (35 samples, 0.21%)</title><rect x="81.7220%" y="245" width="0.2070%" height="15" fill="rgb(242,132,44)" fg:x="13820" fg:w="35"/><text x="81.9720%" y="255.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (27 samples, 0.16%)</title><rect x="82.1122%" y="245" width="0.1597%" height="15" fill="rgb(251,152,29)" fg:x="13886" fg:w="27"/><text x="82.3622%" y="255.50"></text></g><g><title>performance-test`alloc::string::String::as_str (542 samples, 3.21%)</title><rect x="82.6385%" y="213" width="3.2050%" height="15" fill="rgb(218,179,5)" fg:x="13975" fg:w="542"/><text x="82.8885%" y="223.50">per..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (368 samples, 2.18%)</title><rect x="83.6674%" y="197" width="2.1761%" height="15" fill="rgb(227,67,19)" fg:x="14149" fg:w="368"/><text x="83.9174%" y="207.50">p..</text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (590 samples, 3.49%)</title><rect x="82.4256%" y="229" width="3.4889%" height="15" fill="rgb(233,119,31)" fg:x="13939" fg:w="590"/><text x="82.6756%" y="239.50">per..</text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (12 samples, 0.07%)</title><rect x="85.8435%" y="213" width="0.0710%" height="15" fill="rgb(241,120,22)" fg:x="14517" fg:w="12"/><text x="86.0935%" y="223.50"></text></g><g><title>performance-test`alloc::string::String::as_str (23 samples, 0.14%)</title><rect x="85.9145%" y="229" width="0.1360%" height="15" fill="rgb(224,102,30)" fg:x="14529" fg:w="23"/><text x="86.1645%" y="239.50"></text></g><g><title>performance-test`core::cmp::Ordering::is_eq (12 samples, 0.07%)</title><rect x="86.0505%" y="229" width="0.0710%" height="15" fill="rgb(210,164,37)" fg:x="14552" fg:w="12"/><text x="86.3005%" y="239.50"></text></g><g><title>performance-test`core::cmp::impls::_&lt;impl core::cmp::Ord for usize&gt;::cmp (33 samples, 0.20%)</title><rect x="86.1215%" y="229" width="0.1951%" height="15" fill="rgb(226,191,16)" fg:x="14564" fg:w="33"/><text x="86.3715%" y="239.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::len (96 samples, 0.57%)</title><rect x="86.3166%" y="229" width="0.5677%" height="15" fill="rgb(214,40,45)" fg:x="14597" fg:w="96"/><text x="86.5666%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (18 samples, 0.11%)</title><rect x="88.0374%" y="213" width="0.1064%" height="15" fill="rgb(244,29,26)" fg:x="14888" fg:w="18"/><text x="88.2874%" y="223.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (5 samples, 0.03%)</title><rect x="88.1438%" y="213" width="0.0296%" height="15" fill="rgb(216,16,5)" fg:x="14906" fg:w="5"/><text x="88.3938%" y="223.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by::_{{closure}} (1,078 samples, 6.37%)</title><rect x="81.9289%" y="261" width="6.3745%" height="15" fill="rgb(249,76,35)" fg:x="13855" fg:w="1078"/><text x="82.1789%" y="271.50">performa..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (1,020 samples, 6.03%)</title><rect x="82.2719%" y="245" width="6.0316%" height="15" fill="rgb(207,11,44)" fg:x="13913" fg:w="1020"/><text x="82.5219%" y="255.50">performa..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::compare_substrings (239 samples, 1.41%)</title><rect x="86.8902%" y="229" width="1.4133%" height="15" fill="rgb(228,190,49)" fg:x="14694" fg:w="239"/><text x="87.1402%" y="239.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::cmp::Ord for str&gt;::cmp (22 samples, 0.13%)</title><rect x="88.1734%" y="213" width="0.1301%" height="15" fill="rgb(214,173,12)" fg:x="14911" fg:w="22"/><text x="88.4234%" y="223.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (218 samples, 1.29%)</title><rect x="88.3035%" y="261" width="1.2891%" height="15" fill="rgb(218,26,35)" fg:x="14933" fg:w="218"/><text x="88.5535%" y="271.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (92 samples, 0.54%)</title><rect x="89.0485%" y="245" width="0.5440%" height="15" fill="rgb(220,200,19)" fg:x="15059" fg:w="92"/><text x="89.2985%" y="255.50"></text></g><g><title>performance-test`core::slice::sort::stable::quicksort::PartitionState&lt;T&gt;::partition_one (881 samples, 5.21%)</title><rect x="89.5926%" y="261" width="5.2096%" height="15" fill="rgb(239,95,49)" fg:x="15151" fg:w="881"/><text x="89.8426%" y="271.50">perfor..</text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (376 samples, 2.22%)</title><rect x="92.5788%" y="245" width="2.2234%" height="15" fill="rgb(235,85,53)" fg:x="15656" fg:w="376"/><text x="92.8288%" y="255.50">p..</text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (177 samples, 1.05%)</title><rect x="93.7555%" y="229" width="1.0467%" height="15" fill="rgb(233,133,31)" fg:x="15855" fg:w="177"/><text x="94.0055%" y="239.50"></text></g><g><title>performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by (15,717 samples, 92.94%)</title><rect x="1.8923%" y="373" width="92.9395%" height="15" fill="rgb(218,25,20)" fg:x="320" fg:w="15717"/><text x="2.1423%" y="383.50">performance-test`alloc::slice::_&lt;impl [T]&gt;::sort_by</text></g><g><title>performance-test`alloc::slice::stable_sort (15,717 samples, 92.94%)</title><rect x="1.8923%" y="357" width="92.9395%" height="15" fill="rgb(252,210,38)" fg:x="320" fg:w="15717"/><text x="2.1423%" y="367.50">performance-test`alloc::slice::stable_sort</text></g><g><title>performance-test`core::slice::sort::stable::driftsort_main (15,716 samples, 92.93%)</title><rect x="1.8982%" y="341" width="92.9336%" height="15" fill="rgb(242,134,21)" fg:x="321" fg:w="15716"/><text x="2.1482%" y="351.50">performance-test`core::slice::sort::stable::driftsort_main</text></g><g><title>performance-test`core::slice::sort::stable::drift::sort (15,715 samples, 92.93%)</title><rect x="1.9041%" y="325" width="92.9277%" height="15" fill="rgb(213,28,48)" fg:x="322" fg:w="15715"/><text x="2.1541%" y="335.50">performance-test`core::slice::sort::stable::drift::sort</text></g><g><title>performance-test`core::slice::sort::stable::drift::stable_quicksort (15,659 samples, 92.60%)</title><rect x="2.2352%" y="309" width="92.5965%" height="15" fill="rgb(250,196,2)" fg:x="378" fg:w="15659"/><text x="2.4852%" y="319.50">performance-test`core::slice::sort::stable::drift::stable_quicksort</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::quicksort (15,659 samples, 92.60%)</title><rect x="2.2352%" y="293" width="92.5965%" height="15" fill="rgb(227,5,17)" fg:x="378" fg:w="15659"/><text x="2.4852%" y="303.50">performance-test`core::slice::sort::stable::quicksort::quicksort</text></g><g><title>performance-test`core::slice::sort::stable::quicksort::stable_partition (2,359 samples, 13.95%)</title><rect x="80.8823%" y="277" width="13.9495%" height="15" fill="rgb(221,226,24)" fg:x="13678" fg:w="2359"/><text x="81.1323%" y="287.50">performance-test`core..</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values::_{{closure}} (5 samples, 0.03%)</title><rect x="94.8022%" y="261" width="0.0296%" height="15" fill="rgb(211,5,48)" fg:x="16032" fg:w="5"/><text x="95.0522%" y="271.50"></text></g><g><title>performance-test`&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.24%)</title><rect x="94.8318%" y="293" width="0.2365%" height="15" fill="rgb(219,150,6)" fg:x="16037" fg:w="40"/><text x="95.0818%" y="303.50"></text></g><g><title>performance-test`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.06%)</title><rect x="95.9612%" y="277" width="0.0591%" height="15" fill="rgb(251,46,16)" fg:x="16228" fg:w="10"/><text x="96.2112%" y="287.50"></text></g><g><title>performance-test`core::core_arch::aarch64::neon::generated::vcgez_s8 (17 samples, 0.10%)</title><rect x="98.7227%" y="229" width="0.1005%" height="15" fill="rgb(220,204,40)" fg:x="16695" fg:w="17"/><text x="98.9727%" y="239.50"></text></g><g><title>performance-test`core::core_arch::aarch64::neon::vld1_u8 (49 samples, 0.29%)</title><rect x="98.8233%" y="229" width="0.2898%" height="15" fill="rgb(211,85,2)" fg:x="16712" fg:w="49"/><text x="99.0733%" y="239.50"></text></g><g><title>performance-test`core::ptr::read_unaligned (47 samples, 0.28%)</title><rect x="98.8351%" y="213" width="0.2779%" height="15" fill="rgb(229,17,7)" fg:x="16714" fg:w="47"/><text x="99.0851%" y="223.50"></text></g><g><title>performance-test`core::intrinsics::copy_nonoverlapping::precondition_check (35 samples, 0.21%)</title><rect x="98.9060%" y="197" width="0.2070%" height="15" fill="rgb(239,72,28)" fg:x="16726" fg:w="35"/><text x="99.1560%" y="207.50"></text></g><g><title>performance-test`core::ub_checks::is_nonoverlapping::runtime (19 samples, 0.11%)</title><rect x="99.0007%" y="181" width="0.1124%" height="15" fill="rgb(230,47,54)" fg:x="16742" fg:w="19"/><text x="99.2507%" y="191.50"></text></g><g><title>performance-test`core::core_arch::arm_shared::neon::generated::vreinterpret_s8_u8 (10 samples, 0.06%)</title><rect x="99.1130%" y="229" width="0.0591%" height="15" fill="rgb(214,50,8)" fg:x="16761" fg:w="10"/><text x="99.3630%" y="239.50"></text></g><g><title>performance-test`core::core_arch::arm_shared::neon::generated::vreinterpret_u64_u8 (5 samples, 0.03%)</title><rect x="99.1721%" y="229" width="0.0296%" height="15" fill="rgb(216,198,43)" fg:x="16771" fg:w="5"/><text x="99.4221%" y="239.50"></text></g><g><title>performance-test`core::core_arch::arm_shared::neon::vget_lane_u64 (5 samples, 0.03%)</title><rect x="99.2017%" y="229" width="0.0296%" height="15" fill="rgb(234,20,35)" fg:x="16776" fg:w="5"/><text x="99.4517%" y="239.50"></text></g><g><title>performance-test`core::ptr::read_unaligned (2 samples, 0.01%)</title><rect x="99.2313%" y="229" width="0.0118%" height="15" fill="rgb(254,45,19)" fg:x="16781" fg:w="2"/><text x="99.4813%" y="239.50"></text></g><g><title>performance-test`&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (507 samples, 3.00%)</title><rect x="96.2687%" y="261" width="2.9980%" height="15" fill="rgb(219,14,44)" fg:x="16280" fg:w="507"/><text x="96.5187%" y="271.50">per..</text></g><g><title>performance-test`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (337 samples, 1.99%)</title><rect x="97.2740%" y="245" width="1.9928%" height="15" fill="rgb(217,220,26)" fg:x="16450" fg:w="337"/><text x="97.5240%" y="255.50">p..</text></g><g><title>performance-test`hashbrown::raw::neon::Group::match_full (4 samples, 0.02%)</title><rect x="99.2431%" y="229" width="0.0237%" height="15" fill="rgb(213,158,28)" fg:x="16783" fg:w="4"/><text x="99.4931%" y="239.50"></text></g><g><title>performance-test`core::iter::traits::iterator::Iterator::collect (781 samples, 4.62%)</title><rect x="94.8318%" y="373" width="4.6183%" height="15" fill="rgb(252,51,52)" fg:x="16037" fg:w="781"/><text x="95.0818%" y="383.50">perfo..</text></g><g><title>performance-test`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (781 samples, 4.62%)</title><rect x="94.8318%" y="357" width="4.6183%" height="15" fill="rgb(246,89,16)" fg:x="16037" fg:w="781"/><text x="95.0818%" y="367.50">perfo..</text></g><g><title>performance-test`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (781 samples, 4.62%)</title><rect x="94.8318%" y="341" width="4.6183%" height="15" fill="rgb(216,158,49)" fg:x="16037" fg:w="781"/><text x="95.0818%" y="351.50">perfo..</text></g><g><title>performance-test`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (781 samples, 4.62%)</title><rect x="94.8318%" y="325" width="4.6183%" height="15" fill="rgb(236,107,19)" fg:x="16037" fg:w="781"/><text x="95.0818%" y="335.50">perfo..</text></g><g><title>performance-test`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (781 samples, 4.62%)</title><rect x="94.8318%" y="309" width="4.6183%" height="15" fill="rgb(228,185,30)" fg:x="16037" fg:w="781"/><text x="95.0818%" y="319.50">perfo..</text></g><g><title>performance-test`alloc::vec::Vec&lt;T,A&gt;::extend_desugared (741 samples, 4.38%)</title><rect x="95.0683%" y="293" width="4.3818%" height="15" fill="rgb(246,134,8)" fg:x="16077" fg:w="741"/><text x="95.3183%" y="303.50">perfo..</text></g><g><title>performance-test`&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (580 samples, 3.43%)</title><rect x="96.0203%" y="277" width="3.4297%" height="15" fill="rgb(214,143,50)" fg:x="16238" fg:w="580"/><text x="96.2703%" y="287.50">per..</text></g><g><title>performance-test`hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (31 samples, 0.18%)</title><rect x="99.2667%" y="261" width="0.1833%" height="15" fill="rgb(228,75,8)" fg:x="16787" fg:w="31"/><text x="99.5167%" y="271.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::find_longest_match (16,817 samples, 99.44%)</title><rect x="0.0118%" y="405" width="99.4441%" height="15" fill="rgb(207,175,4)" fg:x="2" fg:w="16817"/><text x="0.2618%" y="415.50">performance-test`text_compression::encoder::substring_ledger::SubstringLedger::find_longest_match</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values (16,499 samples, 97.56%)</title><rect x="1.8923%" y="389" width="97.5637%" height="15" fill="rgb(205,108,24)" fg:x="320" fg:w="16499"/><text x="2.1423%" y="399.50">performance-test`text_compression::encoder::substring_ledger::SubstringLedger::values</text></g><g><title>performance-test`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="99.4619%" y="357" width="0.0118%" height="15" fill="rgb(244,120,49)" fg:x="16820" fg:w="2"/><text x="99.7119%" y="367.50"></text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::increment_count (5 samples, 0.03%)</title><rect x="99.4560%" y="405" width="0.0296%" height="15" fill="rgb(223,47,38)" fg:x="16819" fg:w="5"/><text x="99.7060%" y="415.50"></text></g><g><title>performance-test`std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 0.02%)</title><rect x="99.4619%" y="389" width="0.0237%" height="15" fill="rgb(229,179,11)" fg:x="16820" fg:w="4"/><text x="99.7119%" y="399.50"></text></g><g><title>performance-test`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 0.02%)</title><rect x="99.4619%" y="373" width="0.0237%" height="15" fill="rgb(231,122,1)" fg:x="16820" fg:w="4"/><text x="99.7119%" y="383.50"></text></g><g><title>performance-test`hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="99.4737%" y="357" width="0.0118%" height="15" fill="rgb(245,119,9)" fg:x="16822" fg:w="2"/><text x="99.7237%" y="367.50"></text></g><g><title>performance-test`text_compression::encoder::build_ledger::build_ledger (16,824 samples, 99.49%)</title><rect x="0.0059%" y="421" width="99.4855%" height="15" fill="rgb(241,163,25)" fg:x="1" fg:w="16824"/><text x="0.2559%" y="431.50">performance-test`text_compression::encoder::build_ledger::build_ledger</text></g><g><title>performance-test`&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.05%)</title><rect x="99.4915%" y="357" width="0.0532%" height="15" fill="rgb(217,214,3)" fg:x="16825" fg:w="9"/><text x="99.7415%" y="367.50"></text></g><g><title>performance-test`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.08%)</title><rect x="99.5447%" y="357" width="0.0828%" height="15" fill="rgb(240,86,28)" fg:x="16834" fg:w="14"/><text x="99.7947%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (7 samples, 0.04%)</title><rect x="99.7576%" y="261" width="0.0414%" height="15" fill="rgb(215,47,9)" fg:x="16870" fg:w="7"/><text x="100.0076%" y="271.50"></text></g><g><title>performance-test`&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.01%)</title><rect x="99.7989%" y="261" width="0.0118%" height="15" fill="rgb(252,25,45)" fg:x="16877" fg:w="2"/><text x="100.0489%" y="271.50"></text></g><g><title>performance-test`&lt;alloc::string::String as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 0.09%)</title><rect x="99.8108%" y="261" width="0.0946%" height="15" fill="rgb(251,164,9)" fg:x="16879" fg:w="16"/><text x="100.0608%" y="271.50"></text></g><g><title>performance-test`core::slice::raw::from_raw_parts::precondition_check (9 samples, 0.05%)</title><rect x="99.8522%" y="245" width="0.0532%" height="15" fill="rgb(233,194,0)" fg:x="16886" fg:w="9"/><text x="100.1022%" y="255.50"></text></g><g><title>performance-test`DYLD-STUB$$memcmp (2 samples, 0.01%)</title><rect x="99.9054%" y="261" width="0.0118%" height="15" fill="rgb(249,111,24)" fg:x="16895" fg:w="2"/><text x="100.1554%" y="271.50"></text></g><g><title>performance-test`&lt;&amp;alloc::string::String as core::str::pattern::Pattern&gt;::is_prefix_of (33 samples, 0.20%)</title><rect x="99.7516%" y="277" width="0.1951%" height="15" fill="rgb(250,223,3)" fg:x="16869" fg:w="33"/><text x="100.0016%" y="287.50"></text></g><g><title>performance-test`core::str::traits::_&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFull&gt;::index (5 samples, 0.03%)</title><rect x="99.9172%" y="261" width="0.0296%" height="15" fill="rgb(236,178,37)" fg:x="16897" fg:w="5"/><text x="100.1672%" y="271.50"></text></g><g><title>performance-test`core::iter::traits::iterator::Iterator::find::check::_{{closure}} (46 samples, 0.27%)</title><rect x="99.7043%" y="325" width="0.2720%" height="15" fill="rgb(241,158,50)" fg:x="16861" fg:w="46"/><text x="99.9543%" y="335.50"></text></g><g><title>performance-test`text_compression::substring_dictionary::SubstringDictionary::find_match::_{{closure}} (44 samples, 0.26%)</title><rect x="99.7162%" y="309" width="0.2602%" height="15" fill="rgb(213,121,41)" fg:x="16863" fg:w="44"/><text x="99.9662%" y="319.50"></text></g><g><title>performance-test`core::str::_&lt;impl str&gt;::starts_with (39 samples, 0.23%)</title><rect x="99.7457%" y="293" width="0.2306%" height="15" fill="rgb(240,92,3)" fg:x="16868" fg:w="39"/><text x="99.9957%" y="303.50"></text></g><g><title>performance-test`core::slice::_&lt;impl [T]&gt;::starts_with (5 samples, 0.03%)</title><rect x="99.9468%" y="277" width="0.0296%" height="15" fill="rgb(205,123,3)" fg:x="16902" fg:w="5"/><text x="100.1968%" y="287.50"></text></g><g><title>performance-test`text_compression::encoder::encode_string::encode_string (83 samples, 0.49%)</title><rect x="99.4915%" y="421" width="0.4908%" height="15" fill="rgb(205,97,47)" fg:x="16825" fg:w="83"/><text x="99.7415%" y="431.50"></text></g><g><title>performance-test`text_compression::substring_dictionary::SubstringDictionary::find_match (83 samples, 0.49%)</title><rect x="99.4915%" y="405" width="0.4908%" height="15" fill="rgb(247,152,14)" fg:x="16825" fg:w="83"/><text x="99.7415%" y="415.50"></text></g><g><title>performance-test`core::iter::traits::iterator::Iterator::find (83 samples, 0.49%)</title><rect x="99.4915%" y="389" width="0.4908%" height="15" fill="rgb(248,195,53)" fg:x="16825" fg:w="83"/><text x="99.7415%" y="399.50"></text></g><g><title>performance-test`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (83 samples, 0.49%)</title><rect x="99.4915%" y="373" width="0.4908%" height="15" fill="rgb(226,201,16)" fg:x="16825" fg:w="83"/><text x="99.7415%" y="383.50"></text></g><g><title>performance-test`core::iter::traits::iterator::Iterator::try_fold (60 samples, 0.35%)</title><rect x="99.6275%" y="357" width="0.3548%" height="15" fill="rgb(205,98,0)" fg:x="16848" fg:w="60"/><text x="99.8775%" y="367.50"></text></g><g><title>performance-test`&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (53 samples, 0.31%)</title><rect x="99.6689%" y="341" width="0.3134%" height="15" fill="rgb(214,191,48)" fg:x="16855" fg:w="53"/><text x="99.9189%" y="351.50"></text></g><g><title>dyld`start (16,910 samples, 99.99%)</title><rect x="0.0000%" y="565" width="99.9941%" height="15" fill="rgb(237,112,39)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="575.50">dyld`start</text></g><g><title>performance-test`main (16,910 samples, 99.99%)</title><rect x="0.0000%" y="549" width="99.9941%" height="15" fill="rgb(247,203,27)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="559.50">performance-test`main</text></g><g><title>performance-test`std::rt::lang_start (16,910 samples, 99.99%)</title><rect x="0.0000%" y="533" width="99.9941%" height="15" fill="rgb(235,124,28)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="543.50">performance-test`std::rt::lang_start</text></g><g><title>performance-test`std::rt::lang_start_internal (16,910 samples, 99.99%)</title><rect x="0.0000%" y="517" width="99.9941%" height="15" fill="rgb(208,207,46)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="527.50">performance-test`std::rt::lang_start_internal</text></g><g><title>performance-test`std::rt::lang_start::_{{closure}} (16,910 samples, 99.99%)</title><rect x="0.0000%" y="501" width="99.9941%" height="15" fill="rgb(234,176,4)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="511.50">performance-test`std::rt::lang_start::_{{closure}}</text></g><g><title>performance-test`std::sys::backtrace::__rust_begin_short_backtrace (16,910 samples, 99.99%)</title><rect x="0.0000%" y="485" width="99.9941%" height="15" fill="rgb(230,133,28)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="495.50">performance-test`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>performance-test`core::ops::function::FnOnce::call_once (16,910 samples, 99.99%)</title><rect x="0.0000%" y="469" width="99.9941%" height="15" fill="rgb(211,137,40)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="479.50">performance-test`core::ops::function::FnOnce::call_once</text></g><g><title>performance-test`performance_test::main (16,910 samples, 99.99%)</title><rect x="0.0000%" y="453" width="99.9941%" height="15" fill="rgb(254,35,13)" fg:x="0" fg:w="16910"/><text x="0.2500%" y="463.50">performance-test`performance_test::main</text></g><g><title>performance-test`text_compression::encoder::encode (16,909 samples, 99.99%)</title><rect x="0.0059%" y="437" width="99.9882%" height="15" fill="rgb(225,49,51)" fg:x="1" fg:w="16909"/><text x="0.2559%" y="447.50">performance-test`text_compression::encoder::encode</text></g><g><title>performance-test`text_compression::encoder::substring_ledger::SubstringLedger::get_most_impactful_strings (2 samples, 0.01%)</title><rect x="99.9823%" y="421" width="0.0118%" height="15" fill="rgb(251,10,15)" fg:x="16908" fg:w="2"/><text x="100.2323%" y="431.50"></text></g><g><title>all (16,911 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(228,207,15)" fg:x="0" fg:w="16911"/><text x="0.2500%" y="591.50"></text></g></svg></svg>